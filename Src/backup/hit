ac.c:107:	if (IS_NPC (ch) || IS_SET (ch->act, PLR_SILENCE))
ac.c:114:	if (ch->in_room != NULL && IS_SET (ch->in_room->added_flags, ROOM2_SILENCE))
ac.c:121:	REMOVE_BIT (ch->deaf, channel);
ac.c:137:		position = ch->position;
ac.c:138:		ch->position = POS_STANDING;
ac.c:140:		ch->position = position;
ac.c:149:				sprintf (buf2, "#B<#cOOC#B>#c %s#B:#c $t#n", capitalize (ch->name));		
ac.c:151:		position = ch->position;
ac.c:152:		ch->position = POS_STANDING;
ac.c:154:		ch->position = position;
ac.c:159:		sprintf (buf, "#B<#cOOC#B> #c%s#c $t#n", capitalize (ch->name));
ac.c:160:		if (IS_SET (ch->act, PLR_WIZINVIS))
ac.c:166:				sprintf (buf2, "#B<#cOOC#B>#c %s#c $t#n", capitalize (ch->name));
ac.c:168:		position = ch->position;
ac.c:169:		ch->position = POS_STANDING;
ac.c:171:		ch->position = position;
ac.c:179:		if (IS_SET (ch->act, PLR_WIZINVIS))
ac.c:187:		position = ch->position;
ac.c:188:		ch->position = POS_STANDING;
ac.c:190:		ch->position = position;
ac.c:194:		sprintf (buf, "#e<#CStory#e> #c%s#e: #c$t#n", capitalize (ch->name));
ac.c:195:		sprintf (buf2, "#e<#CStory#e> #c%s#e: #c$t#e#n", capitalize (ch->name));
ac.c:196:		position = ch->position;
ac.c:197:		ch->position = POS_STANDING;
ac.c:199:		ch->position = position;
ac.c:204:		sprintf (buf2, "#w%s requests #e: #w$t#n", capitalize (ch->name));
ac.c:205:		position = ch->position;
ac.c:206:		ch->position = POS_STANDING;
ac.c:208:		ch->position = position;
ac.c:221:		if (d->connected == CON_PLAYING && vch != ch && !IS_SET (och->deaf, channel))
ac.c:228:			if (channel == CHANNEL_YELL && vch->in_room->area != ch->in_room->area)
ac.c:234:			if (channel == CHANNEL_OSAY && vch->in_room->vnum != ch->in_room->vnum)
ac.c:240:				if ((ch->plane != och->plane) && !IS_STORYTELLER(och))
ac.c:242:				if ((ch->plane != och->plane) && !IS_STORYTELLER(ch))
ac.c:246:			position = vch->position;
ac.c:247:			vch->position = POS_STANDING;
ac.c:249:			if (!IS_NPC (vch) && IS_VAMPIRE (vch) && strlen (ch->side) > 1 && strlen (vch->side) > 1 && str_cmp (ch->side, vch->side))
ac.c:252:				vch->position = position;
ac.c:276:			vch->position = position;
ac.c:311:	if (ch->pcdata->confirm_delete)
ac.c:316:			ch->pcdata->confirm_delete = FALSE;
ac.c:321:			sprintf (buf, "#C%s#c has suffered Final Death. We mourn for them.", ch->name);
ac.c:323:			sprintf (buf, "%s%s", PLAYER_DIR, capitalize (ch->name));
ac.c:359:	ch->pcdata->confirm_delete = TRUE;
ac.c:406:	if (ch->in_room != NULL && IS_SET (ch->in_room->added_flags, ROOM2_SILENCE))
ac.c:471:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:472:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:483:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:484:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:495:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:496:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:507:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:508:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:519:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:520:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:531:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:532:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:543:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:544:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:555:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:556:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:567:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:568:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:579:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:580:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:591:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:592:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:603:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:604:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:615:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:616:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:627:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:628:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:639:                ch->pcdata->wolfform[1] == FORM_HOMID)
ac.c:655:                ( ch->pcdata->wolfform[1] == FORM_LUPUS || 
ac.c:656:		ch->pcdata->wolfform[1] == FORM_HISPO ))
ac.c:674:	if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
ac.c:677:		if (ch->desc != NULL && ch->desc->snoop_by != NULL)
ac.c:679:			if ((vch = ch->desc->snoop_by->character) == NULL)
ac.c:680:				ch->desc->snoop_by = NULL;
ac.c:681:			else if (ch->in_room == NULL || vch->in_room == NULL)
ac.c:691:	to = ch->in_room->people;
ac.c:699:		if (ch->plane != to->plane && !IS_STORYTELLER(to))
ac.c:705:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
ac.c:710:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
ac.c:719:			sprintf (name, ch->short_descr);
ac.c:721:			sprintf (name, "%s #e(%s)#n",ch->morph, ch->name);
ac.c:723:			sprintf (name, ch->name);
ac.c:748:	for (rt = ch->in_room->roomtext; rt != NULL; rt = rt->next)
ac.c:753:				if (!is_in (ch->name, rt->name))
ac.c:761:					vch_next = vch->next;
ac.c:762:					if (vch->in_room == NULL)
ac.c:766:					if (vch->in_room == ch->in_room && vch->pIndexData->vnum == rt->mob)
ac.c:784:				REMOVE_BIT (ch->in_room->room_flags, ROOM_DARK);
ac.c:787:				SET_BIT (ch->in_room->room_flags, ROOM_DARK);
ac.c:792:				obj = create_object (get_obj_index (rt->power), ch->level);
ac.c:795:				if (ch->carry_weight + get_obj_weight (obj) > can_carry_w (ch) || ch->carry_number + 1 > can_carry_n (ch))
ac.c:802:						obj_to_room (obj, ch->in_room);
ac.c:816:				char_to_room (mob, ch->in_room);
ac.c:835:				obj_to_room (obj, ch->in_room);
ac.c:960:	if (IS_NPC (ch) || IS_SET (ch->act, PLR_SILENCE))
ac.c:965:	if (ch->in_room != NULL && IS_SET (ch->in_room->added_flags, ROOM2_SILENCE))
ac.c:988:	if ((victim = get_char_world (ch, arg)) == NULL || (IS_NPC (victim) && victim->in_room != ch->in_room))
ac.c:1016:		if (IS_NPC (victim) || IS_NPC (ch) || strlen (victim->pcdata->marriage) < 2 || str_cmp (ch->name, victim->pcdata->marriage))
ac.c:1041:				sprintf (name, ch->morph); 
ac.c:1043:			sprintf (name, ch->name);
ac.c:1082:	if ((victim = get_char_world (ch, arg)) == NULL || (victim->in_room != ch->in_room))
ac.c:1100:	if (ch->pcdata->language[0] == LANG_ENGLISH){
ac.c:1105:	else if (ch->pcdata->language[0] == LANG_ARABIC){
ac.c:1109:		else if (ch->pcdata->language[0] == LANG_ANIMAL){
ac.c:1113:	else if (ch->pcdata->language[0] == LANG_FRENCH){
ac.c:1117:		else if (ch->pcdata->language[0] == LANG_ITALIAN){
ac.c:1121:		else if (ch->pcdata->language[0] == LANG_SPANISH){
ac.c:1125:		else if (ch->pcdata->language[0] == LANG_LATIN){
ac.c:1129:		else if (ch->pcdata->language[0] == LANG_HEBREW){
ac.c:1133:		else if (ch->pcdata->language[0] == LANG_GAELIC){
ac.c:1137:		else if (ch->pcdata->language[0] == LANG_EGYPTIAN){
ac.c:1141:		else if (ch->pcdata->language[0] == LANG_GREEK){
ac.c:1145:		else if (ch->pcdata->language[0] == LANG_SLAVIC){
ac.c:1149:		else if (ch->pcdata->language[0] == LANG_GAROU){
ac.c:1153:		else if (ch->pcdata->language[0] == LANG_GERMAN){
ac.c:1157:		else if (ch->pcdata->language[0] == LANG_RUSSIAN){
ac.c:1161:		else if (ch->pcdata->language[0] == LANG_NORSE){
ac.c:1165:		else if (ch->pcdata->language[0] == LANG_WYRM){
ac.c:1183:			sprintf (name, ch->morph);
ac.c:1185:			sprintf (name, ch->name);
ac.c:1214:to = ch->in_room->people;
ac.c:1219:			else if (!strcmp (ch->name, to->name))
ac.c:1262:	if (IS_NPC (ch) || IS_SET (ch->act, PLR_SILENCE))
ac.c:1267:	if (ch->in_room != NULL && IS_SET (ch->in_room->added_flags, ROOM2_SILENCE))
ac.c:1272:	if ((victim = ch->reply) == NULL)
ac.c:1292:		if (IS_NPC (victim) || IS_NPC (ch) || strlen (victim->pcdata->marriage) < 2 || str_cmp (ch->name, victim->pcdata->marriage))
ac.c:1313:			sprintf (cname, ch->short_descr);
ac.c:1315:			sprintf (cname, ch->morph); */
ac.c:1317:			sprintf (cname, ch->name);
ac.c:1352:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_NO_EMOTE))
ac.c:1421:	if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
ac.c:1427:	to = ch->in_room->people;
ac.c:1438:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
ac.c:1443:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
ac.c:1452:			sprintf (name, ch->short_descr);
ac.c:1454:			sprintf (name, ch->morph);
ac.c:1456:			sprintf (name, ch->name);
ac.c:1484:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_NO_EMOTE))
ac.c:1513:		strcpy (you, ch->short_descr);
ac.c:1515:		strcpy (you, ch->name);
ac.c:1537:	if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
ac.c:1571:	to = ch->in_room->people;
ac.c:1582:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
ac.c:1587:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
ac.c:1596:			sprintf (name, ch->short_descr);
ac.c:1598:			sprintf (name, ch->morph);
ac.c:1600:			sprintf (name, ch->name);
ac.c:1630:	if (IS_SET (ch->act, ACT_NOQUIT) )
ac.c:1647:		if (ch->wizard != NULL)
ac.c:1654:		sprintf (buf, "#C%s#e has left #bTwilight Reconquista#n.", ch->short_descr);
ac.c:1660:	if (ch->position == POS_FIGHTING)
ac.c:1666:	if (ch->position < POS_SLEEPING)
ac.c:1673:		if (ch->in_room != NULL)
ac.c:1675:			REMOVE_BIT (ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
ac.c:1676:			REMOVE_BIT (ch->more, MORE_DARKNESS);
ac.c:1677:			ch->pcdata->darkness = 60;
ac.c:1684:		if (ch->in_room != NULL)
ac.c:1686:			REMOVE_BIT (ch->in_room->added_flags, ROOM2_SILENCE);
ac.c:1687:			REMOVE_BIT (ch->more, MORE_SILENCE);
ac.c:1688:			ch->pcdata->silence = 60;
ac.c:1719:if ((IS_GHOUL(ch)) || (!strcmp(ch->clan, "Ghoul"))){
ac.c:1739:if ((IS_VAMPIRE(ch)) && (strcmp(ch->clan, "Ghoul"))){
ac.c:1825:	if (ch->pcdata->in_progress)
ac.c:1826:		free_note (ch->pcdata->in_progress);
ac.c:1831:	d = ch->desc;
ac.c:1832:	for (obj = ch->carrying; obj != NULL; obj = obj_next)
ac.c:1844:	if (ch->pcdata->obj_vnum != 0)
ac.c:1853:	if (ch->in_room != NULL)
ac.c:1857:	sprintf (log_buf, "%s has quit.", ch->name);
ac.c:1860:	if ((obj = ch->pcdata->chobj) != NULL)
ac.c:1863:		ch->pcdata->chobj = NULL;
ac.c:1866:	else if (ch->pcdata->obj_vnum == 0)
ac.c:1868:		sprintf (buf, "#C%s#e has left #bTwilight Reconquista#n.", ch->name);
ac.c:1893:	if (ch->level < 2)
ac.c:1895:	if (ch->mkill < 5 && !IS_IMMORTAL (ch))
ac.c:1897:	if (ch->name == NULL)
ac.c:1924:	if (IS_AFFECTED (ch, AFF_CHARM) && ch->master != NULL)
ac.c:1926:		act ("But you'd rather follow $N!", ch, NULL, ch->master, TO_CHAR);
ac.c:1932:		if (ch->master == NULL)
ac.c:1941:	if (ch->master != NULL)
ac.c:1952:	if (ch->master != NULL)
ac.c:1958:	ch->master = master;
ac.c:1959:	ch->leader = NULL;
ac.c:1973:	if (ch->master == NULL)
ac.c:1981://		REMOVE_BIT (ch->affected_by, AFF_CHARM);
ac.c:1985:	if ((can_see (ch->master, ch)) && !IS_MORE3(ch, MORE3_OBFUS2))
ac.c:1986:		act ("$n stops following you.", ch, NULL, ch->master, TO_VICT);
ac.c:1987:	act ("You stop following $N.", ch, NULL, ch->master, TO_CHAR);
ac.c:1989:	ch->master = NULL;
ac.c:1990:	ch->leader = NULL;
ac.c:2001:	if (ch->master != NULL)
ac.c:2004:	ch->leader = NULL;
ac.c:2008:		fch_next = fch->next;
ac.c:2009:		if (fch->leader == ch)
ac.c:2010:			fch->leader = fch;
ac.c:2011:		if (fch->master == ch)
ac.c:2013:		if (!IS_NPC (ch) && IS_NPC (fch) && fch->lord != NULL)
ac.c:2015:			if (strlen (fch->lord) > 1 && !str_cmp (fch->lord, ch->name))
ac.c:2035:	if (ach->leader != NULL)
ac.c:2036:		ach = ach->leader;
ac.c:2037:	if (bch->leader != NULL)
ac.c:2038:		bch = bch->leader;
ac.c:2044:	if (IS_SET (ch->in_room->room_flags, ROOM_DARK))
ac.c:2046:		REMOVE_BIT (ch->in_room->room_flags, ROOM_DARK);
ac.c:2051:	SET_BIT (ch->in_room->room_flags, ROOM_DARK);
ac.c:2062:	in_room = ch->in_room->vnum;
ac.c:2095:	in_room = ch->in_room->vnum;
ac.c:2115:	in_room = ch->in_room->vnum;
ac.c:2140:	for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ac.c:2160:	for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ac.c:2181:	for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ac.c:2201:	for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ac.c:2219:	for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ac.c:2283:		if (ch->pcdata->language[0] == LANG_ENGLISH)
ac.c:2288:		ch->pcdata->language[0] = LANG_ENGLISH;
ac.c:2294:		if (ch->pcdata->language[0] == DIA_OLDE)
ac.c:2299:		ch->pcdata->language[0] = DIA_OLDE;
ac.c:2303:	else if (!str_cmp (arg, "arabic") && ch->pcdata->learned[gsn_arabic] > 0)
ac.c:2305:		if (ch->pcdata->language[0] == LANG_ARABIC)
ac.c:2310:		ch->pcdata->language[0] = LANG_ARABIC;
ac.c:2314:	else if (!str_cmp (arg, "animal") && ch->pcdata->learned[gsn_animal] > 0)
ac.c:2316:		if (ch->pcdata->language[0] == LANG_ANIMAL)
ac.c:2321:		ch->pcdata->language[0] = LANG_ANIMAL;
ac.c:2325:	else if (!str_cmp (arg, "french") && ch->pcdata->learned[gsn_french] > 0)
ac.c:2327:		if (ch->pcdata->language[0] == LANG_FRENCH)
ac.c:2332:		ch->pcdata->language[0] = LANG_FRENCH;
ac.c:2336:	else if (!str_cmp (arg, "latin") && ch->pcdata->learned[gsn_latin] > 0)
ac.c:2338:		if (ch->pcdata->language[0] == LANG_LATIN)
ac.c:2343:		ch->pcdata->language[0] = LANG_LATIN;
ac.c:2347:	else if (!str_cmp (arg, "spanish") && ch->pcdata->learned[gsn_spanish] > 0)
ac.c:2349:		if (ch->pcdata->language[0] == LANG_SPANISH)
ac.c:2354:		ch->pcdata->language[0] = LANG_SPANISH;
ac.c:2358:	else if (!str_cmp (arg, "italian") && ch->pcdata->learned[gsn_italian] > 0)
ac.c:2360:		if (ch->pcdata->language[0] == LANG_ITALIAN)
ac.c:2365:		ch->pcdata->language[0] = LANG_ITALIAN;
ac.c:2370:	else if (!str_cmp (arg, "german") && ch->pcdata->learned[gsn_german] > 0)
ac.c:2372:		if (ch->pcdata->language[0] == LANG_GERMAN)
ac.c:2377:		ch->pcdata->language[0] = LANG_GERMAN;
ac.c:2381:	else if (!str_cmp (arg, "russian") && ch->pcdata->learned[gsn_russian] > 0)
ac.c:2383:		if (ch->pcdata->language[0] == LANG_RUSSIAN)
ac.c:2388:		ch->pcdata->language[0] = LANG_RUSSIAN;
ac.c:2393:	else if (!str_cmp (arg, "gaelic") && ch->pcdata->learned[gsn_gaelic] > 0)
ac.c:2395:		if (ch->pcdata->language[0] == LANG_GAELIC)
ac.c:2400:		ch->pcdata->language[0] = LANG_GAELIC;
ac.c:2404:	else if (!str_cmp (arg, "egyptian") && ch->pcdata->learned[gsn_egyptian] > 0)
ac.c:2406:		if (ch->pcdata->language[0] == LANG_EGYPTIAN)
ac.c:2411:		ch->pcdata->language[0] = LANG_EGYPTIAN;
ac.c:2415:	else if (!str_cmp (arg, "hebrew") && ch->pcdata->learned[gsn_hebrew] > 0)
ac.c:2417:		if (ch->pcdata->language[0] == LANG_HEBREW)
ac.c:2422:		ch->pcdata->language[0] = LANG_HEBREW;
ac.c:2427:	else if (!str_cmp (arg, "greek") && ch->pcdata->learned[gsn_greek] > 0)
ac.c:2429:		if (ch->pcdata->language[0] == LANG_GREEK)
ac.c:2434:		ch->pcdata->language[0] = LANG_GREEK;
ac.c:2438:	else if (!str_cmp (arg, "slavic") && ch->pcdata->learned[gsn_slavic] > 0)
ac.c:2440:		if (ch->pcdata->language[0] == LANG_SLAVIC)
ac.c:2445:		ch->pcdata->language[0] = LANG_SLAVIC;
ac.c:2449:	else if (!str_cmp (arg, "garou") && ch->pcdata->learned[gsn_garou] > 0)
ac.c:2451:		if (ch->pcdata->language[0] == LANG_GAROU)
ac.c:2456:		ch->pcdata->language[0] = LANG_GAROU;
ac.c:2461:	else if (!str_cmp (arg, "wyrm") && ch->pcdata->learned[gsn_wyrm] > 0)
ac.c:2463:		if (ch->pcdata->language[0] == LANG_WYRM)
ac.c:2469:		ch->pcdata->language[0] = LANG_WYRM;
ac.c:2474:	else if (!str_cmp (arg, "norse") && ch->pcdata->learned[gsn_norse] > 0)
ac.c:2476:		if (ch->pcdata->language[0] == LANG_NORSE)
ac.c:2481:		ch->pcdata->language[0] = LANG_NORSE;
ac.c:2533:	numberoflanguages = ch->abilities[KNOWLEDGES][KNO_LINGUISTICS] + 1;
ac.c:2534:	if (ch->abilities[KNOWLEDGES][KNO_ACADEMICS] > 0 && ch->pcdata->learned[gsn_latin] < 100)
ac.c:2535:		ch->pcdata->learned[gsn_latin] = 100;
ac.c:2536:	if (IS_WEREWOLF (ch) && ch->pcdata->learned[gsn_garou] < 100)
ac.c:2537:		ch->pcdata->learned[gsn_garou] = 100;
ac.c:2580:	if (!str_cmp (arg, "arabic") && ch->pcdata->learned[gsn_arabic] > 0)
ac.c:2585:	else if (!str_cmp (arg, "animal") && ch->pcdata->learned[gsn_animal] > 0)
ac.c:2590:	else if (!str_cmp (arg, "french") && ch->pcdata->learned[gsn_french] > 0)
ac.c:2595:	else if (!str_cmp (arg, "latin") && ch->pcdata->learned[gsn_latin] > 0)
ac.c:2600:	else if (!str_cmp (arg, "spanish") && ch->pcdata->learned[gsn_spanish] > 0)
ac.c:2605:	else if (!str_cmp (arg, "italian") && ch->pcdata->learned[gsn_italian] > 0)
ac.c:2610:	else if (!str_cmp (arg, "german") && ch->pcdata->learned[gsn_german] > 0)
ac.c:2615:	else if (!str_cmp (arg, "russian") && ch->pcdata->learned[gsn_russian] > 0)
ac.c:2620:	else if (!str_cmp (arg, "hebrew") && ch->pcdata->learned[gsn_hebrew] > 0)
ac.c:2625:	else if (!str_cmp (arg, "gaelic") && ch->pcdata->learned[gsn_gaelic] > 0)
ac.c:2630:	else if (!str_cmp (arg, "egyptian") && ch->pcdata->learned[gsn_egyptian] > 0)
ac.c:2635:	else if (!str_cmp (arg, "greek") && ch->pcdata->learned[gsn_greek] > 0)
ac.c:2640:	else if (!str_cmp (arg, "slavic") && ch->pcdata->learned[gsn_slavic] > 0)
ac.c:2645:	else if (!str_cmp (arg, "norse") && ch->pcdata->learned[gsn_norse] > 0)
ac.c:2650:	else if (!str_cmp (arg, "english") && ch->pcdata->learned[gsn_english] > 0)
ac.c:2658:	if (ch->pcdata->learned[gsn_arabic] > 0)
ac.c:2660:	if (ch->pcdata->learned[gsn_animal] > 0)
ac.c:2662:	if (ch->pcdata->learned[gsn_french] > 0)
ac.c:2664:	if (ch->pcdata->learned[gsn_latin] > 0)
ac.c:2666:	if (ch->pcdata->learned[gsn_spanish] > 0)
ac.c:2668:	if (ch->pcdata->learned[gsn_italian] > 0)
ac.c:2670:	if (ch->pcdata->learned[gsn_german] > 0)
ac.c:2672:	if (ch->pcdata->learned[gsn_russian] > 0)
ac.c:2674:	if (ch->pcdata->learned[gsn_hebrew] > 0)
ac.c:2676:	if (ch->pcdata->learned[gsn_gaelic] > 0)
ac.c:2678:	if (ch->pcdata->learned[gsn_egyptian] > 0)
ac.c:2680:	if (ch->pcdata->learned[gsn_greek] > 0)
ac.c:2682:	if (ch->pcdata->learned[gsn_slavic] > 0)
ac.c:2684:	if (ch->pcdata->learned[gsn_norse] > 0)
ac.c:2686:	if (ch->pcdata->learned[gsn_english] > 0)
ac.c:2688:	if (ch->pcdata->learned[gsn_latin] && ch->abilities[KNOWLEDGES][KNO_ACADEMICS] > 0)
ac.c:2701:		ch->pcdata->learned[gsn_arabic] = 75;
ac.c:2706:		ch->pcdata->learned[gsn_animal] = 75;
ac.c:2711:		ch->pcdata->learned[gsn_english] = 75;
ac.c:2716:		ch->pcdata->learned[gsn_french] = 75;
ac.c:2721:		ch->pcdata->learned[gsn_latin] = 75;
ac.c:2726:		ch->pcdata->learned[gsn_spanish] = 75;
ac.c:2731:		ch->pcdata->learned[gsn_italian] = 75;
ac.c:2736:		ch->pcdata->learned[gsn_german] = 75;
ac.c:2741:		ch->pcdata->learned[gsn_russian] = 75;
ac.c:2746:		ch->pcdata->learned[gsn_gaelic] = 75;
ac.c:2751:		ch->pcdata->learned[gsn_hebrew] = 75;
ac.c:2756:		ch->pcdata->learned[gsn_egyptian] = 75;
ac.c:2761:		ch->pcdata->learned[gsn_greek] = 75;
ac.c:2766:		ch->pcdata->learned[gsn_slavic] = 75;
ac.c:2771:		ch->pcdata->learned[gsn_norse] = 75;
ac.c:3128:			num = ch->vampgen;
ac.c:3156:		if (ch->vampgen != num)
ac.c:3164:			if (ch->pcdata->diableries[DIAB_EVER] > 0)
ac.c:3178:		if (ch->pcdata->diableries[DIAB_EVER] > 0 && !t_f)
ac.c:3180:		else if (ch->pcdata->diableries[DIAB_EVER] < 1 && t_f)
ac.c:3195:		ch->pcdata->lie = LIE_FALSE;
ac.c:3197:		ch->pcdata->lie = LIE_TRUE;
ac.c:3198:	SET_BIT (ch->more, MORE_INFORM);
ac.c:3220:	if (!strstr (argument, ch->name) == -1)
ac.c:3237:		if (d->connected == CON_PLAYING && d->character->in_room == ch->in_room)
ac.c:3262:	fprintf (fp, "%s: %s was rewarded %d xp.\n\r", temp, ch->name, reward);
ac.c:3297:	if ((ch->pcdata->last_vote_time.day == time_info.day) && !IS_IMMORTAL(ch))
ac.c:3303:	ch->pcdata->last_vote_time.day = time_info.day;
ac.c:3308:		ch->pcdata->votes++;
ai.c:473:			if (ch->pcdata->obeah > 0)
ai.c:718:		if (!IS_NPC (ch) && (IS_WEREWOLF (ch))  && ch->pcdata->wolfform[1] > FORM_HOMID)
ai.c:734: 		if(IS_SET(ch->polyaff, POLY_WOLF) && IS_VAMPIRE(ch))
ai.c:855:	if (ch->pcdata->thaum[disc] > max)
ai.c:857:	else if (ch->pcdata->thaum[disc] < 0)
ai.c:859:	return ch->pcdata->thaum[disc];
ai.c:869:	if (ch->class == CLASS_WEREWOLF && ch->pcdata->rank > get_disc (ch, DISC_CELERITY))
ai.c:870:		return ch->pcdata->rank;
ai.c:872:	if (ch->pcdata->celerity > 0 || (!IS_VAMPIRE (ch) && !IS_GHOUL (ch)))
ai.c:891:	if (ch->pcdata->powers_set[disc] > 0)
ai.c:892:		min_disc = ch->pcdata->powers_set[disc];
ai.c:894:	if (ch->class != CLASS_VAMPIRE)
ai.c:902:	if (ch->pcdata->powers_set[disc] > min_disc)
ai.c:903:		min_disc = ch->pcdata->powers_set[disc];
ai.c:905:	if (ch->pcdata->powers_mod[disc] < 1)
ai.c:907:		if (ch->pcdata->powers[disc] > min_disc)
ai.c:909:			if (ch->pcdata->powers[disc] > max)
ai.c:912:				return ch->pcdata->powers[disc];
ai.c:918:	if (ch->pcdata->powers[disc] < 1)
ai.c:921:		total_disc = ch->pcdata->powers[disc];
ai.c:922:	if (ch->pcdata->powers_mod[disc] > 0)
ai.c:923:		total_disc += ch->pcdata->powers_mod[disc];
ai.c:942:	if (ch->pcdata->powers_set[disc] > 0)
ai.c:943:		min_disc = ch->pcdata->powers_set[disc];
ai.c:945:	if (ch->pcdata->powers_mod[disc] < 1)
ai.c:947:		if (ch->pcdata->powers[disc] > min_disc)
ai.c:948:			return ch->pcdata->powers[disc];
ai.c:953:	if (ch->pcdata->powers[disc] < 1)
ai.c:956:		total_disc = ch->pcdata->powers[disc];
ai.c:957:	if (ch->pcdata->powers_mod[disc] > 0)
ai.c:958:		total_disc += ch->pcdata->powers_mod[disc];
ai.c:979:	if ((IS_SKINDANCER (ch)) && ch->pcdata->cland[0] != disc)
ai.c:981:	if (ch->pcdata->breed[disc] > max)
ai.c:983:	else if (ch->pcdata->breed[disc] < 0)
ai.c:985:	return ch->pcdata->breed[disc];
ai.c:998:	if ((IS_SKINDANCER (ch)) && ch->pcdata->cland[1] != disc)
ai.c:1000:	if (ch->pcdata->auspice[disc] > max)
ai.c:1002:	else if (ch->pcdata->auspice[disc] < 0)
ai.c:1004:	return ch->pcdata->auspice[disc];
ai.c:1022:	if (IS_SKINDANCER (ch) && ch->pcdata->cland[2] != disc)
ai.c:1024:	if (ch->pcdata->tribes[disc] > max)
ai.c:1026:	else if (ch->pcdata->tribes[disc] < 0)
ai.c:1028:	return ch->pcdata->tribes[disc];
ai.c:1048:	if (ch->desc == NULL)
ai.c:1072:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
ai.c:1081:			if (IS_NPC (ch) || IS_SET (ch->act, PLR_COMBINE))
ai.c:1121:		if (IS_NPC (ch) || IS_SET (ch->act, PLR_COMBINE))
ai.c:1140:		if (IS_NPC (ch) || IS_SET (ch->act, PLR_COMBINE))
ai.c:1180:	if (IS_MORE3(victim, MORE3_OBFUS1) && (victim->pcdata->powers[DISC_OBFUSCATE] > ch->pcdata->powers[DISC_AUSPEX]) && !IS_IMMORTAL (ch) && IS_MORE2 (victim, MORE2_RPFLAG))
ai.c:1183:	if (IS_MORE3(victim, MORE3_OBFUS2) && (victim->pcdata->powers[DISC_OBFUSCATE] > ch->pcdata->powers[DISC_AUSPEX]) && !IS_IMMORTAL (ch) && IS_MORE2 (victim, MORE2_RPFLAG))
ai.c:1370:		if (!IS_NPC (ch) && IS_SET (ch->act, PLR_BRIEF))
ai.c:1373:		if (IS_NPC (ch) || !IS_SET (ch->act, PLR_BRIEF))
ai.c:1573:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_BRIEF))
ai.c:1708:				if (IS_NPC (ch) || ch->pcdata->chobj == NULL || ch->pcdata->chobj != obj)
ai.c:1733:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
ai.c:1746:		 && ( IS_SET(rch->act, PLR_WIZINVIS)
ai.c:1747:		 &&   !IS_SET(ch->act, PLR_HOLYLIGHT)))
ai.c:1758:	else if ( room_is_dark( ch->in_room ) && !IS_VAMPAFF( rch, VAM_EARTHMELDED)
ai.c:1771:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
ai.c:1809:	if (ch->desc == NULL && (wizard = ch->wizard) == NULL)
ai.c:1812:	if (ch->in_room == NULL)
ai.c:1815:	if (ch->position == POS_SLEEPING)
ai.c:1824:	if (!IS_NPC (ch) && ch->in_room != NULL && IS_SET (ch->in_room->room_flags, ROOM_TOTAL_DARKNESS) && !IS_ITEMAFF (ch, ITEMA_VISION) && !IS_IMMORTAL (ch))
ai.c:1839:	if (!IS_NPC (ch) && !IS_SET (ch->act, PLR_HOLYLIGHT) && !IS_ITEMAFF (ch, ITEMA_VISION) && !IS_VAMPAFF (ch, VAM_NIGHTSIGHT) && !IS_MORE2 (ch, MORE2_HEIGHTENSENSES) && !IS_MORE2 (ch, MORE2_NIGHTEYES) && !IS_AFFECTED (ch, AFF_SHADOWPLANE) && !(ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT && !IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL) && room_is_dark (ch->in_room))
ai.c:1842:		show_char_to_char (ch->in_room->people, ch);
ai.c:1845:	if (!room_is_dark (ch->in_room) && (IS_VAMPIRE (ch) || IS_GHOUL (ch)) && IS_MORE2 (ch, MORE2_NIGHTEYES))
ai.c:1858:		if (ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT && !IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
ai.c:1859:			act ("$p", ch, ch->pcdata->chobj->in_obj, NULL, TO_CHAR);
ai.c:1864:			sprintf (buf, "%s\n\r", ch->in_room->name);
ai.c:1867:			if (IS_IMMORTAL (ch) && IS_SET (ch->act, PLR_ROOMFLAGS))
ai.c:1869:				sprintf (buf2, " #C(#1vnum#n: %d) [#1Sector#n:%s #1Room Flags#n:%s]#n", ch->in_room->vnum, room_sector (ch->in_room->sector_type), room_bit_name (ch->in_room->room_flags));
ai.c:1876:		if (!IS_NPC (ch) && IS_SET (ch->in_room->room_flags, ROOM_SMALLCAERN))
ai.c:1881:		if (!IS_NPC (ch) && IS_SET (ch->in_room->room_flags, ROOM_LARGECAERN))
ai.c:1886:		if (!IS_NPC (ch) && IS_SET (ch->in_room->room_flags, ROOM_DEFILEDCAERN))
ai.c:1891:		if (!IS_NPC (ch) && IS_SET (ch->in_room->room_flags, ROOM_UNDER_WATER))
ai.c:1896:		if (ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT && !IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
ai.c:1898:			act ("You are inside $p.", ch, ch->pcdata->chobj->in_obj, NULL, TO_CHAR);
ai.c:1899:			show_list_to_char (ch->pcdata->chobj->in_obj->contains, ch, FALSE, FALSE);
ai.c:1904:			if (!IS_NPC (ch) && IS_SET (ch->in_room->room_flags, ROOM_SMALLCAERN)){
ai.c:1909:			else if (!IS_NPC (ch) && IS_SET (ch->in_room->room_flags, ROOM_LARGECAERN)){
ai.c:1914:			else if (!IS_NPC (ch) && IS_SET (ch->in_room->room_flags, ROOM_DEFILEDCAERN)){
ai.c:1918:			else if (!IS_NPC (ch) &&  (ch->in_room->sector_type == SECT_MOUNTAIN)){
ai.c:1922:			else if (!IS_NPC (ch) && (ch->in_room->sector_type == SECT_CITY)){
ai.c:1926:			else if (!IS_NPC (ch) && (ch->in_room->sector_type == SECT_FIELD)){
ai.c:1930:			else if (!IS_NPC (ch) && (ch->in_room->sector_type == SECT_FOREST)){
ai.c:1934:			else if (!IS_NPC (ch) && (ch->in_room->sector_type == SECT_HILLS)){
ai.c:1938:			else if (!IS_NPC (ch) && (ch->in_room->sector_type == SECT_INSIDE)){
ai.c:1942:			else if (!IS_NPC (ch) && (ch->in_room->sector_type == SECT_DESERT)){
ai.c:1953:		else if ((!IS_NPC (ch) && !IS_SET (ch->act, PLR_BRIEF)) && (arg1[0] == '\0' || !str_cmp (arg1, "auto")))
ai.c:1956:			if (ch->plane == 0)
ai.c:1957:			send_to_char (ch->in_room->description, ch);
ai.c:1959:		if (!IS_NPC (ch) && IS_SET (ch->act, PLR_AUTOEXIT))
ai.c:1963:		/*	if (ch->in_room->blood == 100)
ai.c:1965:			else if (ch->in_room->blood > 75)
ai.c:1967:			else if (ch->in_room->blood > 50)
ai.c:1969:			else if (ch->in_room->blood > 25)
ai.c:1971:			else if (ch->in_room->blood > 10)
ai.c:1973:			else if (ch->in_room->blood > 5)
ai.c:1975:			else if (ch->in_room->blood > 2)
ai.c:1977:			else if (ch->in_room->blood > 0)
ai.c:1981:			if (ch->in_room->blood > 0)
ai.c:1985:		show_list_to_char (ch->in_room->contents, ch, FALSE, FALSE);
ai.c:1986:		show_char_to_char (ch->in_room->people, ch);
ai.c:2013:			location = ch->in_room;
ai.c:2028:			for (portal = ch->in_room->contents; portal != NULL; portal = portal_next)
ai.c:2036:						REMOVE_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:2038:						SET_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:2043:						SET_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:2045:						REMOVE_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:2113:		vch_next = vch->next;
ai.c:2114:		if (vch->in_room == NULL)
ai.c:2116:		if (vch->in_room == ch->in_room)
ai.c:2118:			if (!IS_NPC (vch) && !str_cmp (arg1, vch->morph))
ai.c:2127:	if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
ai.c:2138:	for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
ai.c:2140:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
ai.c:2180:	for (obj = ch->in_room->contents; obj != NULL; obj = obj->next_content)
ai.c:2182:		if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
ai.c:2209:	pdesc = get_extra_descr (arg1, ch->in_room->extra_descr);
ai.c:2235:	if ((pexit = ch->in_room->exit[door]) == NULL)
ai.c:2318:		if ((pexit = ch->in_room->exit[door]) != NULL && pexit->to_room != NULL)
ai.c:2376:		obj_score (ch, ch->pcdata->chobj);
ai.c:2383:		/*if (ch->desc->snoop_by != NULL)
ai.c:2441:      ch->name, ((ch->pcdata) ? ch->pcdata->title : "None"),
ai.c:2442:      strlen (ch->nature) < 2 ? "None" : ch->nature, strlen (ch->demeanor) < 2 ? "None" : ch->demeanor,         
ai.c:2443:      strlen (ch->order) < 2 ? "None" : ch->order, strlen (ch->impulse) < 2 ? "None" : ch->impulse,
ai.c:2445:      show_dot(ch->attributes[ATTRIB_STR]), show_dot(ch->attributes[ATTRIB_CHA]), show_dot(ch->attributes[ATTRIB_PER]),
ai.c:2446:      show_dot(ch->attributes[ATTRIB_DEX]), show_dot(ch->attributes[ATTRIB_MAN]), show_dot(ch->attributes[ATTRIB_INT]),
ai.c:2447:      show_dot(ch->attributes[ATTRIB_STA]), show_dot((!IS_NPC (ch) && !str_cmp (ch->clan, "Nosferatu")) ? 0 : ch->attributes[ATTRIB_APP]), show_dot(ch->attributes[ATTRIB_WIT]),
ai.c:2449:      show_dot(ch->abilities[TALENTS][TAL_ALERTNESS]),  show_dot(ch->abilities[SKILLS][SKI_ANIMALKEN]),  show_dot(ch->abilities[KNOWLEDGES][KNO_ACADEMICS]), 
ai.c:2450:      show_dot(ch->abilities[TALENTS][TAL_ATHLETICS]),  show_dot(ch->abilities[SKILLS][SKI_ARCHERY]),  show_dot(ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM]), 
ai.c:2451:      show_dot(ch->abilities[TALENTS][TAL_BRAWL]),  show_dot(ch->abilities[SKILLS][SKI_COMMERCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_INVESTIGATION]), 
ai.c:2452:      show_dot(ch->abilities[TALENTS][TAL_DODGE]),  show_dot(ch->abilities[SKILLS][SKI_CRAFTS]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LAW]), 
ai.c:2453:      show_dot(ch->abilities[TALENTS][TAL_EMPATHY]),  show_dot(ch->abilities[SKILLS][SKI_ETIQUETTE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LINGUISTICS]), 
ai.c:2454:      show_dot(ch->abilities[TALENTS][TAL_EXPRESSION]),  show_dot(ch->abilities[SKILLS][SKI_MELEE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_MEDICINE]), 
ai.c:2455:      show_dot(ch->abilities[TALENTS][TAL_INTIMIDATION]),  show_dot(ch->abilities[SKILLS][SKI_PERFORMANCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_OCCULT]), 
ai.c:2456:      show_dot(ch->abilities[TALENTS][TAL_LEADERSHIP]),  show_dot(ch->abilities[SKILLS][SKI_RIDE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_POLITICS]), 
ai.c:2457:      show_dot(ch->abilities[TALENTS][TAL_LEGERDEMAIN]),  show_dot(ch->abilities[SKILLS][SKI_STEALTH]),  show_dot(ch->abilities[KNOWLEDGES][KNO_SENESCHAL]), 
ai.c:2458:      show_dot(ch->abilities[TALENTS][TAL_SUBTERFUGE]),  show_dot(ch->abilities[SKILLS][SKI_SURVIVAL]),  show_dot(ch->abilities[KNOWLEDGES][KNO_THEOLOGY])
ai.c:2462:      if (ch->pcdata->powers[DISC_SOPHIA_PATRIS] > 0)
ai.c:2464:		sprintf (buf, "#w|                        #BSophia Patris#w_____%-8s#n                          #w|#n\n\r", show_dot(ch->pcdata->powers[DISC_SOPHIA_PATRIS]));
ai.c:2467:      if (ch->pcdata->powers[DISC_SEDULITAS_FILIUS] > 0)
ai.c:2469:		sprintf (buf, "#w|                        #BSedulitas Filius#w__%-8s#n                          #w|#n\n\r", show_dot(ch->pcdata->powers[DISC_SEDULITAS_FILIUS]));
ai.c:2472:      if (ch->pcdata->powers[DISC_BONI_SPIRITUS] > 0)
ai.c:2474:		sprintf (buf, "#w|                        #BBoni Spiritus#w_____%-8s#n                          #w|#n\n\r", show_dot(ch->pcdata->powers[DISC_BONI_SPIRITUS]));
ai.c:2497:      show_spot_5(ch->pcdata->virtues[VIRTUE_CONSCIENCE]), show_spot_5(ch->pcdata->virtues[VIRTUE_SELFCONTROL]), show_spot_5(ch->pcdata->virtues[VIRTUE_COURAGE]),
ai.c:2498:      show_spot_5(ch->pcdata->virtues[VIRTUE_FAITH]), show_spot_5(ch->pcdata->virtues[VIRTUE_WISDOM]), show_spot_5(ch->pcdata->virtues[VIRTUE_ZEAL]),
ai.c:2499:      (ch->pcdata->aggdamage + ch->pcdata->bashingdamage + ch->pcdata->lethaldamage),
ai.c:2500:      show_spot(ch->pcdata->willpower[WILLPOWER_MAX]), show_spot(ch->pcdata->roadt), 
ai.c:2501:      show_slash(ch->pcdata->willpower[WILLPOWER_CURRENT]), 
ai.c:2502:      ch->pcdata->aggdamage, ch->pcdata->lethaldamage, ch->pcdata->bashingdamage,
ai.c:2503:      show_slash(ch->pcdata->conviction[CONVICTION_CURRENT]),
ai.c:2505:      ch->exp, ch->pcdata->conviction_bank, ((get_age (ch) - 17) * 2)
ai.c:2552:      ch->name, ((ch->pcdata) ? ch->pcdata->title : "None"),
ai.c:2553:      strlen (ch->nature) < 2 ? "None" : ch->nature, strlen (ch->demeanor) < 2 ? "None" : ch->demeanor,
ai.c:2554:      show_dot(ch->attributes[ATTRIB_STR]), show_dot(ch->attributes[ATTRIB_CHA]), show_dot(ch->attributes[ATTRIB_PER]),
ai.c:2555:      show_dot(ch->attributes[ATTRIB_DEX]), show_dot(ch->attributes[ATTRIB_MAN]), show_dot(ch->attributes[ATTRIB_INT]),
ai.c:2556:      show_dot(ch->attributes[ATTRIB_STA]), show_dot((!IS_NPC (ch) && !str_cmp (ch->clan, "Nosferatu")) ? 0 : ch->attributes[ATTRIB_APP]), show_dot(ch->attributes[ATTRIB_WIT]),
ai.c:2558:      show_dot(ch->abilities[TALENTS][TAL_ALERTNESS]),  show_dot(ch->abilities[SKILLS][SKI_ANIMALKEN]),  show_dot(ch->abilities[KNOWLEDGES][KNO_ACADEMICS]), 
ai.c:2559:      show_dot(ch->abilities[TALENTS][TAL_ATHLETICS]),  show_dot(ch->abilities[SKILLS][SKI_ARCHERY]),  show_dot(ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM]), 
ai.c:2560:      show_dot(ch->abilities[TALENTS][TAL_BRAWL]),  show_dot(ch->abilities[SKILLS][SKI_COMMERCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_INVESTIGATION]), 
ai.c:2561:      show_dot(ch->abilities[TALENTS][TAL_DODGE]),  show_dot(ch->abilities[SKILLS][SKI_CRAFTS]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LAW]), 
ai.c:2562:      show_dot(ch->abilities[TALENTS][TAL_EMPATHY]),  show_dot(ch->abilities[SKILLS][SKI_ETIQUETTE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LINGUISTICS]), 
ai.c:2563:      show_dot(ch->abilities[TALENTS][TAL_EXPRESSION]),  show_dot(ch->abilities[SKILLS][SKI_MELEE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_MEDICINE]), 
ai.c:2564:      show_dot(ch->abilities[TALENTS][TAL_INTIMIDATION]),  show_dot(ch->abilities[SKILLS][SKI_PERFORMANCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_OCCULT]), 
ai.c:2565:      show_dot(ch->abilities[TALENTS][TAL_LEADERSHIP]),  show_dot(ch->abilities[SKILLS][SKI_RIDE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_POLITICS]), 
ai.c:2566:      show_dot(ch->abilities[TALENTS][TAL_LEGERDEMAIN]),  show_dot(ch->abilities[SKILLS][SKI_STEALTH]),  show_dot(ch->abilities[KNOWLEDGES][KNO_SENESCHAL]), 
ai.c:2567:      show_dot(ch->abilities[TALENTS][TAL_SUBTERFUGE]),  show_dot(ch->abilities[SKILLS][SKI_SURVIVAL]),  show_dot(ch->abilities[KNOWLEDGES][KNO_THEOLOGY]),
ai.c:2568:      show_spot_5(ch->pcdata->virtues[VIRTUE_CONSCIENCE]), show_spot_5(ch->pcdata->virtues[VIRTUE_SELFCONTROL]), show_spot_5(ch->pcdata->virtues[VIRTUE_COURAGE]),
ai.c:2569:      (ch->pcdata->aggdamage + ch->pcdata->bashingdamage + ch->pcdata->lethaldamage),
ai.c:2570:      show_spot(ch->pcdata->willpower[WILLPOWER_MAX]),show_spot(ch->pcdata->roadt), 
ai.c:2571:      show_slash(ch->pcdata->willpower[WILLPOWER_CURRENT]),
ai.c:2572:      ch->pcdata->aggdamage, ch->pcdata->lethaldamage, ch->pcdata->bashingdamage,
ai.c:2573:      show_spot_20(ch->blood[BLOOD_POOL]),
ai.c:2574:      show_slash_20(ch->blood[BLOOD_CURRENT]),
ai.c:2575:      ch->exp, ((get_age (ch) - 17) * 2)
ai.c:2614: ch->name, 
ai.c:2615:(ch->pcdata) ? ch->pcdata->title : "None",
ai.c:2616: strlen (ch->nature) < 2 ? "None" : ch->nature, strlen (ch->demeanor) < 2 ? "None" : ch->demeanor,
ai.c:2617: ch->clan, (ch->pcdata->road != -1) ? road_names[ch->pcdata->road][0] : 
ai.c:2618:"None", strlen (ch->side) < 2 ? "None" : ch->side, ch->vampgen,
ai.c:2619: show_dot(ch->attributes[ATTRIB_STR]), show_dot(ch->attributes[ATTRIB_CHA]), show_dot(ch->attributes[ATTRIB_PER]),
ai.c:2620: show_dot(ch->attributes[ATTRIB_DEX]), show_dot(ch->attributes[ATTRIB_MAN]), show_dot(ch->attributes[ATTRIB_INT]),
ai.c:2621: show_dot(ch->attributes[ATTRIB_STA]), show_dot((!IS_NPC (ch) && !str_cmp (ch->clan, "Nosferatu")) ? 0 : ch->attributes[ATTRIB_APP]), show_dot(ch->attributes[ATTRIB_WIT]),
ai.c:2623: show_dot(ch->abilities[TALENTS][TAL_ALERTNESS]),  show_dot(ch->abilities[SKILLS][SKI_ANIMALKEN]),  show_dot(ch->abilities[KNOWLEDGES][KNO_ACADEMICS]), 
ai.c:2624: show_dot(ch->abilities[TALENTS][TAL_ATHLETICS]),  show_dot(ch->abilities[SKILLS][SKI_ARCHERY]),  show_dot(ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM]), 
ai.c:2625: show_dot(ch->abilities[TALENTS][TAL_BRAWL]),  show_dot(ch->abilities[SKILLS][SKI_COMMERCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_INVESTIGATION]), 
ai.c:2626: show_dot(ch->abilities[TALENTS][TAL_DODGE]),  show_dot(ch->abilities[SKILLS][SKI_CRAFTS]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LAW]), 
ai.c:2627: show_dot(ch->abilities[TALENTS][TAL_EMPATHY]),  show_dot(ch->abilities[SKILLS][SKI_ETIQUETTE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LINGUISTICS]), 
ai.c:2628: show_dot(ch->abilities[TALENTS][TAL_EXPRESSION]),  show_dot(ch->abilities[SKILLS][SKI_MELEE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_MEDICINE]), 
ai.c:2629: show_dot(ch->abilities[TALENTS][TAL_INTIMIDATION]),  show_dot(ch->abilities[SKILLS][SKI_PERFORMANCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_OCCULT]), 
ai.c:2630: show_dot(ch->abilities[TALENTS][TAL_LEADERSHIP]),  show_dot(ch->abilities[SKILLS][SKI_RIDE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_POLITICS]), 
ai.c:2631: show_dot(ch->abilities[TALENTS][TAL_LEGERDEMAIN]),  show_dot(ch->abilities[SKILLS][SKI_STEALTH]),  show_dot(ch->abilities[KNOWLEDGES][KNO_SENESCHAL]), 
ai.c:2632: show_dot(ch->abilities[TALENTS][TAL_SUBTERFUGE]),  show_dot(ch->abilities[SKILLS][SKI_SURVIVAL]),  show_dot(ch->abilities[KNOWLEDGES][KNO_THEOLOGY]));
ai.c:2637:			if (ch->pcdata->powers[sn] == 0)
ai.c:2753:			if (ch->class == CLASS_VAMPIRE && (ch->pcdata->cland[0] == sn || ch->pcdata->cland[1] == sn || ch->pcdata->cland[2] == sn))
ai.c:2778:show_spot_5(ch->pcdata->virtues[VIRTUE_CONSCIENCE]), show_spot_5(ch->pcdata->virtues[VIRTUE_SELFCONTROL]), show_spot_5(ch->pcdata->virtues[VIRTUE_COURAGE]));
ai.c:2790:(ch->pcdata->aggdamage + ch->pcdata->bashingdamage + ch->pcdata->lethaldamage),
ai.c:2791:show_spot(ch->pcdata->willpower[WILLPOWER_MAX]), show_spot(ch->pcdata->roadt),
ai.c:2792:show_slash(ch->pcdata->willpower[WILLPOWER_CURRENT]),
ai.c:2793:ch->pcdata->aggdamage, ch->pcdata->lethaldamage, ch->pcdata->bashingdamage,
ai.c:2794:show_spot_20(ch->blood[BLOOD_POOL]),
ai.c:2795:show_slash_20(ch->blood[BLOOD_CURRENT]));
ai.c:2799:ch->exp, ((get_age (ch) - 17) * 2));
ai.c:2837: ch->name, (ch->pcdata) ? ch->pcdata->title : "None",
ai.c:2838: strlen (ch->nature) < 2 ? "None" : ch->nature, strlen (ch->demeanor) < 2 ? "None" : ch->demeanor,
ai.c:2839: ch->clan, strlen (ch->side) < 2 ? "None" : ch->side, ch->pcdata->rank,
ai.c:2840: show_dot(ch->attributes[ATTRIB_STR]), show_dot(ch->attributes[ATTRIB_CHA]), show_dot(ch->attributes[ATTRIB_PER]),
ai.c:2841: show_dot(ch->attributes[ATTRIB_DEX]), show_dot(ch->attributes[ATTRIB_MAN]), show_dot(ch->attributes[ATTRIB_INT]),
ai.c:2842: show_dot(ch->attributes[ATTRIB_STA]), show_dot(ch->attributes[ATTRIB_APP]), show_dot(ch->attributes[ATTRIB_WIT]),
ai.c:2844: show_dot(ch->abilities[TALENTS][TAL_ALERTNESS]),  show_dot(ch->abilities[SKILLS][SKI_ANIMALKEN]),  show_dot(ch->abilities[KNOWLEDGES][KNO_ACADEMICS]), 
ai.c:2845: show_dot(ch->abilities[TALENTS][TAL_ATHLETICS]),  show_dot(ch->abilities[SKILLS][SKI_ARCHERY]),  show_dot(ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM]), 
ai.c:2846: show_dot(ch->abilities[TALENTS][TAL_BRAWL]),  show_dot(ch->abilities[SKILLS][SKI_COMMERCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_INVESTIGATION]), 
ai.c:2847: show_dot(ch->abilities[TALENTS][TAL_DODGE]),  show_dot(ch->abilities[SKILLS][SKI_CRAFTS]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LAW]), 
ai.c:2848: show_dot(ch->abilities[TALENTS][TAL_EMPATHY]),  show_dot(ch->abilities[SKILLS][SKI_ETIQUETTE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_LINGUISTICS]), 
ai.c:2849: show_dot(ch->abilities[TALENTS][TAL_EXPRESSION]),  show_dot(ch->abilities[SKILLS][SKI_MELEE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_MEDICINE]), 
ai.c:2850: show_dot(ch->abilities[TALENTS][TAL_INTIMIDATION]),  show_dot(ch->abilities[SKILLS][SKI_PERFORMANCE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_OCCULT]), 
ai.c:2851: show_dot(ch->abilities[TALENTS][TAL_LEADERSHIP]),  show_dot(ch->abilities[SKILLS][SKI_RIDE]),  show_dot(ch->abilities[KNOWLEDGES][KNO_POLITICS]), 
ai.c:2852: show_dot(ch->abilities[TALENTS][TAL_LEGERDEMAIN]),  show_dot(ch->abilities[SKILLS][SKI_STEALTH]),  show_dot(ch->abilities[KNOWLEDGES][KNO_SENESCHAL]), 
ai.c:2853: show_dot(ch->abilities[TALENTS][TAL_SUBTERFUGE]),  show_dot(ch->abilities[SKILLS][SKI_SURVIVAL]),  show_dot(ch->abilities[KNOWLEDGES][KNO_THEOLOGY]));
ai.c:2870:(ch->pcdata->aggdamage + ch->pcdata->bashingdamage + ch->pcdata->lethaldamage),
ai.c:2871:show_spot(ch->pcdata->willpower[WILLPOWER_MAX]), show_slash(ch->pcdata->willpower[WILLPOWER_CURRENT]), 
ai.c:2872:ch->pcdata->aggdamage, ch->pcdata->lethaldamage, ch->pcdata->bashingdamage,
ai.c:2873:show_spot(ch->pcdata->rage[1]), show_spot(ch->pcdata->gnosis[1]), show_slash(ch->pcdata->rage[0]), 
ai.c:2874:show_slash(ch->pcdata->gnosis[0]), show_spot(ch->pcdata->renown[PERMGLORY]), show_spot(ch->pcdata->renown[PERMHONOR]), 
ai.c:2875:show_spot(ch->pcdata->renown[PERMWISDOM]), ch->pcdata->renown[TEMPGLORY], ch->pcdata->renown[TEMPHONOR], ch->pcdata->renown[TEMPWISDOM]);
ai.c:2882:ch->exp, ((get_age (ch) - 17) * 2));
ai.c:3100:if (!(extra =ch->pcdata->extra))
ai.c:3108:for (catagory = ch->pcdata->extra; catagory; catagory = catagory->prev)
ai.c:3463:		if ((wch->level < iLevelLower || wch->level > iLevelUpper) || (fImmortalOnly && wch->level < LEVEL_IMMORTAL) || (fClassRestrict && wch->level != LEVEL_HERO))
ai.c:3468:			if (!is_in (wch->name, arg2) && !is_in (wch->pcdata->title, arg2))
ai.c:3473:		char_level = wch->level;
ai.c:3480:		if (IS_SET (wch->extra2, EXTRA2_AFK))
ai.c:3482:		else if (IS_SET (wch->extra2, EXTRA2_DND))
ai.c:3486:			switch (wch->level)
ai.c:3491:				if (!str_cmp (wch->name, "Bosadar"))
ai.c:3498:				if (!str_cmp (wch->name, "Cone"))
ai.c:3500:				else if (!str_cmp (wch->name, "Artifice")){
ai.c:3502:			//		if (!str_cmp (ch->name, "Artifice"))
ai.c:3507:				else if (!str_cmp (wch->name,"Sareth"))
ai.c:3509:				else if (!str_cmp (wch->name,"Dahlia"))
ai.c:3511:				else if (!str_cmp (wch->name,"Orophin"))
ai.c:3517:				if (!str_cmp (wch->name,"ThorR"))
ai.c:3519:				else if (!str_cmp (wch->name,"Gremeth"))
ai.c:3521:				else if (!str_cmp (wch->name,"Dahlia"))
ai.c:3523:				else if (!str_cmp (wch->name,"Orophin"))
ai.c:3535:				if (!str_cmp (wch->name,"Dahlia"))
ai.c:3537:				else if (!str_cmp (wch->name,"Kyrel"))
ai.c:3539:				else if (!str_cmp (wch->name,"Pheonix"))
ai.c:3541:				else if (!str_cmp (wch->name,"Abaddon"))
ai.c:3543:				else if (!str_cmp (wch->name,"Jinx"))
ai.c:3554:				switch (wch->race)
ai.c:3605:			else if (IS_VAMPIRE (wch) && wch->vampgen == 1)
ai.c:3607:			else if (IS_WEREWOLF (wch) && wch->vampgen == 1)
ai.c:3614:				if (strlen (wch->clan) < 2)
ai.c:3616:				else if (wch->vampgen == 2)
ai.c:3617:					sprintf (kav, " %s#bAntediluvian of %s#n%s", openb, wch->clan, closeb);
ai.c:3619:					sprintf (kav, " %s#b%s Prince#n%s", openb, wch->clan, closeb);
ai.c:3624:					if (strlen (wch->clan) < 2)
ai.c:3627:						strcpy (clanname, wch->clan);
ai.c:3628:					switch (wch->vampgen)
ai.c:3656:				if (strlen (wch->clan) > 1)
ai.c:3658:					if (wch->vampgen == 2)
ai.c:3659:						sprintf (kav, " %s#c%s Chief#c%s", openb, wch->clan, closeb);
ai.c:3661:						sprintf (kav, " %s#c%s Shaman#c%s", openb, wch->clan, closeb);
ai.c:3663:						sprintf (kav, " %s#c%s#n%s", openb, wch->clan, closeb);
ai.c:3670:                                if (strlen (wch->clan) > 1)
ai.c:3672:                                        if (wch->vampgen == 2)
ai.c:3673:                                                sprintf (kav, " %s#C%s Chief#c%s", openb, wch->clan, closeb);
ai.c:3675:                                                sprintf (kav, " %s#C%s Shaman#c%s", openb, wch->clan, closeb);
ai.c:3677:                                                sprintf (kav, " %s#C%s#n%s", openb, wch->clan, closeb);
ai.c:3680:                                        sprintf (kav, " %s#C%s#n%s", openb, wch->clan, closeb);
ai.c:3684:				sprintf (kav, "  %s#B%s#n%s", openb, wch->clan, closeb);
ai.c:3688:		if (IS_SET (wch->extra2, EXTRA2_AFK))
ai.c:3691:		else if (!str_cmp (wch->name, "Marilena"))
ai.c:3693:		else if (!str_cmp (wch->name, "Medea"))
ai.c:3695:		else if (!str_cmp (wch->name, "Helena"))
ai.c:3697:		else if (!str_cmp (wch->name, "Arcturus"))
ai.c:3700:		else if (wch->sex == SEX_FEMALE)
ai.c:3702:		else if (wch->sex == SEX_MALE)
ai.c:3707:		if ((IS_SET (wch->act, PLR_INCOG)) && (IS_STORYTELLER(wch)))
ai.c:3711:		if (IS_SET (wch->act, PLR_WIZINVIS) && IS_STORYTELLER(wch))
ai.c:3715:		if (wch->desc->editor != ED_NONE)
ai.c:3726:		if (ch->level > 5)	//if character is an immortal
ai.c:3730:				sprintf (buf_imm + strlen (buf_imm), "%-11s  %s%s%s%s %s%s\n\r", class, wch->pcdata->title, kav, incog_info, invis_info, rpflag, builderflag);
ai.c:3734:				sprintf (buf_mor + strlen (buf_mor), " %s#b |#c %s %s%s %s\n\r", sex_text, wch->name, wch->pcdata->title, kav, rpflag);
ai.c:3741:				sprintf (buf_imm + strlen (buf_imm), "%-11s  %s%s%s %s\n\r", class, wch->pcdata->title, incog_info, invis_info, rpflag);
ai.c:3745:				sprintf (buf_mor + strlen (buf_mor), " %s#b |#c %s %s %s\n\r", sex_text, wch->name, wch->pcdata->title, rpflag);
ai.c:3781:		if (!IS_NPC (ch) && (obj = ch->pcdata->chobj) == NULL)
ai.c:3794:			location = ch->in_room;
ai.c:3804:			for (portal = ch->in_room->contents; portal != NULL; portal = portal_next)
ai.c:3812:						REMOVE_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:3814:						SET_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:3819:						SET_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:3821:						REMOVE_BIT (ch->affected_by, AFF_SHADOWPLANE);
ai.c:3868:	show_list_to_char (ch->carrying, ch, TRUE, TRUE);
ai.c:3931:	free_string (ch->pcdata->title);
ai.c:3932:	ch->pcdata->title = str_dup (buf);
ai.c:3949:	if (IS_IMMORTAL(ch) && (!strstr(argument, ch->name)))
ai.c:3986:	free_string (ch->pcdata->email);
ai.c:3987:	ch->pcdata->email = str_dup (argument);
ai.c:3998:		string_edit (ch, &ch->description);
ai.c:4002:		string_append (ch, &ch->description);
ai.c:4007:		send_to_char (ch->description ? ch->description : "(None).\n\r", ch);
ai.c:4029:	for (i = 1, p = ch->description, bp = buf; *p != 0 && i < start; p++)
ai.c:4082:	free_string (ch->description);
ai.c:4083:	ch->description = str_dup (buf);
ai.c:4144:		ch->pcdata->show_social = TRUE;
ai.c:4150:		ch->pcdata->show_social = FALSE;
ai.c:4169:                sprintf(buf, "#cYour auras are currently: %s\n\r", ch->pcdata->aura);
ai.c:4176:                free_string (ch->pcdata->aura);
ai.c:4177:                ch->pcdata->aura = NULL;
ai.c:4188:		ch->pcdata->aura = str_dup (argument);
ai.c:4204:                sprintf(buf, "#cYour voice is currently: %s\n\r", ch->pcdata->voice);
ai.c:4211:                free_string (ch->pcdata->voice);
ai.c:4212:                ch->pcdata->voice = NULL;
ai.c:4223:		ch->pcdata->voice = str_dup (argument);
ai.c:4240:                sprintf(buf, "#cYour room description is currently: %s\n\r", ch->pcdata->roomdesc);
ai.c:4247:                free_string (ch->pcdata->roomdesc);
ai.c:4248:                ch->pcdata->roomdesc = NULL;
ai.c:4259:		ch->pcdata->roomdesc = str_dup (argument);
ai.c:4276:		sprintf(buf, "#cYour doing is currently: %s\n\r", ch->pcdata->doing);
ai.c:4283:                free_string (ch->pcdata->doing);
ai.c:4284:                ch->pcdata->doing = NULL;
ai.c:4289:		ch->pcdata->doing = str_dup (argument);
ai.c:4332:		if (!IS_NPC (ch) && IS_SET (ch->act, PLR_SILENCE))
ai.c:4341:		send_to_char (!IS_SET (ch->deaf, CHANNEL_OOC) ? "#s +OOC" : "#s -ooc", ch);
ai.c:4344:			send_to_char (!IS_SET (ch->deaf, CHANNEL_HOWL) ? "#s +HOWL" : "#s -howl", ch);
ai.c:4347:		send_to_char (!IS_SET (ch->deaf, CHANNEL_OMOTE) ? "#s +OMOTE" : "#s -omote", ch);		
ai.c:4349:		send_to_char (!IS_SET (ch->deaf, CHANNEL_OSAY) ? "#s +OSAY" : "#s -osay", ch);
ai.c:4351:		send_to_char (!IS_SET (ch->deaf, CHANNEL_TELL) ? "#s +TELL" : "#s -tell", ch);
ai.c:4353:		send_to_char (!IS_SET (ch->deaf, CHANNEL_INFO) ? "#s +INFO" : "#s -info", ch);
ai.c:4357:			send_to_char (!IS_SET (ch->deaf, CHANNEL_STORYINFORM) ? "#w +STORYINFORM" : "#w -storyinform", ch);
ai.c:4362:			send_to_char (!IS_SET (ch->deaf, CHANNEL_STORY) ? "#B +STORY" : "#B -story", ch);
ai.c:4367:			send_to_char (!IS_SET (ch->deaf, CHANNEL_IMMTALK) ? "#P +IMMTALK" : "#P -immtalk", ch);
ai.c:4372:			send_to_char (!IS_SET (ch->deaf, CHANNEL_LOG) ? "#G +LOG" : "#G -log", ch);
ai.c:4382:			send_to_char (!IS_SET (ch->deaf, CHANNEL_LOG_STORYTELLER) ? " +LOG_STORYTELLER" : " -log_storyteller", ch);
ai.c:4383:			if (ch->level >= LEVEL_BUILDER )
ai.c:4385:				send_to_char (!IS_SET (ch->deaf, CHANNEL_LOG_DICE) ? " +LOG_DICE" : " -log_dice", ch);
ai.c:4386:				send_to_char (!IS_SET (ch->deaf, CHANNEL_LOG_NORMAL) ? " +LOG_NORMAL" : " -log_normal", ch);
ai.c:4387:				send_to_char (!IS_SET (ch->deaf, CHANNEL_LOG_CODER) ? " +LOG_CODER" : " -log_coder", ch);
ai.c:4388:				send_to_char (!IS_SET (ch->deaf, CHANNEL_LOG_CONNECT) ? " +LOG_CONNECT" : " -log_connect", ch);
ai.c:4389:				send_to_char (!IS_SET (ch->deaf, CHANNEL_LOG_PLAYER) ? " +LOG_PLAYER" : " -log_player", ch);
ai.c:4416:		   SET_BIT(ch->act, PLR_NOTRANS);
ai.c:4422:		   REMOVE_BIT(ch->act, PLR_NOTRANS);
ai.c:4452:		else if ((IS_SET (ch->act, PLR_CHAMPION) || IS_STORYTELLER (ch)) && !str_cmp (arg + 1, "pray"))
ai.c:4462:				REMOVE_BIT (ch->deaf, CHANNEL_OOC);
ai.c:4463:				REMOVE_BIT (ch->deaf, CHANNEL_OSAY);
ai.c:4464:				REMOVE_BIT (ch->deaf, CHANNEL_INFO);
ai.c:4465:				REMOVE_BIT (ch->deaf, CHANNEL_TELL);
ai.c:4467:					REMOVE_BIT (ch->deaf, CHANNEL_HOWL);
ai.c:4470:					REMOVE_BIT (ch->deaf, CHANNEL_STORYINFORM);
ai.c:4471:					REMOVE_BIT (ch->deaf, CHANNEL_IMMTALK);
ai.c:4475:					REMOVE_BIT (ch->deaf, CHANNEL_LOG_DICE);
ai.c:4476:					REMOVE_BIT (ch->deaf, CHANNEL_STORY);
ai.c:4477:					REMOVE_BIT (ch->deaf, CHANNEL_LOG_STORYTELLER);
ai.c:4481:					REMOVE_BIT (ch->deaf, CHANNEL_LOG);
ai.c:4482:					REMOVE_BIT (ch->deaf, CHANNEL_LOG_NORMAL);
ai.c:4483:					REMOVE_BIT (ch->deaf, CHANNEL_LOG_CODER);
ai.c:4484:					REMOVE_BIT (ch->deaf, CHANNEL_LOG_CONNECT);
ai.c:4485:					REMOVE_BIT (ch->deaf, CHANNEL_LOG_PLAYER);
ai.c:4490:				SET_BIT (ch->deaf, CHANNEL_OOC);
ai.c:4491:				SET_BIT (ch->deaf, CHANNEL_OSAY);
ai.c:4492:				SET_BIT (ch->deaf, CHANNEL_INFO);
ai.c:4493:				SET_BIT (ch->deaf, CHANNEL_TELL);
ai.c:4495:					SET_BIT (ch->deaf, CHANNEL_HOWL);
ai.c:4498:					SET_BIT (ch->deaf, CHANNEL_STORYINFORM);
ai.c:4499:					SET_BIT (ch->deaf, CHANNEL_IMMTALK);
ai.c:4503:					SET_BIT (ch->deaf, CHANNEL_STORY);
ai.c:4504:					SET_BIT (ch->deaf, CHANNEL_LOG_STORYTELLER);
ai.c:4508:					SET_BIT (ch->deaf, CHANNEL_LOG_DICE);
ai.c:4512:					SET_BIT (ch->deaf, CHANNEL_LOG);
ai.c:4513:					SET_BIT (ch->deaf, CHANNEL_LOG_NORMAL);
ai.c:4514:					SET_BIT (ch->deaf, CHANNEL_LOG_CODER);
ai.c:4515:					SET_BIT (ch->deaf, CHANNEL_LOG_CONNECT);
ai.c:4516:					SET_BIT (ch->deaf, CHANNEL_LOG_PLAYER);
ai.c:4530:			REMOVE_BIT (ch->deaf, bit);
ai.c:4532:			SET_BIT (ch->deaf, bit);
ai.c:4558:		send_to_char (IS_SET (ch->act, PLR_ANSI) ? "[+ANSI     ] You have ansi colour on.\n\r" : "[-ansi     ] You have ansi colour off.\n\r", ch);
ai.c:4560:		send_to_char (IS_SET (ch->act, PLR_AUTOEXIT) ? "[+AUTOEXIT ] You automatically see exits.\n\r" : "[-autoexit ] You don't automatically see exits.\n\r", ch);
ai.c:4562:		send_to_char (IS_SET (ch->act, PLR_BLANK) ? "[+BLANK    ] You have a blank line before your prompt.\n\r" : "[-blank    ] You have no blank line before your prompt.\n\r", ch);
ai.c:4564:		send_to_char (IS_SET (ch->act, PLR_BRIEF) ? "[+BRIEF    ] You see brief descriptions.\n\r" : "[-brief    ] You see long descriptions.\n\r", ch);
ai.c:4566:		send_to_char (IS_SET (ch->act, PLR_COMBINE) ? "[+COMBINE  ] You see object lists in combined format.\n\r" : "[-combine  ] You see object lists in single format.\n\r", ch);
ai.c:4568:		send_to_char (IS_SET (ch->act, PLR_PROMPT) ? "[+PROMPT   ] You have a prompt.\n\r" : "[-prompt   ] You don't have a prompt.\n\r", ch);
ai.c:4570:		send_to_char (IS_SET (ch->act, PLR_TELNET_GA) ? "[+TELNETGA ] You receive a telnet GA sequence.\n\r" : "[-telnetga ] You don't receive a telnet GA sequence.\n\r", ch);
ai.c:4572:		send_to_char (IS_SET (ch->act, PLR_SILENCE) ? "[+SILENCE  ] You are silenced.\n\r" : "", ch);
ai.c:4574:		send_to_char (!IS_SET (ch->act, PLR_NO_EMOTE) ? "" : "[-emote    ] You can't emote.\n\r", ch);
ai.c:4576:		send_to_char (!IS_SET (ch->act, PLR_NO_TELL) ? "" : "[-tell     ] You can't use 'tell'.\n\r", ch);
ai.c:4578:		send_to_char (IS_SET (ch->act, PLR_EXTRAS) ? "[+EXTRA    ] You see extra fields under score.\n\r" : "[-extra    ] You can't see extra fields.\n\r", ch);
ai.c:4619:			SET_BIT (ch->act, bit);
ai.c:4621:			REMOVE_BIT (ch->act, bit);
ai.c:4633:	if (IS_SET (ch->act, PLR_ANSI))
ai.c:4644:	if (IS_SET (ch->act, PLR_AUTOEXIT))
ai.c:4657:	if (IS_SET (ch->act, PLR_BLANK))
ai.c:4669:	if (IS_SET (ch->act, PLR_BRIEF))
ai.c:4969:			SET_BIT (ch->extra, EXTRA_PROMPT);
ai.c:4980:			REMOVE_BIT (ch->extra, EXTRA_PROMPT);
ai.c:4986:		free_string (ch->prompt);
ai.c:4987:		ch->prompt = str_dup ("");
ai.c:4998:	free_string (ch->prompt);
ai.c:4999:	ch->prompt = str_dup (buf);
ai.c:5021:		free_string (ch->cprompt);
ai.c:5022:		ch->cprompt = str_dup ("");
ai.c:5033:	free_string (ch->cprompt);
ai.c:5034:	ch->cprompt = str_dup (buf);
ai.c:5061:	if (number_percent () <= ch->pcdata->learned[gsn_peek])
ai.c:5084:	if (IS_SET (ch->extra2, EXTRA2_AFK))
ai.c:5087:		sprintf (buf, "#C%s#e is no longer AFK.#n\n\r", ch->name);
ai.c:5089:		REMOVE_BIT (ch->extra2, EXTRA2_AFK);
ai.c:5095:	if (!IS_SET (ch->extra2, EXTRA2_AFK))
ai.c:5098:		sprintf (buf, "#C%s#e is now AFK.", ch->name);
ai.c:5100:		SET_BIT (ch->extra2, EXTRA2_AFK);
ai.c:5126:	if (ch->pcdata->road != -1)
ai.c:5128:		sprintf (buf, "You follow the road of %s.\n\r", road_names[ch->pcdata->road][0]);
ai.c:5164:		if (!str_cmp (ch->clan, "toreador"))
ai.c:5172:	if (road == ROAD_BLOOD && !str_cmp (ch->clan, "Assamite"))
ai.c:5182:	if (road == ROAD_BONES && ( !str_cmp (ch->clan, "Cappadocian") ||
ai.c:5183:		!str_cmp (ch->clan, "Tzimisce") ) )
ai.c:5196:	if (road == ROAD_METAMORPHOSIS && ( !str_cmp (ch->clan, "Tzimisce") ) )
ai.c:5217:		if (!str_cmp (ch->clan, "salubri"))
ai.c:5226:		if (!str_cmp (ch->clan, "baali"))
ai.c:5235:		if (!str_cmp (ch->clan, "baali"))
ai.c:5242:	if (road == ROAD_PARADOX && !str_cmp (ch->clan, "Ravnos"))
ai.c:5258:	ch->pcdata->road = road;
ai.c:5259:	ch->pcdata->roadt = 1;
ai.c:5278:		string_edit (ch, &ch->pcdata->lupusdesc);
ai.c:5280:		string_append (ch, &ch->pcdata->lupusdesc);
ai.c:5284:		send_to_char (ch->pcdata->lupusdesc ? ch->pcdata->lupusdesc : "(None).\n\r", ch);
ai.c:5304:		ch->pcdata->showtempdesc = TRUE;
ai.c:5309:		ch->pcdata->showtempdesc = FALSE;
ai.c:5312:		string_edit (ch, &ch->pcdata->tempdesc);
ai.c:5314:		string_append (ch, &ch->pcdata->tempdesc);
ai.c:5318:		send_to_char (ch->pcdata->tempdesc ? ch->pcdata->tempdesc : "(None).\n\r", ch);
ai.c:5343:		string_edit (ch, &ch->pcdata->crinosdesc);
ai.c:5345:		string_append (ch, &ch->pcdata->crinosdesc);
ai.c:5349:		send_to_char (ch->pcdata->crinosdesc ? ch->pcdata->crinosdesc : "(None).\n\r", ch);
ai.c:5374:		string_edit (ch, &ch->pcdata->hispodesc);
ai.c:5376:		string_append (ch, &ch->pcdata->hispodesc);
ai.c:5380:		send_to_char (ch->pcdata->hispodesc ? ch->pcdata->hispodesc : "(None).\n\r", ch);
ai.c:5406:		string_edit (ch, &ch->pcdata->glabrodesc);
ai.c:5408:		string_append (ch, &ch->pcdata->glabrodesc);
ai.c:5412:		send_to_char (ch->pcdata->glabrodesc ? ch->pcdata->glabrodesc : "(None).\n\r", ch);
ai.c:5452:	ch->pcdata->vision = i;
ai.c:5463:	if (IS_SET (ch->act, PLR_ROOMFLAGS))
ai.c:5465:		REMOVE_BIT (ch->act, PLR_ROOMFLAGS);
ai.c:5470:		SET_BIT (ch->act, PLR_ROOMFLAGS);
ai.c:5489:		REMOVE_BIT (ch->more2, MORE2_RPFLAG);
ai.c:5491:			sprintf (buf, "#C%s#c no longer In Character.#n\n\r", ch->morph);
ai.c:5493:			sprintf (buf, "#C%s#c no longer In Character.#n\n\r", ch->name);
ai.c:5498:	SET_BIT (ch->more2, MORE2_RPFLAG);
ai.c:5500:		sprintf (buf, "#C%s#c is now In Character.#n\n\r", ch->morph);
ai.c:5502:		sprintf (buf, "#C%s#c is now In Character.#n\n\r", ch->name);
ai.c:5529:		if (!IS_NPC (victim) && ( ch->trust < victim->trust ) )
ai.c:5575:		REMOVE_BIT (ch->more2, MORE2_RPVIS);
ai.c:5579:	SET_BIT (ch->more2, MORE2_RPVIS);
ai.c:5686:	if (ch->pcdata->powers[DISC_OBFUSCATE] < 1)
ai.c:5695:		REMOVE_BIT (ch->more3, MORE3_OBFUS1);
ai.c:5701:	SET_BIT (ch->more3, MORE3_OBFUS1);
ai.c:5720:	if (ch->pcdata->powers[DISC_OBFUSCATE] < 2)
ai.c:5729:		REMOVE_BIT (ch->more3, MORE3_OBFUS2);
ai.c:5735:	SET_BIT (ch->more3, MORE3_OBFUS2);
ai.c:5759:	if (ch->pcdata->powers[DISC_VICISSITUDE] < 4)
ai.c:5765:	SET_BIT (ch->more3, MORE3_VICISSITUDE4);
ai.c:5774:	if (ch->pcdata->willpower[WILLPOWER_CURRENT] > 1){
ai.c:5778:			ch->pcdata->willpower[WILLPOWER_CURRENT] -= 1;	
am.c:83:	int getroom = ch->room;
am.c:92:	if (ch->embraced != ARE_NONE)
am.c:98:	in_room = ch->in_room;
am.c:105:	if (IS_SET (ch->extra2, EXTRA2_JUSTDIED))
am.c:107:		REMOVE_BIT (ch->extra2, EXTRA2_JUSTDIED);
am.c:125:		int ch_hp = ch->hit;
am.c:133:		if (ch == NULL || ch->position == POS_DEAD)
am.c:135:		if (ch->hit < ch_hp)
am.c:140:				SET_BIT (ch->affected_by, AFF_FLAMING);
am.c:183:		else if (!IS_NPC (ch) && IS_WEREWOLF (ch) && ch->pcdata->disc[TOTEM_BOAR] > 0)
am.c:196:	if (IS_AFFECTED (ch, AFF_CHARM) && ch->master != NULL && in_room == ch->master->in_room)
am.c:202:	if (IS_NPC (ch) && (mount = ch->mount) != NULL && IS_SET (ch->mounted, IS_MOUNT))
am.c:219:			if (!IS_AFFECTED (ch, AFF_FLYING) && ((!IS_NPC (ch) && !IS_VAMPAFF (ch, VAM_FLYING)) && !IS_NPC (ch) && (!IS_NPC (ch))) && !((mount = ch->mount) != NULL && IS_SET (ch->mounted, IS_RIDING) && IS_AFFECTED (mount, AFF_FLYING)))
am.c:254:			else if (ch->abilities[TALENTS][TAL_ATHLETICS] > 1)
am.c:256:			else if ((mount = ch->mount) != NULL && IS_SET (ch->mounted, IS_RIDING) && IS_AFFECTED (mount, AFF_FLYING))
am.c:260:				for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
am.c:307:		if (IS_SET (ch->mounted, IS_RIDING) && ch->move < move)
am.c:314:		if (!IS_SET (ch->mounted, IS_RIDING))
am.c:315:			ch->move -= move;
am.c:319:	if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
am.c:329:	if (IS_NPC (ch) && ch->pIndexData->vnum == MOB_VNUM_EYE)
am.c:331:	else if (!IS_NPC (ch) && IS_EXTRA (ch, EXTRA_OSWITCH) && ch->pcdata->obj_vnum == OBJ_VNUM_SPILT_BLOOD)
am.c:339:	else if (IS_SET (ch->polyaff, POLY_SERPENT))
am.c:341:	else if (IS_SET (ch->polyaff, POLY_WOLF))
am.c:343:	else if (IS_SET (ch->polyaff, POLY_FROG))
am.c:345:	else if (IS_SET (ch->polyaff, POLY_FISH))
am.c:359:		if (ch->in_room == NULL || victim->in_room == NULL)
am.c:362:		if (ch == victim || ch->in_room != victim->in_room)
am.c:368:		if (!IS_NPC (ch) && IS_AFFECTED (ch, AFF_POLYMORPH) && !IS_AFFECTED (ch, AFF_SNEAK) && !IS_VAMPAFF (ch, VAM_EARTHMELDED) && (IS_NPC (ch) || !IS_SET (ch->act, PLR_WIZINVIS)) && can_see (victim, ch))
am.c:370:			if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED (mount, AFF_FLYING)) || IS_AFFECTED (ch, AFF_FLYING) || (!IS_NPC (ch) && IS_VAMPAFF (ch, VAM_FLYING)))
am.c:371:				sprintf (poly, "%s flies $T%s", ch->morph, mount2);
am.c:372:			else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
am.c:373:				sprintf (poly, "%s rides $T%s", ch->morph, mount2);
am.c:375:				sprintf (poly, "%s %s $T%s", ch->morph, leave, mount2);
am.c:378:		else if (!IS_VAMPAFF (ch, VAM_EARTHMELDED) && !IS_AFFECTED (ch, AFF_SNEAK) && !IS_MORE3(ch, MORE3_OBFUS2) && (IS_NPC (ch) || !IS_SET (ch->act, PLR_WIZINVIS)) && can_see (victim, ch))
am.c:380:			if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED (mount, AFF_FLYING)) || IS_AFFECTED (ch, AFF_FLYING) || (!IS_NPC (ch) && IS_VAMPAFF (ch, VAM_FLYING)))
am.c:382:			else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
am.c:390:	ch->room = getroom;
am.c:433:		if (ch->in_room == NULL || victim->in_room == NULL)
am.c:436:		if (ch == victim || ch->in_room != victim->in_room)
am.c:442:		if (!IS_NPC (ch) && !IS_AFFECTED (ch, AFF_SNEAK) && IS_AFFECTED (ch, AFF_POLYMORPH) && !IS_VAMPAFF (ch, VAM_EARTHMELDED) && (IS_NPC (ch) || !IS_SET (ch->act, PLR_WIZINVIS)) && can_see (victim, ch))
am.c:444:			if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED (mount, AFF_FLYING)) || IS_AFFECTED (ch, AFF_FLYING) || (!IS_NPC (ch) && IS_VAMPAFF (ch, VAM_FLYING)))
am.c:445:				sprintf (poly, "%s flies in from %s%s", ch->morph, buf, mount2);
am.c:446:			else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
am.c:447:				sprintf (poly, "%s rides in from %s%s", ch->morph, buf, mount2);
am.c:449:				sprintf (poly, "%s %s in from %s%s", ch->morph, leave, buf, mount2);
am.c:452:		else if (!IS_AFFECTED (ch, AFF_SNEAK) && can_see (victim, ch) && !IS_MORE3(ch, MORE3_OBFUS2) && !IS_VAMPAFF (ch, VAM_EARTHMELDED) && (IS_NPC (ch) || !IS_SET (ch->act, PLR_WIZINVIS)))
am.c:454:			if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED (mount, AFF_FLYING)) || IS_AFFECTED (ch, AFF_FLYING) || (!IS_NPC (ch) && IS_VAMPAFF (ch, VAM_FLYING)))
am.c:457:			else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
am.c:468:		fch_next = fch->next_in_room;
am.c:469:		if ((mount = fch->mount) != NULL && mount == ch && IS_SET (fch->mounted, IS_MOUNT))
am.c:473:			char_to_room (fch, ch->in_room);
am.c:476:		if (fch->master == ch && fch->position == POS_STANDING && fch->in_room != ch->in_room && !IS_VAMPAFF (fch, VAM_EARTHMELDED) && !IS_EXTRA (fch, EXTRA_OSWITCH))
am.c:511:	in_room = ch->in_room;
am.c:538:	in_room = ch->in_room;
am.c:565:	in_room = ch->in_room;
am.c:592:	in_room = ch->in_room;
am.c:619:	in_room = ch->in_room;
am.c:646:	in_room = ch->in_room;
am.c:675:			if ((pexit = ch->in_room->exit[door]) != NULL && IS_SET (pexit->exit_info, EX_ISDOOR) && pexit->keyword != NULL && is_name (arg, pexit->keyword))
am.c:682:	if ((pexit = ch->in_room->exit[door]) == NULL)
am.c:723:	obj = get_obj_list (ch, arg, ch->in_room->contents);
am.c:753:	location = ch->in_room;
am.c:763:		sprintf (poly, "%s steps into $p.", ch->morph);
am.c:770:		sprintf (poly, "%s steps out of $p.", ch->morph);
am.c:790:	for (portal = ch->in_room->contents; portal != NULL; portal = portal_next)
am.c:798:				REMOVE_BIT (ch->affected_by, AFF_SHADOWPLANE);
am.c:803:				SET_BIT (ch->affected_by, AFF_SHADOWPLANE);
am.c:819:	if ((mount = ch->mount) == NULL)
am.c:822:	char_to_room (mount, ch->in_room);
am.c:882:		pexit = ch->in_room->exit[door];
am.c:899:		if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != NULL && pexit_rev->to_room == ch->in_room)
am.c:904:			for (rch = to_room->people; rch != NULL; rch = rch->next_in_room)
am.c:966:		pexit = ch->in_room->exit[door];
am.c:978:		if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != 0 && pexit_rev->to_room == ch->in_room)
am.c:983:			for (rch = to_room->people; rch != NULL; rch = rch->next_in_room)
am.c:1290:	for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
am.c:1357:		pexit = ch->in_room->exit[door];
am.c:1384:		if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != 0 && pexit_rev->to_room == ch->in_room)
am.c:1451:		pexit = ch->in_room->exit[door];
am.c:1478:		if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != NULL && pexit_rev->to_room == ch->in_room)
am.c:1545:    in_room = ch->in_room;
am.c:1564:       if (vch->position < POS_SITTING)
am.c:1566:       vch_next = vch->next_in_room;
am.c:1577:	switch (ch->position)
am.c:1594:		ch->position = POS_STANDING;
am.c:1601:		ch->position = POS_STANDING;
am.c:1609:		ch->position = POS_STANDING;
am.c:1621:	if (ch->sat != NULL && !CAN_SIT (ch))
am.c:1623:		act ("You get off $p.", ch, ch->sat, NULL, TO_CHAR);
am.c:1624:		act ("$n gets off $p.", ch, ch->sat, NULL, TO_ROOM);
am.c:1625:		ch->sat->sat = NULL;
am.c:1626:		ch->sat = NULL;
am.c:1635:	switch (ch->position)
am.c:1650:		ch->position = POS_RESTING;
am.c:1670:	switch (ch->position)
am.c:1679:		ch->position = POS_SITTING;
am.c:1695:			ch->position = POS_SITTING;
am.c:1722:	if (ch->sat != NULL)
am.c:1732:	ch->sat = obj;
am.c:1734:	ch->position = POS_SITTING;
am.c:1824:	if (ch->class == CLASS_VAMPIRE)
am.c:1827:	if (ch->class == CLASS_VAMPIRE)
am.c:1829:		switch (ch->vampgen)
am.c:1862:		cost = (ch->pcdata->willpower[WILLPOWER_MAX]) * 100;
am.c:1863:		pAbility = &ch->pcdata->willpower[WILLPOWER_MAX];
am.c:1869:		cost = (ch->pcdata->virtues[VIRTUE_CONSCIENCE]) * 2;
am.c:1870:		pAbility = &ch->pcdata->virtues[VIRTUE_CONSCIENCE];
am.c:1876:		cost = (ch->pcdata->virtues[VIRTUE_FAITH]) * 2;
am.c:1877:		pAbility = &ch->pcdata->virtues[VIRTUE_FAITH];
am.c:1883:		cost = (ch->pcdata->virtues[VIRTUE_WISDOM]) * 2;
am.c:1884:		pAbility = &ch->pcdata->virtues[VIRTUE_WISDOM];
am.c:1890:		cost = (ch->pcdata->virtues[VIRTUE_ZEAL]) * 2;
am.c:1891:		pAbility = &ch->pcdata->virtues[VIRTUE_ZEAL];
am.c:1897:                cost = (ch->pcdata->virtues[VIRTUE_SELFCONTROL]) * 2;
am.c:1898:                pAbility = &ch->pcdata->virtues[VIRTUE_SELFCONTROL];
am.c:1904:		 cost = (ch->pcdata->virtues[VIRTUE_COURAGE]) * 2;
am.c:1905:		 pAbility = &ch->pcdata->virtues[VIRTUE_COURAGE];
am.c:1911:		cost = (ch->pcdata->roadt) * 2;
am.c:1912:		pAbility = &ch->pcdata->roadt;
am.c:1919:		if (ch->pcdata->rage[1] >= 10)
am.c:1924:		cost = ch->pcdata->rage[1];
am.c:1925:		if (cost > ch->exp || ch->exp < 1)
am.c:1931:		ch->exp -= (cost < 1 ? 1 : cost);
am.c:1932:		ch->pcdata->rage[0] += 1;
am.c:1933:		ch->pcdata->rage[1] += 1;
am.c:1940:		if (ch->pcdata->gnosis[1] >= 10 || ch->pcdata->gnosis[0] >= 10)
am.c:1946:		cost = ch->pcdata->gnosis[1] * 2;
am.c:1948:		if (cost > ch->exp || ch->exp < 1)
am.c:1954:		ch->exp -= (cost < 1 ? 1 : cost);
am.c:1955:		ch->pcdata->gnosis[0] += 1;
am.c:1956:		ch->pcdata->gnosis[1] += 1;
am.c:1963:		cost = (ch->attributes[ATTRIB_STR]) * 4;
am.c:1964:		pAbility = &ch->attributes[ATTRIB_STR];
am.c:1970:		cost = (ch->attributes[ATTRIB_DEX]) * 4;
am.c:1971:		pAbility = &ch->attributes[ATTRIB_DEX];
am.c:1977:		cost = (ch->attributes[ATTRIB_STA]) * 4;
am.c:1978:		pAbility = &ch->attributes[ATTRIB_STA];
am.c:1984:		cost = (ch->attributes[ATTRIB_CHA]) * 4;
am.c:1985:		pAbility = &ch->attributes[ATTRIB_CHA];
am.c:1991:		cost = (ch->attributes[ATTRIB_MAN]) * 4;
am.c:1992:		pAbility = &ch->attributes[ATTRIB_MAN];
am.c:1998:		cost = (ch->attributes[ATTRIB_PER]) * 4;
am.c:1999:		pAbility = &ch->attributes[ATTRIB_PER];
am.c:2005:		cost = (ch->attributes[ATTRIB_INT]) * 4;
am.c:2006:		pAbility = &ch->attributes[ATTRIB_INT];
am.c:2012:		cost = (ch->attributes[ATTRIB_WIT]) * 4;
am.c:2013:		pAbility = &ch->attributes[ATTRIB_WIT];
am.c:2019:		if (ch->abilities[TALENTS][TAL_EXPRESSION] == 0)
am.c:2022:			cost = (ch->abilities[TALENTS][TAL_EXPRESSION]) * 2;
am.c:2023:		pAbility = &ch->abilities[TALENTS][TAL_EXPRESSION];
am.c:2029:		if (ch->abilities[TALENTS][TAL_ALERTNESS] == 0)
am.c:2032:			cost = (ch->abilities[TALENTS][TAL_ALERTNESS]) * 2;
am.c:2033:		pAbility = &ch->abilities[TALENTS][TAL_ALERTNESS];
am.c:2039:		if (ch->abilities[TALENTS][TAL_ATHLETICS] == 0)
am.c:2042:			cost = (ch->abilities[TALENTS][TAL_ATHLETICS]) * 2;
am.c:2043:		pAbility = &ch->abilities[TALENTS][TAL_ATHLETICS];
am.c:2049:		if (ch->abilities[TALENTS][TAL_BRAWL] == 0)
am.c:2052:			cost = (ch->abilities[TALENTS][TAL_BRAWL]) * 2;
am.c:2053:		pAbility = &ch->abilities[TALENTS][TAL_BRAWL];
am.c:2059:		if (ch->abilities[TALENTS][TAL_DODGE] == 0)
am.c:2062:			cost = (ch->abilities[TALENTS][TAL_DODGE]) * 2;
am.c:2063:		pAbility = &ch->abilities[TALENTS][TAL_DODGE];
am.c:2069:		if (ch->abilities[TALENTS][TAL_EMPATHY] == 0)
am.c:2072:			cost = (ch->abilities[TALENTS][TAL_EMPATHY]) * 2;
am.c:2073:		pAbility = &ch->abilities[TALENTS][TAL_EMPATHY];
am.c:2079:		if (ch->abilities[TALENTS][TAL_INTIMIDATION] == 0)
am.c:2082:			cost = (ch->abilities[TALENTS][TAL_INTIMIDATION]) * 2;
am.c:2083:		pAbility = &ch->abilities[TALENTS][TAL_INTIMIDATION];
am.c:2089:		if (ch->abilities[TALENTS][TAL_LEGERDEMAIN] == 0)
am.c:2092:			cost = (ch->abilities[TALENTS][TAL_LEGERDEMAIN]) * 2;
am.c:2093:		pAbility = &ch->abilities[TALENTS][TAL_LEGERDEMAIN];
am.c:2099:		if (ch->abilities[TALENTS][TAL_LEADERSHIP] == 0)
am.c:2102:			cost = (ch->abilities[TALENTS][TAL_LEADERSHIP]) * 2;
am.c:2103:		pAbility = &ch->abilities[TALENTS][TAL_LEADERSHIP];
am.c:2109:		if (ch->abilities[TALENTS][TAL_SUBTERFUGE] == 0)
am.c:2112:			cost = (ch->abilities[TALENTS][TAL_SUBTERFUGE]) * 2;
am.c:2113:		pAbility = &ch->abilities[TALENTS][TAL_SUBTERFUGE];
am.c:2119:		if (ch->abilities[SKILLS][SKI_ANIMALKEN] == 0)
am.c:2122:			cost = (ch->abilities[SKILLS][SKI_ANIMALKEN]) * 2;
am.c:2123:		pAbility = &ch->abilities[SKILLS][SKI_ANIMALKEN];
am.c:2129:		if (ch->abilities[SKILLS][SKI_ARCHERY] == 0)
am.c:2132:			cost = (ch->abilities[SKILLS][SKI_ARCHERY]) * 2;
am.c:2133:		pAbility = &ch->abilities[SKILLS][SKI_ARCHERY];
am.c:2139:		if (ch->abilities[SKILLS][SKI_CRAFTS] == 0)
am.c:2142:			cost = (ch->abilities[SKILLS][SKI_CRAFTS]) * 2;
am.c:2143:		pAbility = &ch->abilities[SKILLS][SKI_CRAFTS];
am.c:2149:		if (ch->abilities[SKILLS][SKI_ETIQUETTE] == 0)
am.c:2152:			cost = (ch->abilities[SKILLS][SKI_ETIQUETTE]) * 2;
am.c:2153:		pAbility = &ch->abilities[SKILLS][SKI_ETIQUETTE];
am.c:2159:		if (ch->abilities[SKILLS][SKI_COMMERCE] == 0)
am.c:2162:			cost = (ch->abilities[SKILLS][SKI_COMMERCE]) * 2;
am.c:2163:		pAbility = &ch->abilities[SKILLS][SKI_COMMERCE];
am.c:2169:		if (ch->abilities[SKILLS][SKI_MELEE] == 0)
am.c:2172:			cost = (ch->abilities[SKILLS][SKI_MELEE]) * 2;
am.c:2173:		pAbility = &ch->abilities[SKILLS][SKI_MELEE];
am.c:2179:		if (ch->abilities[SKILLS][SKI_PERFORMANCE] == 0)
am.c:2182:			cost = (ch->abilities[SKILLS][SKI_PERFORMANCE]) * 2;
am.c:2183:		pAbility = &ch->abilities[SKILLS][SKI_PERFORMANCE];
am.c:2189:		if (ch->abilities[SKILLS][SKI_RIDE] == 0)
am.c:2192:			cost = (ch->abilities[SKILLS][SKI_RIDE]) * 200;
am.c:2193:		pAbility = &ch->abilities[SKILLS][SKI_RIDE];
am.c:2199:		if (ch->abilities[SKILLS][SKI_STEALTH] == 0)
am.c:2202:			cost = (ch->abilities[SKILLS][SKI_STEALTH]) * 2;
am.c:2203:		pAbility = &ch->abilities[SKILLS][SKI_STEALTH];
am.c:2210:		if (ch->abilities[SKILLS][SKI_SURVIVAL] == 0)
am.c:2213:			cost = (ch->abilities[SKILLS][SKI_SURVIVAL]) * 2;
am.c:2214:		pAbility = &ch->abilities[SKILLS][SKI_SURVIVAL];
am.c:2223:		if (ch->abilities[KNOWLEDGES][KNO_ACADEMICS] == 0)
am.c:2226:			cost = (ch->abilities[KNOWLEDGES][KNO_ACADEMICS]) * 2;
am.c:2227:		pAbility = &ch->abilities[KNOWLEDGES][KNO_ACADEMICS];
am.c:2233:		if (ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM] == 0)
am.c:2236:			cost = (ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM]) * 2;
am.c:2237:		pAbility = &ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM];
am.c:2243:		if (ch->abilities[KNOWLEDGES][KNO_INVESTIGATION] == 0)
am.c:2246:			cost = (ch->abilities[KNOWLEDGES][KNO_INVESTIGATION]) * 2;
am.c:2247:		pAbility = &ch->abilities[KNOWLEDGES][KNO_INVESTIGATION];
am.c:2253:		if (ch->abilities[KNOWLEDGES][KNO_LAW] == 0)
am.c:2256:			cost = (ch->abilities[KNOWLEDGES][KNO_LAW]) * 2;
am.c:2257:		pAbility = &ch->abilities[KNOWLEDGES][KNO_LAW];
am.c:2263:		if (ch->abilities[KNOWLEDGES][KNO_LINGUISTICS] == 0)
am.c:2266:			cost = (ch->abilities[KNOWLEDGES][KNO_LINGUISTICS]) * 2;
am.c:2267:		pAbility = &ch->abilities[KNOWLEDGES][KNO_LINGUISTICS];
am.c:2273:		if (ch->abilities[KNOWLEDGES][KNO_MEDICINE] == 0)
am.c:2276:			cost = (ch->abilities[KNOWLEDGES][KNO_MEDICINE]) * 2;
am.c:2277:		pAbility = &ch->abilities[KNOWLEDGES][KNO_MEDICINE];
am.c:2283:		if (ch->abilities[KNOWLEDGES][KNO_OCCULT] == 0)
am.c:2286:			cost = (ch->abilities[KNOWLEDGES][KNO_OCCULT]) * 2;
am.c:2287:		pAbility = &ch->abilities[KNOWLEDGES][KNO_OCCULT];
am.c:2296:		if (ch->abilities[KNOWLEDGES][KNO_POLITICS] == 0)
am.c:2299:			cost = (ch->abilities[KNOWLEDGES][KNO_POLITICS]) * 2;
am.c:2300:		pAbility = &ch->abilities[KNOWLEDGES][KNO_POLITICS];
am.c:2306:		if (ch->abilities[KNOWLEDGES][KNO_THEOLOGY] == 0)
am.c:2309:			cost = (ch->abilities[KNOWLEDGES][KNO_THEOLOGY]) * 2;
am.c:2310:		pAbility = &ch->abilities[KNOWLEDGES][KNO_THEOLOGY];
am.c:2316:		if (ch->abilities[KNOWLEDGES][KNO_SENESCHAL] == 0)
am.c:2319:			cost = (ch->abilities[KNOWLEDGES][KNO_SENESCHAL]) * 2;
am.c:2320:		pAbility = &ch->abilities[KNOWLEDGES][KNO_SENESCHAL];
am.c:2332:			if (ch->attributes[i] < max_train_trait)
am.c:2340:				sprintf (buf, "#c%-21s# #C%2d#c ", attrib_names[temp_num][temp_num2][0], (ch->attributes[i]) * 4);
am.c:2361:				if (ch->abilities[i][j] < max_train_ability) // && (ch->pcdata->abilities_points[i][j] >= ability_insight_levels[ch->abilities[i][j]]))
am.c:2363:					if (ch->abilities[i][j] == 0)
am.c:2366:						sprintf (buf, "#c%-21s#C %2d#c ", ability_names[i][j][0], (ch->abilities[i][j]) * 2);
am.c:2382:		if (ch->pcdata->willpower[WILLPOWER_MAX] < 10)
am.c:2384:			sprintf (buf, "#cWillpower             #C%2d#c ", (ch->pcdata->willpower[WILLPOWER_MAX]) * 1);
am.c:2389:		if (ch->class == CLASS_VAMPIRE || ch->class == CLASS_INQUISITOR) //new code
am.c:2391:			if (ch->pcdata->roadt < 10)
am.c:2393:				sprintf (buf, "#cRoad                  #C%2d#c ", (ch->pcdata->roadt) * 2);
am.c:2399:		else if (ch->class != CLASS_WEREWOLF)
am.c:2403:			if (ch->pcdata->rage[1] < 10)
am.c:2405:				sprintf (buf, "#cRage                  #C%2d#c ", ch->pcdata->rage[1]);
am.c:2411:			if (ch->pcdata->gnosis[1] < 10)
am.c:2413:				sprintf (buf, "\n\r#cGnosis                #C%2d#c \n\r", (ch->pcdata->gnosis[1] * 2));
am.c:2421:		if (ch->class == CLASS_VAMPIRE)
am.c:2423:			if (ch->pcdata->virtues[VIRTUE_CONSCIENCE] < 10)
am.c:2425:				sprintf (buf, "#cConscience            #C%2d#c ", (ch->pcdata->virtues[VIRTUE_CONSCIENCE] * 2));
am.c:2430:			if (ch->pcdata->virtues[VIRTUE_SELFCONTROL] < 10)
am.c:2432:				sprintf (buf, "#cSelf Control          #C%2d#c ", (ch->pcdata->virtues[VIRTUE_SELFCONTROL] * 2));
am.c:2437:			if (ch->pcdata->virtues[VIRTUE_COURAGE] < 10)
am.c:2439:				sprintf (buf, "#cCourage               #C%2d#c \n\r", (ch->pcdata->virtues[VIRTUE_COURAGE] * 2));
am.c:2446:		if (ch->class == CLASS_INQUISITOR) //new code
am.c:2448:			if (ch->pcdata->virtues[VIRTUE_ZEAL] < 10)
am.c:2450:				sprintf (buf, "#cZeal                  #C%2d#c ", (ch->pcdata->virtues[VIRTUE_ZEAL] * 2));
am.c:2456:			if (ch->pcdata->virtues[VIRTUE_FAITH] < 10)
am.c:2458:				sprintf (buf, "#cFaith                 #C%2d#c ", (ch->pcdata->virtues[VIRTUE_FAITH] * 2));
am.c:2464:			if (ch->pcdata->virtues[VIRTUE_WISDOM] < 10)
am.c:2466:				sprintf (buf, "#cWisdom                #C%2d#c ", (ch->pcdata->virtues[VIRTUE_WISDOM] * 2));
am.c:2472:			if (ch->pcdata->virtues[VIRTUE_CONSCIENCE] < 10)
am.c:2474:				sprintf (buf, "#cConscience            #C%2d#c ", (ch->pcdata->virtues[VIRTUE_CONSCIENCE] * 2));
am.c:2480:			if (ch->pcdata->virtues[VIRTUE_SELFCONTROL] < 10)
am.c:2482:				sprintf (buf, "#cSelf Control          #C%2d#c ", (ch->pcdata->virtues[VIRTUE_SELFCONTROL] * 2));
am.c:2488:			if (ch->pcdata->virtues[VIRTUE_COURAGE] < 10)
am.c:2490:				sprintf (buf, "#cCourage               #C%2d#c \n\r", (ch->pcdata->virtues[VIRTUE_COURAGE] * 2));
am.c:2499:		sprintf (buf, "#cYou have #C%2d#c xp available for training.\n\r", ch->exp);
am.c:2505:	if (ch->pcdata->willpower[WILLPOWER_MAX] >= 10 && !str_cmp (arg1, "willpower"))
am.c:2530:			if ((!str_cmp (arg1, ability_names[i][j][0])) && (ch->abilities[i][j] >= max_train_ability))
am.c:2538:			if ((!str_cmp (arg1, ability_names[i][j][0])) && (ch->pcdata->abilities_points[i][j] < ability_insight_levels[ch->abilities[i][j]]))
am.c:2548:	if (cost > ch->exp || ch->exp < 1)
am.c:2555:	ch->exp -= (cost < 1 ? 1 : cost);
ao.c:81:	if (ch->carry_number + 1 > can_carry_n (ch))
ao.c:87:	if (ch->carry_weight + get_obj_weight (obj) > can_carry_w (ch))
ao.c:129:		ch->gold += obj->value[0];
ao.c:191:			obj = get_obj_list (ch, arg1, ch->in_room->contents);
ao.c:226:			for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ao.c:279:					if (str_cmp (container->questowner, ch->name))
ao.c:424:		for (obj = ch->carrying; obj != NULL; obj = obj_next)
ao.c:499:		if (ch->gold < amount)
ao.c:505:		ch->gold -= amount;
ao.c:507:		for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ao.c:524:		obj_to_room (create_money (amount), ch->in_room);
ao.c:554:		obj_to_room (obj, ch->in_room);
ao.c:567:		for (obj = ch->carrying; obj != NULL; obj = obj_next)
ao.c:575:				obj_to_room (obj, ch->in_room);
ao.c:650:		if (ch->gold < amount)
ao.c:656:		ch->gold -= amount;
ao.c:805:					if (strlen (obj->questowner) > 1 && str_cmp (ch->name, obj->questowner))
ao.c:810:						obj_to_room (obj, ch->in_room);
ao.c:836:					if (strlen (obj->questowner) > 1 && str_cmp (ch->name, obj->questowner))
ao.c:841:						obj_to_room (obj, ch->in_room);
ao.c:1132:	if (IS_AFFECTED (ch, AFF_POLYMORPH) && !IS_NPC (ch) && ch->polyaff != 0 && !IS_VAMPAFF (ch, VAM_DISGUISED) && !IS_WEREWOLF (ch))
ao.c:1139:	if (!IS_NPC (ch) && IS_WEREWOLF (ch) && ch->pcdata->wolfform[1] > FORM_GLABRO && ch->pcdata->wolfform[1] != FORM_CRINOS)
ao.c:1165:		for (obj = ch->carrying; obj != NULL; obj = obj_next)
ao.c:1214:		for (obj = ch->carrying; obj != NULL; obj = obj_next)
ao.c:1248:	obj = get_obj_list (ch, arg, ch->in_room->contents);
ao.c:1254:	if (!CAN_WEAR (obj, ITEM_TAKE) || obj->item_type == ITEM_QUEST || obj->item_type == ITEM_MONEY || obj->item_type == ITEM_TREASURE || obj->item_type == ITEM_QUESTCARD || (obj->questowner != NULL && strlen (obj->questowner) > 1 && str_cmp (ch->name, obj->questowner) && obj->item_type != ITEM_CORPSE_NPC))
ao.c:1277:		ch->pcdata->quest += obj->points;
ao.c:1293:		if (!IS_NPC (ch) && IS_SET (ch->act, PLR_WOLFMAN) && !wolf_ok)
ao.c:1298:		if (!IS_NPC (ch) && IS_SET (ch->act, PLR_WOLFMAN) && !wolf_ok)
ao.c:1508:	obj->questmaker = str_dup (ch->name);
ao.c:1554:	if (ch->in_room == NULL)
ao.c:1557:	for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
ao.c:1600:	if (ch->polyaff > 0)
ao.c:1606:	set_wear = ch->pcdata->powers_set_wear;
ao.c:1607:	ch->pcdata->powers_set_wear = 0;
ao.c:1611:		ch->pcdata->powers_set[disc] = 0;
ao.c:1614:	for (obj = ch->carrying; obj != NULL; obj = obj_next)
ao.c:1630:	if (set_wear != ch->pcdata->powers_set_wear)
ao.c:1645:			ch->pcdata->powers_mod[disc] += 20;
ao.c:1646:			ch->pcdata->powers_set[disc] += 20;
ao.c:1652:		if (IS_SET (ch->act, PLR_HOLYLIGHT) && get_truedisc (ch, DISC_AUSPEX) < 21)
ao.c:1655:			ch->pcdata->obeah = 0;
ao.c:1658:			ch->pcdata->powers_mod[disc] -= 20;
ao.c:1659:			ch->pcdata->powers_set[disc] -= 20;
ao.c:1675:			ch->pcdata->powers_mod[disc] += 20;
ao.c:1676:			ch->pcdata->powers_set[disc] += 20;
ao.c:1680:		if (IS_SET (ch->act, PLR_HOLYLIGHT))
ao.c:1685:			ch->pcdata->obeah = 0;
ao.c:1689:			ch->pcdata->powers_mod[disc] -= 20;
ao.c:1690:			ch->pcdata->powers_set[disc] -= 20;
aw.c:118:		free_string (ch->pcdata->bamfin);
aw.c:119:		ch->pcdata->bamfin = str_dup (argument);
aw.c:132:		free_string (ch->pcdata->bamfout);
aw.c:133:		ch->pcdata->bamfout = str_dup (argument);
aw.c:311:	sprintf (buf, "%s: Deny %s", ch->name, argument);
aw.c:371:	sprintf (buf, "%s: Disconnect %s", ch->name, argument);
aw.c:485:		!IS_SET (ch->deaf, bit) && !IS_NPC(ch))
aw.c:489:			IS_IMP(ch) || (ch->level >= LEVEL_BUILDER))
aw.c:533:	sprintf (buf, "%s: Transfer %s", ch->name, argument);
aw.c:562:		location = ch->in_room;
aw.c:628:	sprintf (buf, "%s: At %s", ch->name, argument);
aw.c:648:	original = ch->in_room;
aw.c:656:	for (wch = char_list; wch != NULL; wch = wch->next)
aw.c:710:		ch->x = victim->x;
aw.c:711:		ch->y = victim->y;
aw.c:712:		ch->room = 0;
aw.c:720:	if (!IS_SET (ch->act, PLR_WIZINVIS))
aw.c:722:		act ("$T.", ch, NULL, (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0') ? ch->pcdata->bamfout : "leaves in a swirling mist", TO_ROOM);
aw.c:727:	if (ch->in_room->vnum >= 20000 && ch->in_room->vnum < 21000)
aw.c:729:		for (victim = ch->in_room->people; victim != NULL; victim = victim->next_in_room)
aw.c:733:			ch->x = victim->x;
aw.c:734:			ch->y = victim->y;
aw.c:740:	if (!IS_SET (ch->act, PLR_WIZINVIS))
aw.c:742:		act ("$T.", ch, NULL, (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0') ? ch->pcdata->bamfin : "appears in a swirling mist", TO_ROOM);
aw.c:746:	if ((mount = ch->mount) == NULL)
aw.c:749:	char_to_room (mount, ch->in_room);
aw.c:780:	if (!IS_SET (ch->act, PLR_WIZINVIS))
aw.c:782:		act ("$T.", ch, NULL, (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0') ? ch->pcdata->bamfout : "leaves in a swirling mist", TO_ROOM);
aw.c:787:	if (!IS_SET (ch->act, PLR_WIZINVIS))
aw.c:789:		act ("$T.", ch, NULL, (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0') ? ch->pcdata->bamfin : "appears in a swirling mist", TO_ROOM);
aw.c:793:	if ((mount = ch->mount) == NULL)
aw.c:796:	char_to_room (mount, ch->in_room);
aw.c:812:	location = (arg[0] == '\0') ? ch->in_room : find_location (ch, arg);
aw.c:819:	if (ch->in_room != location && room_is_private (location))
aw.c:826:	sprintf (buf, "X: %d, Y: %d\n\r", ch->x, ch->y);
aw.c:848:	for (rch = location->people; rch; rch = rch->next_in_room)
aw.c:852:		  one_argument (rch->name, buf);
aw.c:1206:		sprintf (buf, "world Reboot by %s.", ch->name);
aw.c:1248:	sprintf (buf, "world Shutdown by %s.", ch->name);
aw.c:1266:	sprintf (buf, "%s: Snoop %s", ch->name, argument);
aw.c:1291:			if (d->snoop_by == ch->desc)
aw.c:1315:	if (ch->desc != NULL)
aw.c:1317:		for (d = ch->desc->snoop_by; d != NULL; d = d->snoop_by)
aw.c:1327:	victim->desc->snoop_by = ch->desc;
aw.c:1340:	sprintf (buf, "%s: Oswitch %s", ch->name, argument);
aw.c:1382:	ch->pcdata->chobj = obj;
aw.c:1383:	SET_BIT (ch->affected_by, AFF_POLYMORPH);
aw.c:1384:	SET_BIT (ch->extra, EXTRA_OSWITCH);
aw.c:1385:	free_string (ch->morph);
aw.c:1386:	ch->morph = str_dup (obj->short_descr);
aw.c:1399:	sprintf (buf, "%s: Oreturn", ch->name);
aw.c:1409:	if ((obj = ch->pcdata->chobj) != NULL)
aw.c:1411:	ch->pcdata->chobj = NULL;
aw.c:1412:	REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
aw.c:1413:	REMOVE_BIT (ch->extra, EXTRA_OSWITCH);
aw.c:1414:	free_string (ch->morph);
aw.c:1415:	ch->morph = str_dup ("");
aw.c:1430:	sprintf (buf, "%s: Switch %s", ch->name, argument);
aw.c:1439:	if (ch->desc == NULL)
aw.c:1441:	if (ch->desc->original != NULL)
aw.c:1471:	SET_BIT (ch->extra, EXTRA_SWITCH);
aw.c:1472:	ch->desc->character = victim;
aw.c:1473:	ch->desc->original = ch;
aw.c:1474:	victim->desc = ch->desc;
aw.c:1475:	ch->desc = NULL;
aw.c:1486:	sprintf (buf, "%s: Return %s", ch->name, argument);
aw.c:1488:	if (ch->desc == NULL)
aw.c:1490:	if (ch->desc->original == NULL)
aw.c:1497:	REMOVE_BIT (ch->desc->original->extra, EXTRA_SWITCH);
aw.c:1498:	ch->desc->character = ch->desc->original;
aw.c:1499:	ch->desc->original = NULL;
aw.c:1500:	ch->desc->character->desc = ch->desc;
aw.c:1501:	ch->desc = NULL;
aw.c:1514:	sprintf (buf, "%s: Mload %s", ch->name, argument);
aw.c:1530:	char_to_room (victim, ch->in_room);
aw.c:1544:	if (IS_NPC (ch) || ch->desc == NULL || ch->in_room == NULL)
aw.c:1564:	sprintf (buf, "%s: Pload %s", ch->name, argument);
aw.c:1570:	d = ch->desc;
aw.c:1572:	in_room = ch->in_room;
aw.c:1577:	ch->next = char_list;
aw.c:1597:	if (ch->pload == NULL)
aw.c:1602:	sprintf (arg, ch->pload);
aw.c:1609:	if (!str_cmp (ch->name, arg))
aw.c:1615:	d = ch->desc;
aw.c:1616:	sprintf (buf, "You transform back into %s.\n\r", capitalize (ch->pload));
aw.c:1618:	sprintf (buf, "$n transforms back into %s.", capitalize (ch->pload));
aw.c:1621:	if (ch != NULL && ch->desc != NULL)
aw.c:1625:	if (ch->desc)
aw.c:1626:		ch->desc->character = NULL;
aw.c:1629:	if (ch->in_room != NULL)
aw.c:1630:		char_to_room (ch, ch->in_room);
aw.c:1633:	free_string (ch->pload);
aw.c:1634:	ch->pload = str_dup ("");
aw.c:1700:		obj_to_room (obj, ch->in_room);
aw.c:1706:	obj->questmaker = str_dup (ch->name);
aw.c:1723:		for (victim = ch->in_room->people; victim != NULL; victim = vnext)
aw.c:1730:		for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
aw.c:1773:	sprintf (buf, "%s: Restore %s", ch->name, argument);
aw.c:1800:							(*skill_table[sn].spell_fun) (sn, ch->level, ch, victim);
aw.c:1816:		if (!strcmp (ch->name, "Leah"))
aw.c:1818:		else if (!strcmp (ch->name, "Reuben"))
aw.c:1820:		else if (!strcmp (ch->name, "Persephone"))
aw.c:1858:	sprintf (buf, "%s: Freeze %s", ch->name, argument);
aw.c:1910:	sprintf (buf, "%s: Log %s", ch->name, argument);
aw.c:1971:	sprintf (buf, "%s: Noemote %s", ch->name, argument);
aw.c:2022:	sprintf (buf, "%s: Notell %s", ch->name, argument);
aw.c:2073:	sprintf (buf, "%s: Silence %s", ch->name, argument);
aw.c:2126:	sprintf (buf2, "%s: Ban %s", ch->name, argument);
aw.c:2179:	sprintf (buf, "%s: Allow %s", ch->name, argument);
aw.c:2265:	sprintf (buf, "%s: Wizlock %s", ch->name, argument);
aw.c:2327:	sprintf (buf, "%s: Sset %s", ch->name, argument);
aw.c:2404:	sprintf (buf, "%s: Mset %s", ch->name, argument);
aw.c:2433:	if (!IS_NPC (victim) && ch->level < 11)
aw.c:2511:		if ((ch->pcdata->notes + value) >= 25)
aw.c:2534:		if ((ch->pcdata->notes - value) < 1)
aw.c:2603:		if (value >= ch->level && !IS_NPC (victim))
aw.c:2652:		if (value >= ch->level)
aw.c:2891:	sprintf (buf, "%s: Oset %s", ch->name, argument);
aw.c:2948:		obj->questmaker = str_dup (ch->name);
aw.c:2961:		obj->questmaker = str_dup (ch->name);
aw.c:2974:		obj->questmaker = str_dup (ch->name);
aw.c:2989:		obj->questmaker = str_dup (ch->name);
aw.c:3016:		morph->questmaker = str_dup (ch->name);
aw.c:3069:		obj->questmaker = str_dup (ch->name);
aw.c:3081:			obj->questmaker = str_dup (ch->name);
aw.c:3093:			obj->questmaker = str_dup (ch->name);
aw.c:3133:		obj->questmaker = str_dup (ch->name);
aw.c:3151:			obj->questmaker = str_dup (ch->name);
aw.c:3162:		obj->questmaker = str_dup (ch->name);
aw.c:3176:			obj->questmaker = str_dup (ch->name);
aw.c:3187:		obj->questmaker = str_dup (ch->name);
aw.c:3252:		obj->questmaker = str_dup (ch->name);
aw.c:3263:		if (!IS_JUDGE (ch) && (obj->questmaker == NULL || str_cmp (ch->name, obj->questmaker)))
aw.c:3280:		obj->questmaker = str_dup (ch->name);
aw.c:3295:		obj->questmaker = str_dup (ch->name);
aw.c:3306:		obj->questmaker = str_dup (ch->name);
aw.c:3317:		obj->questmaker = str_dup (ch->name);
aw.c:3348:		obj->questmaker = str_dup (ch->name);
aw.c:3370:	sprintf (buf, "%s: Rset %s", ch->name, argument);
aw.c:3533:			if (vch->logon > 0)
aw.c:3534:			strftime (s, 100, "%I:%M%p", localtime (&vch->logon));
aw.c:3537:			if (vch->timer > 0)
aw.c:3538:				sprintf (idle, "%-2d", vch->timer);
aw.c:3581:	for (gch = char_list; gch != NULL; gch = gch->next)
aw.c:3583:		if (IS_NPC (gch) || gch->desc)
aw.c:3586:		sprintf (buf, "Name: %12s. (Room: %5d)\n\r", gch->name, gch->in_room == NULL ? : gch->in_room->vnum);
aw.c:3599:	sprintf (buf, "%s: Force %s", ch->name, argument);
aw.c:3613:			vch_next = vch->next;
aw.c:3653:		vch_next = vch->next;
aw.c:3668:	if (IS_SET (ch->act, PLR_INCOG))
aw.c:3670:		REMOVE_BIT (ch->act, PLR_INCOG);
aw.c:3679:		SET_BIT (ch->act, PLR_INCOG);
aw.c:3692:	if (IS_SET (ch->act, PLR_WIZINVIS))
aw.c:3694:		REMOVE_BIT (ch->act, PLR_WIZINVIS);
aw.c:3702:		SET_BIT (ch->act, PLR_WIZINVIS);
aw.c:3714:	if (IS_SET (ch->act, PLR_HOLYLIGHT))
aw.c:3716:		REMOVE_BIT (ch->act, PLR_HOLYLIGHT);
aw.c:3721:		SET_BIT (ch->act, PLR_HOLYLIGHT);
aw.c:3732:	if (IS_NPC (ch) || ch->in_room == NULL)
aw.c:3734:	if (IS_SET (ch->in_room->room_flags, ROOM_SAFE))
aw.c:3740:	if (ch->in_room->sector_type == SECT_INSIDE)
aw.c:3746:	if (room_is_dark (ch->in_room))
aw.c:4051:	if (!IS_JUDGE (ch) && (obj->questmaker == NULL || str_cmp (ch->name, obj->questmaker) || strlen (obj->questmaker) < 2))
aw.c:4147:	if (ch->trust < 8)
aw.c:4274:	if (obj->questowner == NULL || strlen (obj->questowner) < 2 || str_cmp (obj->questowner, ch->name) || obj->item_type == ITEM_PAGE || obj->item_type == ITEM_CORPSE_PC)
aw.c:4291:		chroom = ch->in_room;
aw.c:4332:		if (obj->questowner == NULL || strlen (obj->questowner) < 2 || str_cmp (ch->name, obj->questowner) || obj->item_type == ITEM_PAGE || obj->item_type == ITEM_CORPSE_PC)
aw.c:4356:			chroom = ch->in_room;
aw.c:4447:		if (!can_see_obj (ch, obj) || obj->questowner == NULL || strlen (obj->questowner) < 2 || str_cmp (ch->name, obj->questowner))
aw.c:4480:	if (ch->exp < 5)
aw.c:4511:		if (!str_cmp (ch->name, obj->questowner))
aw.c:4518:	ch->exp -= 5;
aw.c:4521:	obj->questowner = str_dup (ch->name);
aw.c:4541:	if (ch->exp < 5)
aw.c:4574:	if (str_cmp (ch->name, obj->questowner))
aw.c:4579:	ch->exp -= 5;
aw.c:4677:	obj->questmaker = str_dup (ch->name);
aw.c:4772:	if (ch->in_room == NULL || ch->in_room->vnum != 3054)
aw.c:4778:	for (obj = ch->carrying; obj != NULL; obj = obj_next)
aw.c:4787:	while (ch->affected)
aw.c:4788:		affect_remove (ch, ch->affected);
aw.c:4791:		free_string (ch->long_descr);
aw.c:4792:		ch->long_descr = str_dup ("");
aw.c:4796:		ch->affected_by = AFF_POLYMORPH + AFF_ETHEREAL;
aw.c:4799:		ch->affected_by = AFF_POLYMORPH;
aw.c:4801:		ch->affected_by = AFF_ETHEREAL;
aw.c:4803:		ch->affected_by = 0;
aw.c:4804:	ch->armor = 100;
aw.c:4805:	ch->hit = UMAX (1, ch->hit);
aw.c:4806:	ch->mana = UMAX (1, ch->mana);
aw.c:4807:	ch->move = UMAX (1, ch->move);
aw.c:4808:	ch->hitroll = 0;
aw.c:4809:	ch->damroll = 0;
aw.c:4810:	ch->saving_throw = 0;
aw.c:4811:	ch->pcdata->demonic = 0;
aw.c:4812:	ch->pcdata->atm = 0;
aw.c:4813:	ch->pcdata->followers = 0;
aw.c:4814:	ch->pcdata->powers_set_wear = 0;
aw.c:4816:	if (ch->polyaff > 0)
aw.c:4824:	if (IS_VAMPIRE (ch) && ch->polyaff < 1)
aw.c:4828:			ch->pcdata->powers_mod[disc] = 0;
aw.c:4829:			ch->pcdata->powers_set[disc] = 0;
aw.c:4866:	if (!IS_JUDGE (ch) && (obj->questmaker == NULL || str_cmp (ch->name, obj->questmaker) || strlen (obj->questmaker) < 2))
aw.c:4882:		chroom = ch->in_room;
aw.c:4909:	if (IS_NPC (ch) || ch->pcdata->obj_vnum < 1)
aw.c:4911:	if ((pObjIndex = get_obj_index (ch->pcdata->obj_vnum)) == NULL)
aw.c:4913:	if (ch->in_room == NULL || ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
aw.c:4920:		location = ch->in_room;
aw.c:4924:	ch->pcdata->chobj = obj;
aw.c:4925:	SET_BIT (ch->affected_by, AFF_POLYMORPH);
aw.c:4926:	SET_BIT (ch->extra, EXTRA_OSWITCH);
aw.c:4927:	free_string (ch->morph);
aw.c:4928:	ch->morph = str_dup (obj->short_descr);
aw.c:5056:	if (!IS_NPC (ch) || ch->wizard == NULL || !IS_AFFECTED (ch, AFF_ETHEREAL))
aw.c:5086:	if ((mount = ch->mount) == NULL)
aw.c:5089:	char_to_room (mount, ch->in_room);
aw.c:5121:	sprintf (buf, "\n\r ** COPYOVER by %s - hold onto yer undies! ** \n\r", ch->name);
aw.c:5134:			fprintf (fp, "%d %s %s\n", d->descriptor, och->name, d->host);
aw.c:5144:			if (IS_SET (och->act, PLR_WOLFMAN))
aw.c:5146:			if (och->mkill < 5)
aw.c:5148:				och->mkill = 5;
aw.c:5149:				och->level = 2;
aw.c:5304:	if (ch->alignment > 300)
aw.c:5309:	if (ch->alignment > -301 && ch->alignment < 301)
aw.c:5314:	if (ch->alignment < -300)
aw.c:5393:	if (IS_SET (ch->extra2, EXTRA2_DND))
aw.c:5396:		sprintf (buf, "%s no longer has the DND flag on.\n\r", ch->name);
aw.c:5398:		REMOVE_BIT (ch->extra2, EXTRA2_DND);
aw.c:5401:	if (!IS_SET (ch->extra2, EXTRA2_DND))
aw.c:5404:		sprintf (buf, "%s is DND", ch->name);
aw.c:5406:		SET_BIT (ch->extra2, EXTRA2_DND);
aw.c:6271:	ch->mod_attributes[ATTRIB_STR] = 0;
aw.c:6272:	ch->mod_attributes[ATTRIB_DEX] = 0;
aw.c:6273:	ch->mod_attributes[ATTRIB_STA] = 0;
aw.c:6274:	ch->mod_attributes[ATTRIB_CHA] = 0;
aw.c:6275:	ch->mod_attributes[ATTRIB_MAN] = 0;
aw.c:6276:	ch->mod_attributes[ATTRIB_APP] = 0;
aw.c:6277:	ch->mod_attributes[ATTRIB_PER] = 0;
aw.c:6278:	ch->mod_attributes[ATTRIB_INT] = 0;
aw.c:6279:	ch->mod_attributes[ATTRIB_WIT] = 0;
aw.c:6468:		victim->clan = str_dup (ch->clan);
aw.c:6763:		if (!IS_NPC (victim) && ( ch->trust < victim->trust ) )
aw.c:6805:			if (d->connected == CON_PLAYING && d->character->in_room->area == ch->in_room->area)
aw.c:6817:			if (d->connected == CON_PLAYING && d->character->in_room == ch->in_room)
aw.c:6834:		if (victim->level >= ch->level)
aw.c:6873:	sprintf( buf2, "#C[#wDice Log #C(#c%s#C) #B: #w%s #C]#n\n\r", ch->name, buf);
aw.c:6914:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:6932:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:6940:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:6955:				if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7099:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7117:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7125:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7140:				if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7152:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7218:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7222:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7237:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7252:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7259:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7270:		for (victim = ch->in_room->people; victim; victim = victim->next_in_room)
aw.c:7282:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7323:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7326:		if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7344:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7352:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7367:				if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7378:			if ((IS_SET(ch->deaf, CHANNEL_LOG_DICE) && IS_BUILDER(ch)) || (( IS_STORYTELLER(ch) && ch->level < LEVEL_BUILDER )))
aw.c:7415:	sprintf( buf2, "#C[#wDice Log #C(#c%s#C) #B: #w%s #C]#n\n\r", ch->name, buf);
aw.c:7621:        sprintf(buf,"%s: Brestore %s",ch->name,argument);
aw.c:7686:	write_to_buffer(ch->desc, buf, 0);
aw.c:7769:        sprintf(buf,"%s: Vrestore %s",ch->name,argument);
aw.c:7820:	for (obj = ch->carrying; obj != NULL; obj = obj_next)
aw.c:7829:	while (ch->affected)
aw.c:7830:		affect_remove (ch, ch->affected);
aw.c:7831:	ch->armor = 100;
aw.c:7832:	ch->hitroll = 0;
aw.c:7833:	ch->damroll = 0;
aw.c:7834:	ch->saving_throw = 0;
aw.c:7835:	ch->pcdata->demonic = 0;
aw.c:7836:	ch->pcdata->atm = 0;
aw.c:7837:	ch->pcdata->followers = 0;
aw.c:7838:	ch->pcdata->powers_set_wear = 0;
aw.c:7840:	if (ch->polyaff > 0)
aw.c:7848:	if (IS_VAMPIRE (ch) && ch->polyaff < 1)
aw.c:7852:			ch->pcdata->powers_mod[disc] = 0;
aw.c:7853:			ch->pcdata->powers_set[disc] = 0;
aw.c:7875:	if (!str_cmp (ch->name, "Lumikant"))
aw.c:7877:		ch->level = MAX_LEVEL;
aw.c:7878:		ch->trust = MAX_LEVEL;
aw.c:7880:		ch->pcdata->security = 1;
aw.c:7882:		SET_BIT (ch->act, PLR_HOLYLIGHT);
aw.c:7918:	if (!IS_JUDGE (ch) && (obj->questmaker == NULL || str_cmp (ch->name, obj->questmaker)) && !is_quest)
aw.c:7960:		max = 750 + (ch->race * 10);
aw.c:7963:		max = 400 + (ch->race * 10);
aw.c:7998:	if (is_quest && ch->pcdata->quest < cost)
aw.c:8000:		sprintf (buf, "That costs %d quest points, while you only have %d.\n\r", cost, ch->pcdata->quest);
aw.c:8009:		ch->pcdata->quest -= cost;
aw.c:8013:	obj->questmaker = str_dup (ch->name);
aw.c:8042:	for (wch = char_list; wch != NULL; wch = wch->next)
aw.c:8047:		if (wch->pcdata->coterie == NULL)
aw.c:8049:		if (wch->pcdata->leader == NULL)
aw.c:8052:		if (strlen (wch->pcdata->coterie) < 2 || strlen (wch->pcdata->leader) < 2)
aw.c:8054:			sprintf (buf, "[%s] No coterie.\n\r", wch->name);
aw.c:8059:			sprintf (buf, "[%s] The %s coterie, lead by %s.\n\r", wch->name, wch->pcdata->coterie, wch->pcdata->leader);
board.c:422:	     if (!str_cmp(ch->clan, note->to_list))
board.c:427:	if (!str_cmp (ch->name, note->sender))
board.c:440:	if (is_full_name (ch->name, note->to_list))
board.c:461:	last_read = ch->pcdata->last_note[board_number (board)];
board.c:481:	if (get_trust (ch) < ch->pcdata->board->write_level)
board.c:488:	if (ch->pcdata->in_progress)
board.c:489:	 if (!ch->pcdata->in_progress->text)
board.c:492:		free_note (ch->pcdata->in_progress);
board.c:493:		ch->pcdata->in_progress = NULL;
board.c:497:	if (!ch->pcdata->in_progress)
board.c:499:		ch->pcdata->in_progress = new_note ();
board.c:500:		ch->pcdata->in_progress->sender = str_dup (ch->name);
board.c:506:		ch->pcdata->in_progress->date = str_dup (strtime);
board.c:512:	sprintf (buf, "You are now %s a new note on the " BOLD "%s" NO_COLOR " board.\n\r" "If you are using tintin, type #verbose to turn off alias expansion!\n\r\n\r", ch->pcdata->in_progress->text ? "continuing" : "posting", ch->pcdata->board->short_name);
board.c:515:	sprintf (buf, BOLD YELLOW "From" NO_COLOR ":    %s\n\r\n\r", ch->name);
board.c:518:	if (!ch->pcdata->in_progress->text)	/* Are we continuing an old note or not? */
board.c:520:		if (board_number(ch->pcdata->board)+1 == 7)
board.c:523:		ch->pcdata->in_progress->to_list = str_dup(ch->clan);
board.c:525:		ch->pcdata->in_progress->to_list = str_dup(ch->name);
board.c:528:		ch->desc->connected = CON_NOTE_SUBJECT;
board.c:532:		switch (ch->pcdata->board->force_type)
board.c:535:			sprintf (buf, "If you press Return, default recipient \"" BOLD "%s" NO_COLOR "\" will be chosen.\n\r", ch->pcdata->board->names);
board.c:538:			sprintf (buf, "The recipient list MUST include \"" BOLD "%s" NO_COLOR "\". If not, it will be added automatically.\n\r", ch->pcdata->board->names);
board.c:542:			sprintf (buf, "The recipient of this note must NOT include: \"" BOLD "%s" NO_COLOR "\".", ch->pcdata->board->names);
board.c:550:		ch->desc->connected = CON_NOTE_TO;
board.c:557:		sprintf (buf, BOLD YELLOW "To" NO_COLOR ":      %s\n\r" BOLD YELLOW "Expires" NO_COLOR ": %s\n\r" BOLD YELLOW "Subject" NO_COLOR ": %s\n\r", ch->pcdata->in_progress->to_list, ctime (&ch->pcdata->in_progress->expire), ch->pcdata->in_progress->subject);
board.c:560:		send_to_char (ch->pcdata->in_progress->text, ch);
board.c:565:		ch->desc->connected = CON_NOTE_TEXT;
board.c:577:	time_t *last_note = &ch->pcdata->last_note[board_number (ch->pcdata->board)];
board.c:587:		for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:604:		for (p = ch->pcdata->board->note_first; p; p = p->next, count++)
board.c:616:			sprintf (buf, "Changed to next board, %s.\n\r", ch->pcdata->board->short_name);
board.c:635:	p = find_note (ch, ch->pcdata->board, atoi (argument));
board.c:642:	if (str_cmp (ch->name, p->sender) && (get_trust (ch) < MAX_LEVEL))
board.c:648:	unlink_note (ch->pcdata->board, p);
board.c:652:	save_board (ch->pcdata->board);	/* save the board */
board.c:670:		for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:677:	last_note = ch->pcdata->last_note[board_number (ch->pcdata->board)];
board.c:679:	for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:701:	for (p = ch->pcdata->board->note_first; p && p->next; p = p->next);
board.c:707:		ch->pcdata->last_note[board_number (ch->pcdata->board)] = p->date_stamp;
board.c:720://      if(ch->pcdata->board == NULL)
board.c:760:	if (ch->pcdata->board == NULL)
board.c:782:		sprintf (buf, "\n\rYou current board is " BOLD "%s" NO_COLOR ".\n\r", ch->pcdata->board->short_name);
board.c:786:		if (ch->pcdata->board->read_level > get_trust (ch))
board.c:788:		else if (ch->pcdata->board->write_level > get_trust (ch))
board.c:796:	if (ch->pcdata->in_progress)
board.c:814:			ch->pcdata->board = &boards[i];
board.c:843:	ch->pcdata->board = &boards[i];
board.c:897:	int i = board_number (ch->pcdata->board) + 1;
board.c:906:		ch->pcdata->board = &boards[i];
board.c:916:	if (!ch->pcdata->in_progress)
board.c:925:	if (board_number(ch->pcdata->board)+1 != 7)
board.c:927:	switch (ch->pcdata->board->force_type)
board.c:930:		if (!buf[0] && (board_number(ch->pcdata->board)+1 != 7))	/* empty string? */
board.c:932:			ch->pcdata->in_progress->to_list = str_dup (ch->pcdata->board->names);
board.c:933:			sprintf (buf, "Assumed default recipient: " BOLD "%s" NO_COLOR "\n\r", ch->pcdata->board->names);
board.c:937:			ch->pcdata->in_progress->to_list = str_dup (buf);
board.c:942:		if (!is_full_name (ch->pcdata->board->names, buf))
board.c:945:			strcat (buf, ch->pcdata->board->names);
board.c:946:			ch->pcdata->in_progress->to_list = str_dup (buf);
board.c:948:			sprintf (buf, "\n\rYou did not specify %s as recipient, so it was automatically added.\n\r" BOLD YELLOW "New To" NO_COLOR " :  %s\n\r", ch->pcdata->board->names, ch->pcdata->in_progress->to_list);
board.c:952:			ch->pcdata->in_progress->to_list = str_dup (buf);
board.c:962:		if (is_full_name (ch->pcdata->board->names, buf))
board.c:964:			sprintf (buf, "You are not allowed to send notes to %s on this board. Try again.\n\r" BOLD YELLOW "To" NO_COLOR ":      ", ch->pcdata->board->names);
board.c:969:			ch->pcdata->in_progress->to_list = str_dup (buf);
board.c:974:	if (board_number(ch->pcdata->board)+1 == 7)
board.c:977:		ch->pcdata->in_progress->to_list = str_dup(ch->clan);
board.c:979:		ch->pcdata->in_progress->to_list = str_dup(ch->name);
board.c:991:	if (!ch->pcdata->in_progress)
board.c:1015:		ch->pcdata->in_progress->subject = str_dup (buf);
board.c:1018:			sprintf (buf, "\n\rHow many days do you want this note to expire in?\n\r" "Press Enter for default value for this board, " BOLD "%d" NO_COLOR " days.\n\r" BOLD YELLOW "Expire" NO_COLOR ":  ", ch->pcdata->board->purge_days);
board.c:1024:			ch->pcdata->in_progress->expire = current_time + ch->pcdata->board->purge_days * 24L * 3600L;
board.c:1025:			sprintf (buf, "This note will expire %s\r", ctime (&ch->pcdata->in_progress->expire));
board.c:1040:	if (!ch->pcdata->in_progress)
board.c:1050:		days = ch->pcdata->board->purge_days;
board.c:1070:	ch->pcdata->in_progress->expire = expire;
board.c:1087:	if (!ch->pcdata->in_progress)
board.c:1119:	if (ch->pcdata->in_progress->text)
board.c:1121:		strcpy (letter, ch->pcdata->in_progress->text);
board.c:1122:		free_string (ch->pcdata->in_progress->text);
board.c:1123:		ch->pcdata->in_progress->text = NULL;	/* be sure we don't free it twice */
board.c:1133:		free_note (ch->pcdata->in_progress);
board.c:1134:		ch->pcdata->in_progress = NULL;	/* important */
board.c:1145:	ch->pcdata->in_progress->text = str_dup (letter);
board.c:1156:	if (!ch->pcdata->in_progress)
board.c:1171:		if (ch->pcdata->in_progress->text)
board.c:1174:			write_to_buffer (d, ch->pcdata->in_progress->text, 0);
board.c:1183:		finish_note (ch->pcdata->board, ch->pcdata->in_progress);
board.c:1187:		ch->pcdata->in_progress = NULL;
board.c:1194:		fprintf( out, "%s\n", ch->pcdata->in_progress->text);
board.c:1218:		free_note (ch->pcdata->in_progress);
board.c:1219:		ch->pcdata->in_progress = NULL;
clan.c:58:	if (IS_VAMPIRE (ch) && ch->pcdata->wolf > 0)
clan.c:68:		REMOVE_BIT (ch->vampaff, VAM_FANGS);
clan.c:73:	SET_BIT (ch->vampaff, VAM_FANGS);
clan.c:134:		SET_BIT (ch->loc_hp[LOC_ARM_L], SLIT_WRIST);
clan.c:135:		SET_BIT (ch->loc_hp[6], BLEEDING_WRIST_L);
clan.c:174:		SET_BIT (ch->loc_hp[LOC_ARM_R], SLIT_WRIST);
clan.c:175:		SET_BIT (ch->loc_hp[6], BLEEDING_WRIST_R);
clan.c:245:	if (ch->blood[BLOOD_CURRENT] < (1 * ch->blood[BLOOD_POTENCY]))
clan.c:259:	blood = number_range (1, 3) * ch->blood[BLOOD_POTENCY];
clan.c:260:	ch->blood[BLOOD_CURRENT] -= blood;
clan.c:271:		if (!IS_NPC (victim) && victim->pcdata->dpoints < (ch->blood[2] * 1000))
clan.c:275:			if (victim->pcdata->dpoints > (ch->blood[2] * 10))
clan.c:276:				victim->pcdata->dpoints = (ch->blood[2] * 10);
clan.c:290:	int ch_gen = ch->vampgen;
clan.c:297:	if (!IS_VAMPIRE (ch) || (ch->vampgen < 1))
clan.c:306:	if (ch->vampgen == 2 && strlen (ch->clan) < 2)
clan.c:313:	if (ch->pcdata->cland[0] == -1 || ch->pcdata->cland[1] == -1 || ch->pcdata->cland[2] == -1)
clan.c:377:	if (ch->blood[BLOOD_CURRENT] < 3)
clan.c:383:	blood = number_range (1, 2) * ch->blood[BLOOD_POTENCY];
clan.c:384:	ch->blood[BLOOD_CURRENT] -= blood;
clan.c:387:	if (ch->beast > 0 && ch->beast < 100)
clan.c:388:		ch->beast += 1;
clan.c:417:	if (ch->vampgen == 1)
clan.c:418:		victim->lord = str_dup (ch->name);
clan.c:421:		sprintf (buf, "%s %s", ch->lord, ch->name);
clan.c:425:	if (strlen (ch->clan) > 1 && (IS_EXTRA (ch, EXTRA_PRINCE) || IS_EXTRA (ch, EXTRA_SIRE)))
clan.c:428:		victim->clan = str_dup (ch->clan);
clan.c:429:		if (strlen (ch->side) > 1)
clan.c:432:			victim->side = str_dup (ch->side);
clan.c:435:	REMOVE_BIT (ch->extra, EXTRA_SIRE);
clan.c:439:	if (ch->vampgen == 1)
clan.c:449:		improve = victim->pcdata->cland[0] = ch->pcdata->cland[0];
clan.c:452:		improve = victim->pcdata->cland[1] = ch->pcdata->cland[1];
clan.c:455:		improve = victim->pcdata->cland[2] = ch->pcdata->cland[2];
clan.c:485:		SET_BIT (ch->immune, IMM_VAMPIRE);
clan.c:489:	REMOVE_BIT (ch->immune, IMM_VAMPIRE);
clan.c:522:	 if ( ch->pcdata->wolfform[1] < 1 || ch->pcdata->wolfform[1] > 5)
clan.c:523:	ch->pcdata->wolfform[1] = 1;
clan.c:524:	 if ( ch->pcdata->wolfform[1] == toform )
clan.c:532:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:533:	REMOVE_BIT(ch->vampaff, VAM_DISGUISED);
clan.c:534:	REMOVE_BIT(ch->extra, EXTRA_VICISSITUDE);
clan.c:535:	REMOVE_BIT(ch->polyaff, POLY_SPIRIT);
clan.c:536:	free_string( ch->morph );
clan.c:537:	ch->morph = str_dup( "" );
clan.c:538:	free_string( ch->long_descr );
clan.c:539:	ch->morph = str_dup( "" );
clan.c:542:		if (IS_VAMPAFF(ch,VAM_CLAWS)) REMOVE_BIT(ch->vampaff, VAM_CLAWS);
clan.c:543:		if (IS_VAMPAFF(ch,VAM_FANGS)) REMOVE_BIT(ch->vampaff, VAM_FANGS);
clan.c:544:		if (IS_VAMPAFF(ch,VAM_NIGHTSIGHT)) REMOVE_BIT(ch->vampaff, VAM_NIGHTSIGHT);
clan.c:546:		free_string( ch->morph );
clan.c:547:		ch->morph = str_dup( "" );
clan.c:549:	ch->mod_attributes[ATTRIB_STR] = 0;
clan.c:550:	ch->mod_attributes[ATTRIB_DEX] = 0;
clan.c:551:	ch->mod_attributes[ATTRIB_STA] = 0;
clan.c:552:	ch->mod_attributes[ATTRIB_APP] = 0;
clan.c:553:	ch->mod_attributes[ATTRIB_MAN] = 0;
clan.c:555:	 ch->pcdata->wolfform[1] = toform;
clan.c:559:		if (IS_VAMPAFF(ch,VAM_CLAWS)) REMOVE_BIT(ch->vampaff, VAM_CLAWS);
clan.c:560:		if (IS_VAMPAFF(ch,VAM_FANGS)) REMOVE_BIT(ch->vampaff, VAM_FANGS);
clan.c:561:		if (IS_VAMPAFF(ch,VAM_NIGHTSIGHT)) REMOVE_BIT(ch->vampaff, VAM_NIGHTSIGHT);
clan.c:563:		sprintf( buf, "%s transforms into human form.\n\r", ch->name);
clan.c:565:		if(IS_SET(ch->polyaff, POLY_WOLF))
clan.c:566:		REMOVE_BIT(ch->polyaff, POLY_WOLF);
clan.c:567:		REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:569:		free_string( ch->morph );
clan.c:570:		ch->morph = str_dup( "" );
clan.c:571:		ch->pcdata->wolfform[1] = FORM_HOMID; // double check
clan.c:572:		if (ch->pcdata->wolf >= 100) ch->pcdata->wolf = 0;
clan.c:577:	if (!IS_VAMPAFF(ch,VAM_NIGHTSIGHT)) SET_BIT(ch->vampaff, VAM_NIGHTSIGHT);
clan.c:578:	if (!IS_VAMPAFF(ch,VAM_CLAWS)) SET_BIT(ch->vampaff, VAM_CLAWS);
clan.c:580:	sprintf( buf, "%s shifts into a large husky human.\n\r", ch->name);
clan.c:582:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:583:	free_string( ch->morph );
clan.c:584:	if (ch->pcdata->glabrodescshort[0] == '\0' )
clan.c:585:		ch->morph = str_dup( "a large husky human" );
clan.c:587:		ch->morph = str_dup( ch->pcdata->glabrodescshort);
clan.c:588:	ch->pcdata->wolfform[1] = FORM_GLABRO; //double check
clan.c:589:	ch->mod_attributes[ATTRIB_STR] = ch->mod_attributes[ATTRIB_STR] + 2;
clan.c:590:	ch->mod_attributes[ATTRIB_STA] = ch->mod_attributes[ATTRIB_STA] + 2;
clan.c:591:	ch->mod_attributes[ATTRIB_MAN] = ch->mod_attributes[ATTRIB_MAN] - 1;
clan.c:592:	ch->mod_attributes[ATTRIB_APP] = ch->mod_attributes[ATTRIB_APP] - 1;
clan.c:598:	if (!IS_VAMPAFF(ch,VAM_NIGHTSIGHT)) SET_BIT(ch->vampaff, VAM_NIGHTSIGHT);
clan.c:599:	if (!IS_VAMPAFF(ch,VAM_CLAWS)) SET_BIT(ch->vampaff, VAM_CLAWS);
clan.c:602:	SET_BIT(ch->vampaff, VAM_FANGS);
clan.c:605:	SET_BIT(ch->vampaff, VAM_CLAWS);
clan.c:608:	sprintf( buf, "%s shifts into a large werewolf!\n\r", ch->name);
clan.c:610:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:611:	free_string( ch->morph );
clan.c:612:	if (ch->pcdata->crinosdescshort[0] != '\0' )
clan.c:613:		ch->morph = str_dup( ch->pcdata->crinosdescshort);
clan.c:615:	 switch (ch->pcdata->cland[2])
clan.c:617:		default:  ch->morph = str_dup("a large werewolf");  break; //default
clan.c:618:		case 0:  ch->morph = str_dup("a large black and white furred werewolf"); break;	 //furies
clan.c:619:		case 1:  ch->morph = str_dup("a large and smelly mottled furred werewolf"); break;	 //gnawers
clan.c:620:		case 2:  ch->morph = str_dup("a mystical werewolf of legend"); break;	 //gaia
clan.c:621:		case 3:  ch->morph = str_dup("a large auburn colored werewolf");break;	 //fianna
clan.c:622:		case 4:  ch->morph = str_dup("a very muscular grey furred werewolf");break; //fenris
clan.c:623:		case 5:  ch->morph = str_dup("a intellegent looking werewolf");break;	 //walkers
clan.c:624:		case 6:  ch->morph = str_dup("a huge reddish-brown furred werewolf");break;	 // talons
clan.c:625:		case 7: ch->morph = str_dup("a sinister looking pitch black werewolf");break; 	 //shadow lords
clan.c:626:		case 8:  ch->morph = str_dup("a sleek bidpedal jackal-like wolf"); break;	 //striders
clan.c:627:		case 9:  ch->morph = str_dup("a noble-looking silver werewolf"); break;	 //silverf
clan.c:628:		case 10:  ch->morph = str_dup("a large slate grey furred werewolf"); break;	 //gazers
clan.c:629:		case 11:  ch->morph = str_dup("a huge broad shouldered werewolf"); break;	 //uktena
clan.c:630:		case 12:  ch->morph = str_dup("a large reddish black furred werewolf"); break;	 //wendigo
clan.c:632:	ch->pcdata->wolfform[1] = FORM_CRINOS; //double check
clan.c:633:	ch->mod_attributes[ATTRIB_STR] = ch->mod_attributes[ATTRIB_STR] + 4;
clan.c:634:	ch->mod_attributes[ATTRIB_DEX] = ch->mod_attributes[ATTRIB_DEX] + 1;
clan.c:635:	ch->mod_attributes[ATTRIB_STA] = ch->mod_attributes[ATTRIB_STA] + 3;
clan.c:636:	ch->mod_attributes[ATTRIB_APP] = ch->mod_attributes[ATTRIB_APP] - 5;
clan.c:637:	ch->mod_attributes[ATTRIB_MAN] = ch->mod_attributes[ATTRIB_MAN] - 5;
clan.c:642:	if (!IS_VAMPAFF(ch,VAM_NIGHTSIGHT)) SET_BIT(ch->vampaff, VAM_NIGHTSIGHT);
clan.c:643:		if (!IS_VAMPAFF(ch,VAM_FANGS)) SET_BIT(ch->vampaff, VAM_FANGS);
clan.c:644:	if (!IS_VAMPAFF(ch,VAM_CLAWS)) SET_BIT(ch->vampaff, VAM_CLAWS);
clan.c:647:	sprintf( buf, "%s shifts into a large, shaggy wolf.\n\r", ch->name);
clan.c:650:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:651:	free_string( ch->morph );
clan.c:652:	if (ch->pcdata->hispodescshort[0] != '\0' )
clan.c:653:		ch->morph = str_dup( ch->pcdata->hispodescshort);
clan.c:655:		 switch (ch->pcdata->cland[2])
clan.c:657:		default:  ch->morph = str_dup("a dire wolf");  break; //default
clan.c:658:		case 0:  ch->morph = str_dup("a large black and white furred dire wolf"); break;	 //furies
clan.c:659:		case 1:  ch->morph = str_dup("a smelly mottled furred wolf"); break;	 //gnawers
clan.c:660:		case 2:  ch->morph = str_dup("A non-aggressive looking dire wolf"); break;	 //gaia
clan.c:661:		case 3:  ch->morph = str_dup("a large dire wolf with auburn fur");break;	 //fianna
clan.c:662:		case 4:  ch->morph = str_dup("a hulking grey furred dire wolf");break; //fenris
clan.c:663:		case 5:  ch->morph = str_dup("a domesticated looking dire wolf");break;	 //walkers
clan.c:664:		case 6:  ch->morph = str_dup("a large reddish-brown dire wolf");break;	 // talons
clan.c:665:		case 7: ch->morph = str_dup("a large pitch black dire wolf");break; 	 //shadow lords
clan.c:666:		case 8:  ch->morph = str_dup("a large jackal-like wolf"); break;	 //striders
clan.c:667:		case 9:  ch->morph = str_dup("a large silver furred dire wolf"); break;	 //silverf
clan.c:668:		case 10:  ch->morph = str_dup("a slate grey furred dire wolf"); break;	 //gazers
clan.c:669:		case 11:  ch->morph = str_dup("a giant timber wolf"); break;	 //uktena
clan.c:670:		case 12:  ch->morph = str_dup("a large reddish black furred wolf"); break;	 //wendigo
clan.c:672:	ch->mod_attributes[ATTRIB_STR] = ch->mod_attributes[ATTRIB_STR] + 3;
clan.c:673:	ch->mod_attributes[ATTRIB_DEX] = ch->mod_attributes[ATTRIB_DEX] + 2;
clan.c:674:	ch->mod_attributes[ATTRIB_STA] = ch->mod_attributes[ATTRIB_STA] + 3;
clan.c:675:	ch->mod_attributes[ATTRIB_MAN] = ch->mod_attributes[ATTRIB_MAN] - 5;
clan.c:677:	ch->pcdata->wolfform[1] = FORM_HISPO; //double check
clan.c:682:		if (!IS_VAMPAFF(ch,VAM_NIGHTSIGHT)) SET_BIT(ch->vampaff, VAM_NIGHTSIGHT);
clan.c:683:		if (!IS_VAMPAFF(ch,VAM_FANGS)) SET_BIT(ch->vampaff, VAM_FANGS);
clan.c:684:		if (!IS_VAMPAFF(ch,VAM_CLAWS)) SET_BIT(ch->vampaff, VAM_CLAWS);
clan.c:687:		sprintf( buf, "%s transforms into a wolf.\n\r", ch->name);
clan.c:690:		SET_BIT(ch->polyaff, POLY_WOLF);
clan.c:691:		SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:692:		free_string( ch->morph );
clan.c:693:	if (ch->pcdata->lupusdescshort[0] != '\0' )
clan.c:694:		ch->morph = str_dup( ch->pcdata->lupusdescshort);
clan.c:696:	 switch (ch->pcdata->cland[2])
clan.c:698:		default:  ch->morph = str_dup("a wolf");  break; //default
clan.c:699:		case 0:  ch->morph = str_dup("a medium sized black and white furred wolf"); break;	 //furies
clan.c:700:		case 1:  ch->morph = str_dup("a small, stinky mutt of a wolf"); break;	 //gnawers
clan.c:701:		case 2:  ch->morph = str_dup("a placid looking wolf"); break;	 //gaia
clan.c:702:		case 3:  ch->morph = str_dup("a medium sized auburn colored wolf");break;	 //fianna
clan.c:703:		case 4:  ch->morph = str_dup("a large grey furred wolf");break; //fenris
clan.c:704:		case 5:  ch->morph = str_dup("a intellegent looking wolf");break;	 //walkers
clan.c:705:		case 6:  ch->morph = str_dup("a ferocious looking reddish-brown wolf");break;	 // talons
clan.c:706:		case 7: ch->morph = str_dup("a average sized pitch-black wolf");break; 	 //shadow lords
clan.c:707:		case 8:  ch->morph = str_dup("a sleek jackal-like wolf"); break;	 //striders
clan.c:708:		case 9:  ch->morph = str_dup("a silver furred wolf"); break;	 //silverf
clan.c:709:		case 10:  ch->morph = str_dup("a slate grey furred wolf"); break;	 //gazers
clan.c:710:		case 11:  ch->morph = str_dup("A large timber wolf"); break;	 //uktena
clan.c:711:		case 12:  ch->morph = str_dup("a reddish black furred wolf"); break;	 //wendigo
clan.c:713:	ch->mod_attributes[ATTRIB_STR] = ch->mod_attributes[ATTRIB_STR] + 1;
clan.c:714:	ch->mod_attributes[ATTRIB_DEX] = ch->mod_attributes[ATTRIB_DEX] + 2;
clan.c:715:	ch->mod_attributes[ATTRIB_STA] = ch->mod_attributes[ATTRIB_STA] + 2;
clan.c:716:	ch->mod_attributes[ATTRIB_MAN] = ch->mod_attributes[ATTRIB_MAN] - 5;
clan.c:717:		ch->pcdata->wolfform[1] = FORM_LUPUS;
clan.c:785:		if (ch->vampgen <= 2)
clan.c:788:			improve = ch->pcdata->cland[0];
clan.c:793:			improve = ch->pcdata->cland[1];
clan.c:798:			improve = ch->pcdata->cland[2];
clan.c:805:			improve = ch->pcdata->cland[0];
clan.c:810:			improve = ch->pcdata->cland[1];
clan.c:815:			improve = ch->pcdata->cland[2];
clan.c:820:		if (ch->pcdata->cland[2] >= 0)
clan.c:827:			if (ch->pcdata->powers[sn] != 0)
clan.c:918:	if (ch->pcdata->cland[0] == improve || ch->pcdata->cland[1] == improve || ch->pcdata->cland[2] == improve)
clan.c:924:	if (ch->vampgen < 3 || ch->class != CLASS_VAMPIRE)
clan.c:926:		if (ch->pcdata->cland[0] < 0)
clan.c:927:			ch->pcdata->cland[0] = improve;
clan.c:928:		else if (ch->pcdata->cland[1] < 0)
clan.c:929:			ch->pcdata->cland[1] = improve;
clan.c:930:		else if (ch->pcdata->cland[2] < 0)
clan.c:931:			ch->pcdata->cland[2] = improve;
clan.c:937:		ch->pcdata->powers[improve] = -1;
clan.c:942:		if (ch->pcdata->cland[2] < 0)
clan.c:943:			ch->pcdata->cland[2] = improve;
clan.c:949:		ch->pcdata->powers[improve] = -1;
clan.c:985:			SET_BIT (ch->affected_by, AFF_SHADOWPLANE);
clan.c:989:		REMOVE_BIT (ch->affected_by, AFF_SHADOWPLANE);
clan.c:1007:		obj_to_room (obj, ch->in_room);
clan.c:1014:		obj_to_room (obj, ch->in_room);
clan.c:1032:			ch->pcdata->powers_mod[disc] += 10;
clan.c:1035:			REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
clan.c:1036:			REMOVE_BIT (ch->vampaff, VAM_DISGUISED);
clan.c:1037:			REMOVE_BIT (ch->extra, EXTRA_VICISSITUDE);
clan.c:1038:			REMOVE_BIT (ch->polyaff, POLY_SPIRIT);
clan.c:1039:			free_string (ch->morph);
clan.c:1040:			ch->morph = str_dup ("");
clan.c:1041:			free_string (ch->long_descr);
clan.c:1042:			ch->morph = str_dup ("");
clan.c:1050:		if (IS_SET (ch->act, PLR_HOLYLIGHT))
clan.c:1054:			ch->pcdata->obeah = 0;
clan.c:1056:		ch->pcdata->wolf = 0;
clan.c:1058:			ch->pcdata->powers_mod[disc] -= 10;
clan.c:1076:	if (IS_SET (ch->act, PLR_WOLFMAN))
clan.c:1078:	if (ch->pcdata->wolfform[1] != FORM_HOMID)
clan.c:1083:		REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
clan.c:1084:		REMOVE_BIT (ch->vampaff, VAM_DISGUISED);
clan.c:1085:		REMOVE_BIT (ch->extra, EXTRA_VICISSITUDE);
clan.c:1086:		REMOVE_BIT (ch->polyaff, POLY_SPIRIT);
clan.c:1087:		free_string (ch->morph);
clan.c:1088:		ch->morph = str_dup ("");
clan.c:1089:		free_string (ch->long_descr);
clan.c:1090:		ch->morph = str_dup ("");
clan.c:1092:	SET_BIT (ch->act, PLR_WOLFMAN);
clan.c:1100:	ch->mod_attributes[ATTRIB_STR] = ch->mod_attributes[ATTRIB_STR] + 4;
clan.c:1101:	ch->mod_attributes[ATTRIB_DEX] = ch->mod_attributes[ATTRIB_DEX] + 1;
clan.c:1102:	ch->mod_attributes[ATTRIB_STA] = ch->mod_attributes[ATTRIB_STA] + 3;
clan.c:1103:	ch->mod_attributes[ATTRIB_APP] = ch->mod_attributes[ATTRIB_APP] - 11;
clan.c:1104:	ch->mod_attributes[ATTRIB_MAN] = ch->mod_attributes[ATTRIB_MAN] - 3;
clan.c:1111:		SET_BIT (ch->vampaff, VAM_FANGS);
clan.c:1125:		SET_BIT (ch->vampaff, VAM_CLAWS);
clan.c:1128:	SET_BIT (ch->affected_by, AFF_POLYMORPH);
clan.c:1129:	SET_BIT (ch->vampaff, VAM_DISGUISED);
clan.c:1130:	ch->pcdata->wolfform[1] = FORM_CRINOS;
clan.c:1135:		sprintf (buf, "%s the huge werewolf", ch->name);
clan.c:1137:	free_string (ch->morph);
clan.c:1138:	ch->morph = str_dup (buf);
clan.c:1139:	ch->pcdata->wolf += 25;
clan.c:1141:		ch->pcdata->wolf = 300;
clan.c:1142:	else if (ch->pcdata->wolf > 300)
clan.c:1143:		ch->pcdata->wolf = 300;
clan.c:1147:		vch_next = vch->next;
clan.c:1148:		if (vch->in_room == NULL)
clan.c:1155:		if (!IS_NPC (vch) && vch->pcdata->chobj != NULL)
clan.c:1159:			if (vch->in_room == ch->in_room)
clan.c:1161:			else if (vch->in_room->area == ch->in_room->area)
clan.c:1182:	if (!IS_SET (ch->act, PLR_WOLFMAN))
clan.c:1184:	REMOVE_BIT (ch->act, PLR_WOLFMAN);
clan.c:1185:	ch->pcdata->wolfform[1] = FORM_HOMID;
clan.c:1186:	free_string (ch->morph);
clan.c:1189:		ch->morph = str_dup ("a huge black monster");
clan.c:1192:		ch->morph = str_dup ("");
clan.c:1193:		REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
clan.c:1194:		REMOVE_BIT (ch->vampaff, VAM_DISGUISED);
clan.c:1209:		REMOVE_BIT (ch->vampaff, VAM_CLAWS);
clan.c:1215:		REMOVE_BIT (ch->vampaff, VAM_FANGS);
clan.c:1220:	ch->pcdata->wolf -= 25;
clan.c:1223:	ch->mod_attributes[ATTRIB_STR] = ch->mod_attributes[ATTRIB_STR] - 4;
clan.c:1224:	ch->mod_attributes[ATTRIB_DEX] = ch->mod_attributes[ATTRIB_DEX] - 1;
clan.c:1225:	ch->mod_attributes[ATTRIB_STA] = ch->mod_attributes[ATTRIB_STA] - 3;
clan.c:1226:	ch->mod_attributes[ATTRIB_APP] = ch->mod_attributes[ATTRIB_APP] + 11;
clan.c:1227:	ch->mod_attributes[ATTRIB_MAN] = ch->mod_attributes[ATTRIB_MAN] + 3;
clan.c:1231:	if (ch->pcdata->wolf < 0)
clan.c:1232:		ch->pcdata->wolf = 0;
clan.c:1257:		if (ch->vampgen == 3)
clan.c:1289:	if (ch->class != victim->class)
clan.c:1297:		if (ch->vampgen != 4 && !IS_EXTRA (ch, EXTRA_PRINCE))
clan.c:1336:		if (ch->vampgen != 3)
clan.c:1357:		if (ch->vampgen != 2)
clan.c:1378:		if (ch->vampgen > 4 && !IS_EXTRA (ch, EXTRA_PRINCE) && !IS_WEREWOLF (ch))
clan.c:1388:		if (ch->vampgen > victim->vampgen)
clan.c:1409:		victim->clan = str_dup (ch->clan);
clan.c:1410:		victim->pcdata->cland[2] = gifts = ch->pcdata->cland[2];	//gives you inductors clan gift
clan.c:1416:		if (ch->vampgen > 4 && !IS_EXTRA (ch, EXTRA_PRINCE))
clan.c:1421:		if (IS_EXTRA (victim, EXTRA_PRINCE) && ch->vampgen != 2)
clan.c:1429:		if (ch->vampgen >= victim->vampgen)
clan.c:1522:			if (ch->pcdata->powers[sn] == 0)
clan.c:1648:			if ((ch->class == CLASS_VAMPIRE || ch->class == CLASS_INQUISITOR) && (ch->pcdata->cland[0] == sn || ch->pcdata->cland[1] == sn || ch->pcdata->cland[2] == sn))
clan.c:1751:	if (ch->pcdata->powers[improve] == 0)
clan.c:1757:	switch (ch->vampgen)
clan.c:1814:	if (ch->pcdata->powers[improve] >= max_d)
clan.c:1820:	if (ch->pcdata->cland[0] == improve || ch->pcdata->cland[1] == improve || ch->pcdata->cland[2] == improve)
clan.c:1822:		if (ch->pcdata->powers[improve] == -1)
clan.c:1825:			cost = (ch->pcdata->powers[improve]) * 5;
clan.c:1829:		if (ch->pcdata->powers[improve] == -1)
clan.c:1832:			cost = (ch->pcdata->powers[improve]) * 7;
clan.c:1835:	if (ch->exp < cost)
clan.c:1837:		sprintf (buf, "You need another %d exp to increase that discipline.\n\r", cost - ch->exp);
clan.c:1842:	if (ch->pcdata->powers[improve] < 1)
clan.c:1843:		ch->pcdata->powers[improve] = 1;
clan.c:1845:		ch->pcdata->powers[improve]++;
clan.c:1847:	ch->exp -= cost;
clan.c:1891:			if (ch->pcdata->powers[sn] == 0)
clan.c:2016:			sprintf (buf, "%-15s: %-2d       ", disc, ch->pcdata->powers[sn]);
clan.c:2130:	if (ch->pcdata->powers[improve] == 0)
clan.c:2136:	if (ch->pcdata->powers[improve] < 3)
clan.c:2189:	if ((victim = ch->embrace) != NULL && victim->embrace != NULL && victim->embrace == ch)
clan.c:2191:		if (ch->embraced == ARE_EMBRACED)
clan.c:2196:		if (number_percent () < ch->beast && ch->blood[0] < ch->blood[1])
clan.c:2210:		ch->embrace = NULL;
clan.c:2211:		ch->embraced = ARE_NONE;
clan.c:2270:		ch->hit -= dam;
clan.c:2271:		ch->agg += dam * 0.005;
clan.c:2278:		ch->hit -= dam;
clan.c:2279:		ch->agg += dam * 0.005;
clan.c:2300:	if (ch->position < POS_STANDING)
clan.c:2310:	ch->embrace = victim;
clan.c:2311:	ch->embraced = ARE_EMBRACING;
clan.c:2324:	switch (ch->vampgen)
clan.c:2327:		ch->blood[BLOOD_POOL] = 10;
clan.c:2328:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2331:		ch->blood[BLOOD_POOL] = 100;
clan.c:2332:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2334:		ch->blood[BLOOD_POOL] = 75;
clan.c:2335:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2338:		ch->blood[BLOOD_POOL] = 60;
clan.c:2339:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2342:		ch->blood[BLOOD_POOL] = 50;
clan.c:2343:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2346:		ch->blood[BLOOD_POOL] = 40;
clan.c:2347:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2350:		ch->blood[BLOOD_POOL] = 30;
clan.c:2351:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2354:		ch->blood[BLOOD_POOL] = 20;
clan.c:2355:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2358:		ch->blood[BLOOD_POOL] = 15;
clan.c:2359:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2362:		ch->blood[BLOOD_POOL] = 14;
clan.c:2363:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2366:		ch->blood[BLOOD_POOL] = 13;
clan.c:2367:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2370:		ch->blood[BLOOD_POOL] = 12;
clan.c:2371:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2374:		ch->blood[BLOOD_POOL] = 11;
clan.c:2375:		ch->blood[BLOOD_POTENCY] = 1;
clan.c:2555:		if (ch->pcdata->powers[sn] > 0)
clan.c:2557://			disc = (1 + ch->pcdata->powers[sn]) * 0.5;
clan.c:2616:				REMOVE_BIT (ch->loc_hp[6], BLEEDING_WRIST_L);
clan.c:2617:				REMOVE_BIT (ch->loc_hp[LOC_ARM_L], SLIT_WRIST);
clan.c:2629:				REMOVE_BIT (ch->loc_hp[6], BLEEDING_WRIST_R);
clan.c:2630:				REMOVE_BIT (ch->loc_hp[LOC_ARM_R], SLIT_WRIST);
clan.c:2673:		free_string( ch->pcdata->lupusdescshort );
clan.c:2674:		ch->pcdata->lupusdescshort = str_dup( arg2 );
clan.c:2681:		free_string( ch->pcdata->crinosdescshort );
clan.c:2682:		ch->pcdata->crinosdescshort = str_dup( arg2 );
clan.c:2691:		free_string( ch->pcdata->hispodescshort );
clan.c:2692:		ch->pcdata->hispodescshort = str_dup( arg2 );
clan.c:2700:		free_string( ch->pcdata->glabrodescshort );
clan.c:2701:		ch->pcdata->glabrodescshort = str_dup( arg2 );
clan.c:2707:	sprintf( buf, "Lupus form short description: %s\n\r", ch->pcdata->lupusdescshort );
clan.c:2709:	sprintf( buf, "Crinos form short description: %s\n\r", ch->pcdata->crinosdescshort );
clan.c:2711:	sprintf( buf, "Hispo form short description: %s\n\r", ch->pcdata->hispodescshort );
clan.c:2713:	sprintf( buf, "Glabro form short description: %s\n\r", ch->pcdata->glabrodescshort );
clan.c:2719:		ch->pcdata->lupusdescshort);
clan.c:2722:		ch->pcdata->hispodescshort);
clan.c:2725:		ch->pcdata->glabrodescshort);
clan.c:2728:		ch->pcdata->crinosdescshort);
clan.c:2734:		ch->pcdata->hispodescshort);
comm.c:743:      vch_next = vch->next;
comm.c:1141:    sprintf( log_buf, "Closing link to %s.", ch->name );
comm.c:1145:      if (IS_NPC(ch) || ch->pcdata->obj_vnum == 0)
comm.c:1147:      ch->desc = NULL;
comm.c:1210:      ch->desc = NULL;
comm.c:1472:      if (IS_SET (ch->act, PLR_BLANK))
comm.c:1475:      if (IS_SET (ch->act, PLR_PROMPT) && IS_EXTRA (ch, EXTRA_PROMPT) && ch->desc->editor != ED_REDITOR)
comm.c:1477:      else if (IS_SET (ch->act, PLR_PROMPT) && ch->desc->editor != ED_REDITOR)
comm.c:1497:	if (ch->pcdata->language[0] == LANG_ENGLISH)
comm.c:1499:	else if (ch->pcdata->language[0] == LANG_ARABIC)
comm.c:1501:	else if (ch->pcdata->language[0] == LANG_ANIMAL)
comm.c:1503:	else if (ch->pcdata->language[0] == LANG_FRENCH)
comm.c:1505:	else if (ch->pcdata->language[0] == LANG_ITALIAN)
comm.c:1507:	else if (ch->pcdata->language[0] == LANG_SPANISH)
comm.c:1509:	else if (ch->pcdata->language[0] == LANG_LATIN)
comm.c:1511:	else if (ch->pcdata->language[0] == LANG_HEBREW)
comm.c:1513:	else if (ch->pcdata->language[0] == LANG_GAELIC)
comm.c:1515:	else if (ch->pcdata->language[0] == LANG_EGYPTIAN)
comm.c:1517:	else if (ch->pcdata->language[0] == LANG_GREEK)
comm.c:1519:	else if (ch->pcdata->language[0] == LANG_SLAVIC)
comm.c:1521:	else if (ch->pcdata->language[0] == LANG_GAROU)
comm.c:1523:	else if (ch->pcdata->language[0] == LANG_GERMAN)
comm.c:1525:	else if (ch->pcdata->language[0] == LANG_RUSSIAN)
comm.c:1527:	else if (ch->pcdata->language[0] == LANG_NORSE)
comm.c:1529:	else if (ch->pcdata->language[0] == LANG_WYRM)
comm.c:1535:            sprintf (exp_str, "%d", ch->exp);
comm.c:1536:            COL_SCALE (exp_str, ch, ch->exp, 100);
comm.c:1539:         else if (ch->position == POS_FIGHTING)
comm.c:1541:            victim = ch->fighting;
comm.c:1582:            sprintf (hit_str, "%d", ch->hit);
comm.c:1583:            COL_SCALE (hit_str, ch, ch->hit, ch->max_hit);
comm.c:1588:            sprintf (hit_str, "%d", ch->hit);
comm.c:1589:            COL_SCALE (hit_str, ch, ch->hit, ch->max_hit);
comm.c:1590:            sprintf (exp_str, "%d", ch->exp);
comm.c:1591:            COL_SCALE (exp_str, ch, ch->exp, 100);
comm.c:1592:            sprintf (qp_str, "%d", ch->quintessence);
comm.c:1593:            COL_SCALE (qp_str, ch, ch->quintessence,ch->max_quintessence);
comm.c:1595:            sprintf (wpmin, "%d", ch->pcdata->willpower[WILLPOWER_CURRENT]);
comm.c:1596:            COL_SCALE (exp_str, ch, ch->pcdata->willpower[WILLPOWER_CURRENT], 100);
comm.c:1598:            sprintf (wpmax, "%d", ch->pcdata->willpower[WILLPOWER_MAX]);
comm.c:1599:            COL_SCALE (exp_str, ch, ch->pcdata->willpower[WILLPOWER_MAX], 100);
comm.c:1601:               sprintf (gnosismin, "%d", ch->pcdata->gnosis[0]);
comm.c:1602:            COL_SCALE (exp_str, ch, ch->pcdata->gnosis[0], 100);
comm.c:1603:               sprintf (gnosismax, "%d", ch->pcdata->gnosis[1]);
comm.c:1604:            COL_SCALE (exp_str, ch, ch->pcdata->gnosis[1], 100);
comm.c:1605:               sprintf (ragemin, "%d", ch->pcdata->rage[0]);
comm.c:1606:            COL_SCALE (exp_str, ch, ch->pcdata->rage[0], 100);
comm.c:1607:               sprintf (ragemax, "%d", ch->pcdata->rage[1]);
comm.c:1608:            COL_SCALE (exp_str, ch, ch->pcdata->rage[1], 100);
comm.c:1609:               sprintf (bloodmax, "%d", ch->blood[BLOOD_CURRENT]);
comm.c:1610:            COL_SCALE (exp_str, ch, ch->blood[BLOOD_CURRENT], 100);
comm.c:1611:               sprintf (bloodmin, "%d", ch->blood[BLOOD_POOL]);
comm.c:1612:            COL_SCALE (exp_str, ch, ch->blood[BLOOD_POOL], 100);
comm.c:1614:	      sprintf (convcurrent, "%d", ch->pcdata->conviction[CONVICTION_CURRENT]);
comm.c:1615:	    COL_SCALE (exp_str, ch, ch->pcdata->conviction[CONVICTION_CURRENT], 100);
comm.c:1640:                     if ((ch->pcdata->wolfform[1] == FORM_GLABRO))
comm.c:1642:                     if ((ch->pcdata->wolfform[1] == FORM_CRINOS))
comm.c:1644:                     if ((ch->pcdata->wolfform[1] == FORM_HISPO))
comm.c:1646:                     if ((ch->pcdata->wolfform[1] == FORM_LUPUS))
comm.c:1675:      if (IS_SET (ch->act, PLR_TELNET_GA))
comm.c:2487:      if (!IS_NPC (ch) && ch->pcdata->denydate > 0)
comm.c:2491:            sprintf (log_buf, "Denying access to %s@%s.", argument, ch->lasthost);
comm.c:2516:               if (!IS_NPC (dcheck->character) && ch->level < LEVEL_MORTAL && strlen (dcheck->character->name) > 0 && !str_cmp (dcheck->character->name, ch->name))
comm.c:2568:      if (ch == NULL || (!IS_EXTRA (ch, EXTRA_NEWPASS) && strcmp (argument, ch->pcdata->pwd) && strcmp (crypt (argument, ch->pcdata->pwd), ch->pcdata->pwd)))
comm.c:2574:      else if (ch == NULL || (IS_EXTRA (ch, EXTRA_NEWPASS) && strcmp (crypt (argument, crypt_pwd), crypt_pwd) && strcmp (crypt (argument, ch->pcdata->pwd), ch->pcdata->pwd)))
comm.c:2583:      if (check_reconnect (d, ch->name, TRUE))
comm.c:2586:      if (check_playing (d, ch->name))
comm.c:2589:      if (ch->level > 1)
comm.c:2591:         strcpy (kav, ch->name);
comm.c:2604:      if (ch->lasthost != NULL)
comm.c:2605:         free_string (ch->lasthost);
comm.c:2606:      if (ch->desc != NULL && ch->desc->host != NULL)
comm.c:2608:         ch->lasthost = str_dup (ch->desc->host);
comm.c:2611:         ch->lasthost = str_dup ("(unknown)");
comm.c:2613:      if (strlen (ch->lasttime) >= 11)
comm.c:2615:         lasttime = str_dup (ch->lasttime);
comm.c:2623:      free_string (ch->lasttime);
comm.c:2624:      ch->lasttime = str_dup (strtime);
comm.c:2625:      sprintf (log_buf, "%s@%s has connected.", ch->name, ch->lasthost);
comm.c:2628:        if (ch->pcdata->email[0]=='\0')
comm.c:2637:         if( !str_cmp( ch->pcdata->email, eban->name ) )
comm.c:2648:      if (ch->level > 3 && ch->trust == 0)
comm.c:2649:         ch->level = 3;
comm.c:2652:         if (ch->level > MAX_LEVEL)
comm.c:2653:            ch->level = MAX_LEVEL;
comm.c:2654:         if (ch->trust > MAX_LEVEL)
comm.c:2655:            ch->trust = MAX_LEVEL;
comm.c:2658:      if (ch->level >= 7)
comm.c:2680:      free_string( ch->pcdata->email );
comm.c:2681:      ch->pcdata->email = str_dup(argument);
comm.c:2685:         if( !str_cmp( ch->pcdata->email, eban->name ) )
comm.c:2697:      if (ch->level > 3 && ch->trust == 0)
comm.c:2698:         ch->level = 3;
comm.c:2701:         if (ch->level > MAX_LEVEL)
comm.c:2702:            ch->level = MAX_LEVEL;
comm.c:2703:         if (ch->trust > MAX_LEVEL)
comm.c:2704:            ch->trust = MAX_LEVEL;
comm.c:2707:      if (ch->level >= 7)
comm.c:2722:         SET_BIT (ch->act, PLR_WIZINVIS);
comm.c:2723:         SET_BIT (ch->act, PLR_INCOG);
comm.c:2732:         REMOVE_BIT (ch->act, PLR_WIZINVIS);
comm.c:2733:         REMOVE_BIT (ch->act, PLR_INCOG);
comm.c:2792:       sprintf(buf, "Enter a password for %s: ", ch->name);
comm.c:2822:      pwdnew = crypt (argument, ch->name);
comm.c:2833:      free_string (ch->pcdata->pwd);
comm.c:2834:      ch->pcdata->pwd = str_dup (pwdnew);
comm.c:2845:      if (strcmp (crypt (argument, ch->pcdata->pwd), ch->pcdata->pwd))
comm.c:2862:         ch->sex = SEX_MALE;
comm.c:2866:         ch->sex = SEX_FEMALE;
comm.c:2889:      free_string( ch->pcdata->email );
comm.c:2890:      ch->pcdata->email = str_dup(argument);
comm.c:2894:         if( !str_cmp( ch->pcdata->email, eban->name ) )
comm.c:2913:         SET_BIT (ch->act, PLR_ANSI);
comm.c:2928:      if (ch->level == 0)
comm.c:2930:         ch->attributes[ATTRIB_STR] = 1;
comm.c:2931:         ch->attributes[ATTRIB_DEX] = 1;
comm.c:2932:         ch->attributes[ATTRIB_STA] = 1;
comm.c:2933:         ch->attributes[ATTRIB_CHA] = 1;
comm.c:2934:         ch->attributes[ATTRIB_MAN] = 1;
comm.c:2935:         ch->attributes[ATTRIB_APP] = 1;
comm.c:2936:         ch->attributes[ATTRIB_PER] = 1;
comm.c:2937:         ch->attributes[ATTRIB_INT] = 1;
comm.c:2938:         ch->attributes[ATTRIB_WIT] = 1;
comm.c:2940:      ch->pcdata->board = NULL;
comm.c:2964:      ch->pcdata->stat_groups[0] = *argument;
comm.c:2973:      if (*argument == ch->pcdata->stat_groups[0])
comm.c:2993:      ch->pcdata->stat_groups[1] = *argument;
comm.c:2994:      if ((ch->pcdata->stat_groups[0] == 'p' && ch->pcdata->stat_groups[1] == 'm') || (ch->pcdata->stat_groups[0] == 'm' && ch->pcdata->stat_groups[1] == 'p'))
comm.c:2995:         ch->pcdata->stat_groups[2] = 's';
comm.c:2996:      else if ((ch->pcdata->stat_groups[0] == 'p' && ch->pcdata->stat_groups[1] == 's') || (ch->pcdata->stat_groups[0] == 's' && ch->pcdata->stat_groups[1] == 'p'))
comm.c:2997:         ch->pcdata->stat_groups[2] = 'm';
comm.c:2998:      else if ((ch->pcdata->stat_groups[0] == 's' && ch->pcdata->stat_groups[1] == 'm') || (ch->pcdata->stat_groups[0] == 'm' && ch->pcdata->stat_groups[1] == 's'))
comm.c:2999:         ch->pcdata->stat_groups[2] = 'p';
comm.c:3001:      if (ch->pcdata->stat_groups[0] == 'p')
comm.c:3003:      if (ch->pcdata->stat_groups[0] == 's')
comm.c:3005:      if (ch->pcdata->stat_groups[0] == 'm')
comm.c:3011:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[0 + 3 * j]; stat_display_counter++)
comm.c:3017:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[1 + 3 * j]; stat_display_counter++)
comm.c:3023:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[2 + 3 * j]; stat_display_counter++)
comm.c:3029:      for (stat_display_counter = 0; stat_display_counter < points_distribution[0] - (ch->attributes[0 + 3 * j] + ch->attributes[1 + 3 * j] + ch->attributes[0 + 3 * j]); stat_display_counter++)
comm.c:3045:      if (ch->pcdata->stat_groups[0] == 'p')
comm.c:3047:      else if (ch->pcdata->stat_groups[0] == 's')
comm.c:3049:      else if (ch->pcdata->stat_groups[0] == 'm')
comm.c:3054:         if (ch->attributes[0 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3059:         ch->attributes[0 + 3 * j]++;
comm.c:3062:         if (ch->attributes[0 + 3 * j] == 1)
comm.c:3067:         ch->attributes[0 + 3 * j]--;
comm.c:3070:         if (ch->attributes[1 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3075:         ch->attributes[1 + 3 * j]++;
comm.c:3078:         if (ch->attributes[1 + 3 * j] == 1)
comm.c:3083:         ch->attributes[1 + 3 * j]--;
comm.c:3086:         if (ch->attributes[2 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3091:         ch->attributes[2 + 3 * j]++;
comm.c:3094:         if (ch->attributes[2 + 3 * j] == 1)
comm.c:3099:         ch->attributes[2 + 3 * j]--;
comm.c:3104:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[0 + 3 * j]; stat_display_counter++)
comm.c:3110:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[1 + 3 * j]; stat_display_counter++)
comm.c:3116:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[2 + 3 * j]; stat_display_counter++)
comm.c:3122:      for (stat_display_counter = 0; stat_display_counter < points_distribution[0] - (ch->attributes[0 + 3 * j] + ch->attributes[1 + 3 * j] + ch->attributes[2 + 3 * j]); stat_display_counter++)
comm.c:3134:      if (points_distribution[0] - (ch->attributes[0 + 3 * j] + ch->attributes[1 + 3 * j] + ch->attributes[2 + 3 * j]) <= 0)
comm.c:3146:      if (ch->pcdata->stat_groups[1] == 'p')
comm.c:3148:      else if (ch->pcdata->stat_groups[1] == 's')
comm.c:3150:      else if (ch->pcdata->stat_groups[1] == 'm')
comm.c:3155:         if (ch->attributes[0 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3160:         ch->attributes[0 + 3 * j]++;
comm.c:3163:         if (ch->attributes[0 + 3 * j] == 1)
comm.c:3168:         ch->attributes[0 + 3 * j]--;
comm.c:3171:         if (ch->attributes[1 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3176:         ch->attributes[1 + 3 * j]++;
comm.c:3179:         if (ch->attributes[1 + 3 * j] == 1)
comm.c:3184:         ch->attributes[1 + 3 * j]--;
comm.c:3187:         if (ch->attributes[2 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3192:         ch->attributes[2 + 3 * j]++;
comm.c:3195:         if (ch->attributes[2 + 3 * j] == 1)
comm.c:3200:         ch->attributes[2 + 3 * j]--;
comm.c:3205:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[0 + 3 * j]; stat_display_counter++)
comm.c:3211:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[1 + 3 * j]; stat_display_counter++)
comm.c:3217:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[2 + 3 * j]; stat_display_counter++)
comm.c:3223:      for (stat_display_counter = 0; stat_display_counter < points_distribution[1] - (ch->attributes[0 + 3 * j] + ch->attributes[1 + 3 * j] + ch->attributes[2 + 3 * j]); stat_display_counter++)
comm.c:3236:      if (points_distribution[1] - (ch->attributes[0 + 3 * j] + ch->attributes[1 + 3 * j] + ch->attributes[2 + 3 * j]) <= 0)
comm.c:3248:      if (ch->pcdata->stat_groups[2] == 'p')
comm.c:3250:      else if (ch->pcdata->stat_groups[2] == 's')
comm.c:3252:      else if (ch->pcdata->stat_groups[2] == 'm')
comm.c:3257:         if (ch->attributes[0 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3262:         ch->attributes[0 + 3 * j]++;
comm.c:3265:         if (ch->attributes[0 + 3 * j] == 1)
comm.c:3270:         ch->attributes[0 + 3 * j]--;
comm.c:3273:         if (ch->attributes[1 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3278:         ch->attributes[1 + 3 * j]++;
comm.c:3281:         if (ch->attributes[1 + 3 * j] == 1)
comm.c:3286:         ch->attributes[1 + 3 * j]--;
comm.c:3289:         if (ch->attributes[2 + 3 * j] == MAX_CHAR_CREATION_ATTRIB)
comm.c:3294:         ch->attributes[2 + 3 * j]++;
comm.c:3297:         if (ch->attributes[2 + 3 * j] == 1)
comm.c:3302:         ch->attributes[2 + 3 * j]--;
comm.c:3307:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[0 + 3 * j]; stat_display_counter++)
comm.c:3313:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[1 + 3 * j]; stat_display_counter++)
comm.c:3319:      for (stat_display_counter = 0; stat_display_counter < ch->attributes[2 + 3 * j]; stat_display_counter++)
comm.c:3325:      for (stat_display_counter = 0; stat_display_counter < points_distribution[2] - (ch->attributes[0 + 3 * j] + ch->attributes[1 + 3 * j] + ch->attributes[2 + 3 * j]); stat_display_counter++)
comm.c:3338:      if (points_distribution[2] - (ch->attributes[0 + 3 * j] + ch->attributes[1 + 3 * j] + ch->attributes[2 + 3 * j]) <= 0)
comm.c:3356:            ch->abilities[i][j] = 0;
comm.c:3357:            ch->pcdata->abilities_points[i][j] = 0;
comm.c:3382:      ch->pcdata->ability_groups[0] = *argument;
comm.c:3391:      if (*argument == ch->pcdata->ability_groups[0])
comm.c:3412:      ch->pcdata->ability_groups[1] = *argument;
comm.c:3413:      if ((ch->pcdata->ability_groups[0] == 't' && ch->pcdata->ability_groups[1] == 'k') || (ch->pcdata->ability_groups[0] == 'k' && ch->pcdata->ability_groups[1] == 't'))
comm.c:3414:         ch->pcdata->ability_groups[2] = 's';
comm.c:3415:      else if ((ch->pcdata->ability_groups[0] == 't' && ch->pcdata->ability_groups[1] == 's') || (ch->pcdata->ability_groups[0] == 's' && ch->pcdata->ability_groups[1] == 't'))
comm.c:3416:         ch->pcdata->ability_groups[2] = 'k';
comm.c:3417:      else if ((ch->pcdata->ability_groups[0] == 's' && ch->pcdata->ability_groups[1] == 'k') || (ch->pcdata->ability_groups[0] == 'k' && ch->pcdata->ability_groups[1] == 's'))
comm.c:3418:         ch->pcdata->ability_groups[2] = 't';
comm.c:3419:      sprintf (log_buf, "#RAREAS: %c  %c  %c.\n\r", ch->pcdata->ability_groups[0], ch->pcdata->ability_groups[1], ch->pcdata->ability_groups[2]);
comm.c:3423:      if (ch->pcdata->ability_groups[0] == 't')
comm.c:3425:      if (ch->pcdata->ability_groups[0] == 's')
comm.c:3427:      if (ch->pcdata->ability_groups[0] == 'k')
comm.c:3437:         for (stat_display_counter = 0; stat_display_counter < ch->abilities[j][i]; stat_display_counter++)
comm.c:3461:      if (ch->pcdata->ability_groups[0] == 't')
comm.c:3463:      else if (ch->pcdata->ability_groups[0] == 's')
comm.c:3465:      else if (ch->pcdata->ability_groups[0] == 'k')
comm.c:3471:         if (ch->pcdata->ability_groups[1] == 't')
comm.c:3473:         else if (ch->pcdata->ability_groups[1] == 's')
comm.c:3475:         else if (ch->pcdata->ability_groups[1] == 'k')
comm.c:3481:            if (ch->pcdata->ability_groups[2] == 't')
comm.c:3483:            else if (ch->pcdata->ability_groups[2] == 's')
comm.c:3485:            else if (ch->pcdata->ability_groups[2] == 'k')
comm.c:3491:                sprintf (log_buf, "%s@%s new player.", ch->name, d->host);
comm.c:3495:      	    	if (ch->pcdata->vision < 1)
comm.c:3496:         		ch->pcdata->vision = 3;
comm.c:3498:	    	if (ch->pcdata->rank < 0)
comm.c:3499:            		ch->pcdata->rank = 0;
comm.c:3520:            if (ch->abilities[j][temp_num] >= MAX_CHAR_CREATION_ABILITY)
comm.c:3524:               ch->abilities[j][temp_num] = ch->abilities[j][temp_num] + 1;
comm.c:3525:               ch->pcdata->abilities_points[j][temp_num] = ability_insight_levels[ch->abilities[j][temp_num]];
comm.c:3531:            if (ch->abilities[j][temp_num] <= 0)
comm.c:3535:               ch->abilities[j][temp_num] = ch->abilities[j][temp_num] - 1;
comm.c:3536:               ch->pcdata->abilities_points[j][temp_num] = ability_insight_levels[ch->abilities[j][temp_num]];
comm.c:3554:         for (stat_display_counter = 0; stat_display_counter < ch->abilities[j][i]; stat_display_counter++)
comm.c:3594:      if (IS_SET (ch->act, PLR_VANISH) && !IS_WEREWOLF (ch))
comm.c:3596:         REMOVE_BIT (ch->act, PLR_VANISH);
comm.c:3598:      ch->next = char_list;
comm.c:3603:      if (ch->pcdata->vision < 1)
comm.c:3604:         ch->pcdata->vision = 3;
comm.c:3606:      if (ch->pcdata->rank < 0)
comm.c:3607:         ch->pcdata->rank = 0;
comm.c:3609:      if (!IS_IMMORTAL (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
comm.c:3611:         REMOVE_BIT (ch->act, PLR_HOLYLIGHT);
comm.c:3615:      if (ch->level == 0)
comm.c:3617:	 ch->pcdata->wp_regain_counter = 1;
comm.c:3618:	 ch->pcdata->blood_burn_counter = 1;
comm.c:3619:	 ch->pcdata->auto_vote_counter = 1;
comm.c:3620:         ch->level = 3;
comm.c:3621:         ch->mkill = 5;
comm.c:3622:         ch->hit = ch->max_hit;
comm.c:3623:         ch->mana = ch->max_mana;
comm.c:3624:         ch->move = ch->max_move;
comm.c:3625:         ch->health_level = HEALTH_NORMAL;
comm.c:3627:         ch->exp = 0;
comm.c:3628:         ch->pcdata->class = ch->class;
comm.c:3629:         ch->pcdata->security = 9;   /* OLC */
comm.c:3630:         ch->class = CLASS_NONE;
comm.c:3631:         ch->hit = ch->max_hit;
comm.c:3632:         ch->mana = ch->max_mana;
comm.c:3633:         ch->move = ch->max_move;
comm.c:3634:         ch->pcdata->vision = 3;
comm.c:3635:         ch->gold = 20;
comm.c:3636:         ch->pcdata->board = &boards[DEFAULT_BOARD];
comm.c:3667:      else if (!IS_NPC (ch) && ch->pcdata->obj_vnum != 0)
comm.c:3669:         if (ch->in_room != NULL)
comm.c:3670:            char_to_room (ch, ch->in_room);
comm.c:3677:      else if (ch->x >= 0 && ch->y >= 0)
comm.c:3682:      else if (ch->in_room != NULL)
comm.c:3684:         char_to_room (ch, ch->in_room);
comm.c:3699:      sprintf (buf, "#C%s #ehas entered the #bTwilight Reconquista#n.", ch->name);
comm.c:3701:      sprintf (buf, "#C%s #ehas entered the #bTwilight Reconquista#n.", ch->name);
comm.c:3703:     if ( !IS_SET( ch->act, PLR_WIZINVIS))
comm.c:3708:      ch->pcdata->board = &boards[DEFAULT_BOARD];
comm.c:3711:      if (ch->class == CLASS_NONE)
comm.c:3714:            ch->class += CLASS_WEREWOLF;
comm.c:3814:   for (ch = char_list; ch != NULL; ch = ch->next)
comm.c:3816:      if (!IS_NPC (ch) && !IS_EXTRA (ch, EXTRA_SWITCH) && (!fConn || ch->desc == NULL) && !str_cmp (d->character->name, ch->name))
comm.c:3821:            d->character->pcdata->pwd = str_dup (ch->pcdata->pwd);
comm.c:3827:            ch->desc = d;
comm.c:3828:            ch->timer = 0;
comm.c:3831:            if (IS_NPC (ch) || ch->pcdata->obj_vnum == 0)
comm.c:3833:            sprintf (log_buf, "%s@%s reconnected.", ch->name, ch->lasthost);
comm.c:3838:            if (ch->pcdata->in_progress)
comm.c:3856:   for (ch = char_list; ch != NULL; ch = ch->next)
comm.c:3858:      if (!IS_NPC (ch) && (!fConn || ch->desc == NULL) && !str_cmp (d->character->name, ch->name))
comm.c:3863:            d->character->pcdata->pwd = str_dup (ch->pcdata->pwd);
comm.c:3869:            ch->desc = d;
comm.c:3870:            ch->timer = 0;
comm.c:3873:            sprintf (log_buf, "%s@%s kicking off old link.", ch->name, ch->lasthost);
comm.c:3927:   if (ch == NULL || ch->desc == NULL || ch->desc->connected != CON_PLAYING || ch->was_in_room == NULL || ch->in_room != get_room_index (ROOM_VNUM_LIMBO))
comm.c:3930:   ch->timer = 0;
comm.c:3932:   char_to_room (ch, ch->was_in_room);
comm.c:3933:   ch->was_in_room = NULL;
comm.c:3945:   if (txt == NULL || ch == NULL || (ch != NULL && ch->desc == NULL))
comm.c:3948:   free_string (ch->desc->showstr_head);
comm.c:3949:   ch->desc->showstr_head = str_dup (txt);
comm.c:3950:   ch->desc->showstr_point = ch->desc->showstr_head;
comm.c:3951:   show_string (ch->desc, "");
comm.c:4060:   if (txt != NULL && ch->desc != NULL)
comm.c:4061:      write_to_buffer (ch->desc, txt, strlen (txt));
comm.c:4102:   if (ch->pcdata == NULL)
comm.c:4107:   if (ch->position == POS_FIGHTING && ch->cprompt[0] == '\0')
comm.c:4109:      if (ch->prompt[0] == '\0')
comm.c:4116:   else if (ch->position != POS_FIGHTING && ch->prompt[0] == '\0')
comm.c:4123:   if (ch->position == POS_FIGHTING && is_fighting)
comm.c:4141:         sprintf (buf2, "%d", ch->hit);
comm.c:4142:         COL_SCALE (buf2, ch, ch->hit, ch->max_hit);
comm.c:4146:         sprintf (buf2, "%d", ch->max_hit);
comm.c:4176:         sprintf (buf2, "%d",    ch->pcdata->rage[0]);
comm.c:4181:         sprintf (buf2, "%d",    ch->pcdata->rage[1]);
comm.c:4186:      sprintf (buf2, "%d", ch->pcdata->gnosis[0]);
comm.c:4191:         sprintf (buf2, "%d",    ch->pcdata->gnosis[1]);
comm.c:4200:         sprintf (buf2, "%d", ch->exp);
comm.c:4201:         COL_SCALE (buf2, ch, ch->exp, 100);
comm.c:4205:         sprintf (buf2, "%d", ch->gold);
comm.c:4210:         if ((victim = ch->fighting) == NULL)
comm.c:4261:         if ((victim = ch->fighting) == NULL)
comm.c:4317:         if ((victim = ch->fighting) == NULL)
comm.c:4332:         if ((victim = ch->fighting) == NULL)
comm.c:4351:         if ((victim = ch->embrace) == NULL)
comm.c:4366:         if ((victim = ch->embrace) == NULL)
comm.c:4394:         sprintf (buf2, "%d", ch->pcdata->willpower[WILLPOWER_MAX]);
comm.c:4399:         sprintf (buf2, "%d", ch->pcdata->willpower[WILLPOWER_CURRENT]);
comm.c:4405:         sprintf (buf2, "%d", ch->blood[BLOOD_CURRENT]);
comm.c:4410:         sprintf (buf2, "%d", ch->blood[BLOOD_CURRENT]);
comm.c:4416:         sprintf (buf2, "%d", ch->blood[BLOOD_POOL]);
comm.c:4423:            switch (ch->desc->editor)
comm.c:4521:   if (strcmp (arg1, ch->pcdata->pwd) && strcmp (crypt (arg1, ch->pcdata->pwd), ch->pcdata->pwd))
comm.c:4537:   pwdnew = crypt (arg2, ch->name);
comm.c:4547:   free_string (ch->pcdata->pwd);
comm.c:4548:   ch->pcdata->pwd = str_dup (pwdnew);
comm.c:4550:      SET_BIT (ch->extra, EXTRA_NEWPASS);
comm.c:4552:   if (ch->desc != NULL && ch->desc->connected == CON_PLAYING)
comm.c:4639:   for (gch = char_list; gch != NULL; gch = gch->next)
comm.c:4645:      if (IS_SET (gch->extra, EXTRA_OSWITCH))
comm.c:4647:         REMOVE_BIT (gch->affected_by, AFF_POLYMORPH);
comm.c:4648:         REMOVE_BIT (gch->extra, EXTRA_OSWITCH);
comm.c:4649:         gch->morph = str_dup ("");
comm.c:4650:         gch->pcdata->chobj = NULL;
comm.c:4651:         gch->pcdata->obj_vnum = 0;
comm.c:4657:      gch->hit = gch->max_hit;
comm.c:4658:      gch->position = POS_STANDING;
comm.c:4678:         fprintf (fp, "%d %s %s\n", d->descriptor, och->name, d->host);
comm.c:4886:        ch->pcdata = alloc_perm (sizeof (*ch->pcdata));
comm.c:4890:        ch->pcdata = pcdata_free;
comm.c:4893:   *ch->pcdata = pcdata_zero;
comm.c:4896:   ch->desc = d;
comm.c:4897:   ch->name = str_dup ("guest");
core.c:76:	if (ch->in_room == NULL)
core.c:79:		to = ch->in_room->people;
core.c:82:		if (vch == NULL || vch->in_room == NULL)
core.c:87:		to = vch->in_room->people;
core.c:99:		if (type == TO_ROOM && (to == ch || (ch->plane != to->plane && !IS_STORYTELLER(to))))
core.c:107:				if (to->in_room == ch->in_room && wizard->in_room != to->in_room)
core.c:127:		if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
core.c:131:			if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
core.c:136:			if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
core.c:191:					i = he_she[URANGE (0, ch->sex, 2)];
core.c:194:					i = he_she[URANGE (0, vch->sex, 2)];
core.c:197:					i = him_her[URANGE (0, ch->sex, 2)];
core.c:200:					i = him_her[URANGE (0, vch->sex, 2)];
core.c:203:					i = his_her[URANGE (0, ch->sex, 2)];
core.c:206:					i = his_her[URANGE (0, vch->sex, 2)];
core.c:240:			if (to->in_room != ch->in_room && familiar != NULL && familiar->in_room == ch->in_room)
core.c:302:	to = ch->in_room->people;
core.c:305:		if (vch == NULL || vch->in_room == NULL)
core.c:310:		to = vch->in_room->people;
core.c:333:		if (to->in_room == ch->in_room && 
core.c:350:		if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
core.c:354:			if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
core.c:359:			if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
core.c:412:						i = he_she[URANGE (0, ch->sex, 2)];
core.c:418:						i = he_she[URANGE (0, vch->sex, 2)];
core.c:424:						i = him_her[URANGE (0, ch->sex, 2)];
core.c:430:						i = him_her[URANGE (0, vch->sex, 2)];
core.c:436:						i = his_her[URANGE (0, ch->sex, 2)];
core.c:442:						i = his_her[URANGE (0, vch->sex, 2)];
core.c:476:		 if (to->in_room != ch->in_room && familiar != NULL &&
core.c:477:		familiar->in_room == ch->in_room)
core.c:525:	to = ch->in_room->people;
core.c:533:		to = vch->in_room->people;
core.c:541:		if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
core.c:545:			if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
core.c:550:			if (!IS_NPC (ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL && !IS_NPC (to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
core.c:591:					i = he_she[URANGE (0, ch->sex, 2)];
core.c:594:					i = him_her[URANGE (0, ch->sex, 2)];
core.c:597:					i = his_her[URANGE (0, ch->sex, 2)];
core.c:634:	if (ch->in_room != victim->in_room)
core.c:690:	if (ch->in_room == NULL || IS_SET (ch->in_room->room_flags, ROOM_SAFE))
core.c:722:	if (IS_NPC (ch) && IS_NEWBIE (victim) && IS_SET (ch->act, ACT_COMMANDED))
core.c:756:	if (ch->trust > LEVEL_BUILDER)
core.c:774:	if (ch->desc == NULL || victim->desc == NULL)
core.c:796:		if (IS_MORE (ch, MORE_LOYAL) && strlen (ch->pcdata->conding) > 1 && !str_cmp (ch->pcdata->conding, victim->name))
core.c:801:		else if (strlen (ch->pcdata->love) > 1 && !str_cmp (ch->pcdata->love, victim->name))
core.c:896:		name = ch->short_descr;
core.c:899:		corpse->value[2] = ch->pIndexData->vnum;
core.c:900:		if (ch->gold > 0)
core.c:902:			obj_to_obj (create_money (ch->gold), corpse);
core.c:903:			ch->gold = 0;
core.c:908:		name = ch->name;
core.c:912:		if (ch->gold > 0)
core.c:914:			obj = create_money (ch->gold);
core.c:918:			ch->gold = 0;
core.c:930:		corpse->questowner = str_dup (ch->short_descr);
core.c:932:		corpse->questowner = str_dup (ch->name);
core.c:934:	if (ch->in_room != NULL)
core.c:935:		corpse->specpower = ch->in_room->vnum;
core.c:945:	for (obj = ch->carrying; obj != NULL; obj = obj_next)
core.c:964:	obj_to_room (corpse, ch->in_room);
core.c:979:		ch->mkill++;
core.c:984:		ch->pkill++;
core.c:1105:	if (!IS_NPC (victim) && victim->level >= ch->level)
db.c:1603:			for (pch = char_list; pch != NULL; pch = pch->next)
db.c:1605:				if (!IS_NPC (pch) && IS_AWAKE (pch) && pch->in_room != NULL && pch->in_room->area == pArea)
db.c:2221:	ch->name = &str_empty[0];
db.c:2222:	ch->short_descr = &str_empty[0];
db.c:2223:	ch->long_descr = &str_empty[0];
db.c:2224:	ch->description = &str_empty[0];
db.c:2225:	ch->lord = &str_empty[0];
db.c:2226:	ch->clan = &str_empty[0];
db.c:2227:	ch->side = &str_empty[0];
db.c:2228:	ch->morph = &str_empty[0];
db.c:2229:	ch->createtime = &str_empty[0];
db.c:2230:	ch->lasthost = &str_empty[0];
db.c:2231:	ch->lasttime = &str_empty[0];
db.c:2232:	ch->powertype = &str_empty[0];
db.c:2233:	ch->poweraction = &str_empty[0];
db.c:2234:	ch->pload = &str_empty[0];
db.c:2235:	ch->prompt = &str_empty[0];
db.c:2236:	ch->cprompt = &str_empty[0];
db.c:2237:	ch->hunting = &str_empty[0];
db.c:2238:	ch->plane = 0;
db.c:2239:	ch->logon = current_time;
db.c:2240:	ch->armor = 100;
db.c:2241:	ch->position = POS_STANDING;
db.c:2242:	ch->hit = 7;
db.c:2243:	ch->max_hit = 7;
db.c:2244:	ch->mana = 1000;
db.c:2245:	ch->max_mana = 1000;
db.c:2246:	ch->move = 1000;
db.c:2247:	ch->max_move = 1000;
db.c:2248:	ch->master = NULL;
db.c:2249:	ch->leader = NULL;
db.c:2250:	ch->fighting = NULL;
db.c:2251:	ch->mount = NULL;
db.c:2252:	ch->wizard = NULL;
db.c:2253:	ch->embrace = NULL;
db.c:2254:	ch->sat = NULL;
db.c:2255:	ch->next_fight = NULL;
db.c:2256:	ch->prev_fight = NULL;
db.c:2257:	ch->paradox[0] = 0;
db.c:2258:	ch->paradox[1] = 0;
db.c:2259:	ch->paradox[2] = 0;
db.c:2260:	ch->damcap[0] = 1000;
db.c:2261:	ch->damcap[1] = 0;
db.c:2262:	ch->race = 0;
db.c:2263:	ch->class = 0;
db.c:2264:	ch->embraced = 0;
db.c:2265:	ch->blood[0] = 10;
db.c:2266:	ch->blood[1] = 10;
db.c:2267:	ch->blood[2] = 1;
db.c:2268:	ch->init = 0;
db.c:2269:	ch->next_wilderness = NULL;
db.c:2270:	ch->prev_wilderness = NULL;
db.c:2271:	ch->x = 0;
db.c:2272:	ch->y = 0;
db.c:2273:	ch->home_x = 0;
db.c:2274:	ch->home_y = 0;
db.c:2275:	ch->room = 0;
db.c:2276:	ch->state = 0;
db.c:2277:	ch->action = 0;
db.c:2278:	ch->quality = 0;
db.c:2307:	for (obj = ch->carrying; obj != NULL; obj = obj_next)
db.c:2313:	for (paf = ch->affected; paf != NULL; paf = paf_next)
db.c:2319:	free_string (ch->name);
db.c:2320:	free_string (ch->short_descr);
db.c:2321:	free_string (ch->long_descr);
db.c:2322:	free_string (ch->description);
db.c:2323:	free_string (ch->lord);
db.c:2324:	free_string (ch->clan);
db.c:2325:	free_string (ch->side);
db.c:2326:	free_string (ch->nature);
db.c:2327:	free_string (ch->demeanor);
db.c:2328:	free_string (ch->order);
db.c:2329:	free_string (ch->impulse);
db.c:2330:	free_string (ch->morph);
db.c:2331:	free_string (ch->createtime);
db.c:2332:	free_string (ch->lasttime);
db.c:2333:	free_string (ch->lasthost);
db.c:2334:	free_string (ch->powertype);
db.c:2335:	free_string (ch->poweraction);
db.c:2336:	free_string (ch->pload);
db.c:2337:	free_string (ch->prompt);
db.c:2338:	free_string (ch->cprompt);
db.c:2339:	free_string (ch->hunting);
db.c:2341:	if (ch->pcdata != NULL)
db.c:2343:		free_string (ch->pcdata->doing);
db.c:2344:		free_string (ch->pcdata->aura);
db.c:2345:		free_string (ch->pcdata->voice);
db.c:2346:		free_string (ch->pcdata->roomdesc);
db.c:2347:		free_string (ch->pcdata->pwd);
db.c:2348:		free_string (ch->pcdata->bamfin);
db.c:2349:		free_string (ch->pcdata->bamfout);
db.c:2350:		free_string (ch->pcdata->title);
db.c:2351:		free_string (ch->pcdata->conception);
db.c:2352:		free_string (ch->pcdata->parents);
db.c:2353:		free_string (ch->pcdata->cparents);
db.c:2354:		free_string (ch->pcdata->marriage);
db.c:2355:		free_string (ch->pcdata->email);
db.c:2356:		free_string (ch->pcdata->lupusdescshort);
db.c:2357:		free_string (ch->pcdata->crinosdescshort);
db.c:2358:		free_string (ch->pcdata->hispodescshort);
db.c:2359:		free_string (ch->pcdata->glabrodescshort);
db.c:2360:		free_string (ch->pcdata->crinosdesc);
db.c:2361:		free_string (ch->pcdata->tempdesc);
db.c:2362:		free_string (ch->pcdata->lupusdesc);
db.c:2363:		free_string (ch->pcdata->glabrodesc);
db.c:2364:		free_string (ch->pcdata->hispodesc);
db.c:2365:		free_string (ch->pcdata->giftlist);
db.c:2366:		free_string (ch->pcdata->conding);
db.c:2367:		free_string (ch->pcdata->love);
db.c:2368:		free_string (ch->pcdata->coterie);
db.c:2369:		free_string (ch->pcdata->cot_time);
db.c:2370:		free_string (ch->pcdata->cot_clans);
db.c:2371:		free_string (ch->pcdata->cot_sides);
db.c:2372:		free_string (ch->pcdata->leader);
db.c:2373:		free_string (ch->pcdata->stancename);
db.c:2374:		free_string (ch->pcdata->stancelist);
db.c:2375:		free_string (ch->pcdata->stancework);
db.c:2376:		ch->pcdata->next = pcdata_free;
db.c:2377:		pcdata_free = ch->pcdata;
db.c:2380:	ch->next = char_free;
db.c:3266:		fprintf (fp, "[%5d] %s: %s\n", ch->in_room ? ch->in_room->vnum : 0, ch->name, str);
hndl.c:91:	for (i = 0; i < (ch->attributes[attribute] + ch->abilities[ability_are][ability]); i++)
hndl.c:127:		sum = sum + ch->abilities[area][i];
hndl.c:138:	if (ch->desc != NULL && ch->desc->original != NULL)
hndl.c:139:		ch = ch->desc->original;
hndl.c:141:	if (ch->trust != 0)
hndl.c:142:		return ch->trust;
hndl.c:144:	if (IS_NPC (ch) && ch->level >= LEVEL_HERO)
hndl.c:147:		return ch->level;
hndl.c:157:	return 17 + (ch->played + (int) (current_time - ch->logon)) / 7200;
hndl.c:162:	return (ch->played + (int) (current_time - ch->logon)) / 3600;
hndl.c:179:	return URANGE (1, (ch->attributes[ATTRIB_STR] + ch->mod_attributes[ATTRIB_STR]), max);
hndl.c:195:	return URANGE (1, ch->attributes[ATTRIB_DEX] + ch->mod_attributes[ATTRIB_DEX], max);
hndl.c:211:	return URANGE (1, ch->attributes[ATTRIB_STA] + ch->mod_attributes[ATTRIB_STA], max);
hndl.c:228:	return URANGE (1, ch->attributes[ATTRIB_CHA] + ch->mod_attributes[ATTRIB_CHA], max);
hndl.c:245:	return URANGE (1, ch->attributes[ATTRIB_MAN] + ch->mod_attributes[ATTRIB_MAN], max);
hndl.c:261:	return URANGE (1, ch->attributes[ATTRIB_APP] + ch->mod_attributes[ATTRIB_APP], max);
hndl.c:276:	return URANGE (1, ch->attributes[ATTRIB_PER] + ch->mod_attributes[ATTRIB_PER], max);
hndl.c:293:	return URANGE (1, ch->attributes[ATTRIB_INT] + ch->mod_attributes[ATTRIB_INT], max);
hndl.c:311:	return URANGE (1, ch->attributes[ATTRIB_WIT] + ch->mod_attributes[ATTRIB_WIT], max);
hndl.c:322:	if (!IS_NPC (ch) && ch->level >= LEVEL_IMMORTAL)
hndl.c:325:	if (IS_NPC (ch) && IS_SET (ch->act, ACT_PET))
hndl.c:338:	if (!IS_NPC (ch) && ch->level >= LEVEL_IMMORTAL)
hndl.c:342:	if (IS_NPC (ch) && IS_SET (ch->act, ACT_PET))
hndl.c:427:		SET_BIT (ch->affected_by, paf->bitvector);
hndl.c:431:		REMOVE_BIT (ch->affected_by, paf->bitvector);
hndl.c:444:			ch->max_mana += mod;
hndl.c:447:			ch->max_hit += mod;
hndl.c:450:			ch->max_move += mod;
hndl.c:453:			ch->armor += mod;
hndl.c:456:			ch->hitroll += mod;
hndl.c:459:			ch->damroll += mod;
hndl.c:462:			ch->saving_throw += mod;
hndl.c:465:			ch->saving_throw += mod;
hndl.c:468:			ch->saving_throw += mod;
hndl.c:471:			ch->saving_throw += mod;
hndl.c:474:			ch->saving_throw += mod;
hndl.c:477:			ch->polyaff += mod;
hndl.c:480:			ch->vampgen += mod;
hndl.c:483:			ch->blood[BLOOD_POOL] += mod;
hndl.c:486:			ch->blood[BLOOD_POTENCY] += mod;
hndl.c:514:		ch->max_mana += mod;
hndl.c:517:		ch->max_hit += mod;
hndl.c:520:		ch->max_move += mod;
hndl.c:527:		ch->armor += mod;
hndl.c:530:		ch->hitroll += mod;
hndl.c:533:		ch->damroll += mod;
hndl.c:536:		ch->saving_throw += mod;
hndl.c:539:		ch->saving_throw += mod;
hndl.c:542:		ch->saving_throw += mod;
hndl.c:545:		ch->saving_throw += mod;
hndl.c:548:		ch->saving_throw += mod;
hndl.c:551:		ch->polyaff += mod;
hndl.c:554:		ch->vampgen += mod;
hndl.c:558:			ch->pcdata->powers_mod[DISC_ANIMALISM] += mod;
hndl.c:562:			ch->pcdata->powers_mod[DISC_AUSPEX] += mod;
hndl.c:566:			ch->pcdata->powers_mod[DISC_CELERITY] += mod;
hndl.c:570:			ch->pcdata->powers_mod[DISC_CHIMERSTRY] += mod;
hndl.c:574:			ch->pcdata->powers_mod[DISC_DAIMOINON] += mod;
hndl.c:578:			ch->pcdata->powers_mod[DISC_DOMINATE] += mod;
hndl.c:582:			ch->pcdata->powers_mod[DISC_FORTITUDE] += mod;
hndl.c:586:			ch->pcdata->powers_mod[DISC_DEMENTATION] += mod;
hndl.c:590:			ch->pcdata->powers_mod[DISC_NECROMANCY] += mod;
hndl.c:594:			ch->pcdata->powers_mod[DISC_OBEAH] += mod;
hndl.c:598:			ch->pcdata->powers_mod[DISC_OBFUSCATE] += mod;
hndl.c:602:			ch->pcdata->powers_mod[DISC_OBTENEBRATION] += mod;
hndl.c:606:			ch->pcdata->powers_mod[DISC_POTENCE] += mod;
hndl.c:610:			ch->pcdata->powers_mod[DISC_PRESENCE] += mod;
hndl.c:614:			ch->pcdata->powers_mod[DISC_PROTEAN] += mod;
hndl.c:618:			ch->pcdata->powers_mod[DISC_QUIETUS] += mod;
hndl.c:622:			ch->pcdata->powers_mod[DISC_SERPENTIS] += mod;
hndl.c:626:			ch->pcdata->powers_mod[DISC_MORTIS] += mod;
hndl.c:630:			ch->pcdata->powers_mod[DISC_THAUMATURGY] += mod;
hndl.c:634:			ch->pcdata->powers_mod[DISC_VICISSITUDE] += mod;
hndl.c:637:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_ANIMALISM] < mod)
hndl.c:638:			ch->pcdata->powers_set[DISC_ANIMALISM] = mod;
hndl.c:639:		ch->pcdata->powers_set_wear++;
hndl.c:642:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_AUSPEX] < mod)
hndl.c:643:			ch->pcdata->powers_set[DISC_AUSPEX] = mod;
hndl.c:644:		ch->pcdata->powers_set_wear++;
hndl.c:647:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_CELERITY] < mod)
hndl.c:648:			ch->pcdata->powers_set[DISC_CELERITY] = mod;
hndl.c:649:		ch->pcdata->powers_set_wear++;
hndl.c:652:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_CHIMERSTRY] < mod)
hndl.c:653:			ch->pcdata->powers_set[DISC_CHIMERSTRY] = mod;
hndl.c:654:		ch->pcdata->powers_set_wear++;
hndl.c:657:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_DAIMOINON] < mod)
hndl.c:658:			ch->pcdata->powers_set[DISC_DAIMOINON] = mod;
hndl.c:659:		ch->pcdata->powers_set_wear++;
hndl.c:662:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_DOMINATE] < mod)
hndl.c:663:			ch->pcdata->powers_set[DISC_DOMINATE] = mod;
hndl.c:664:		ch->pcdata->powers_set_wear++;
hndl.c:667:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_FORTITUDE] < mod)
hndl.c:668:			ch->pcdata->powers_set[DISC_FORTITUDE] = mod;
hndl.c:669:		ch->pcdata->powers_set_wear++;
hndl.c:672:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_DEMENTATION] < mod)
hndl.c:673:			ch->pcdata->powers_set[DISC_DEMENTATION] = mod;
hndl.c:674:		ch->pcdata->powers_set_wear++;
hndl.c:677:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_NECROMANCY] < mod)
hndl.c:678:			ch->pcdata->powers_set[DISC_NECROMANCY] = mod;
hndl.c:679:		ch->pcdata->powers_set_wear++;
hndl.c:682:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_OBEAH] < mod)
hndl.c:683:			ch->pcdata->powers_set[DISC_OBEAH] = mod;
hndl.c:684:		ch->pcdata->powers_set_wear++;
hndl.c:687:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_OBFUSCATE] < mod)
hndl.c:688:			ch->pcdata->powers_set[DISC_OBFUSCATE] = mod;
hndl.c:689:		ch->pcdata->powers_set_wear++;
hndl.c:692:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_OBTENEBRATION] < mod)
hndl.c:693:			ch->pcdata->powers_set[DISC_OBTENEBRATION] = mod;
hndl.c:694:		ch->pcdata->powers_set_wear++;
hndl.c:697:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_POTENCE] < mod)
hndl.c:698:			ch->pcdata->powers_set[DISC_POTENCE] = mod;
hndl.c:699:		ch->pcdata->powers_set_wear++;
hndl.c:702:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_PRESENCE] < mod)
hndl.c:703:			ch->pcdata->powers_set[DISC_PRESENCE] = mod;
hndl.c:704:		ch->pcdata->powers_set_wear++;
hndl.c:707:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_PROTEAN] < mod)
hndl.c:708:			ch->pcdata->powers_set[DISC_PROTEAN] = mod;
hndl.c:709:		ch->pcdata->powers_set_wear++;
hndl.c:712:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_QUIETUS] < mod)
hndl.c:713:			ch->pcdata->powers_set[DISC_QUIETUS] = mod;
hndl.c:714:		ch->pcdata->powers_set_wear++;
hndl.c:717:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_SERPENTIS] < mod)
hndl.c:718:			ch->pcdata->powers_set[DISC_SERPENTIS] = mod;
hndl.c:719:		ch->pcdata->powers_set_wear++;
hndl.c:722:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_MORTIS] < mod)
hndl.c:723:			ch->pcdata->powers_set[DISC_MORTIS] = mod;
hndl.c:724:		ch->pcdata->powers_set_wear++;
hndl.c:727:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_THAUMATURGY] < mod)
hndl.c:728:			ch->pcdata->powers_set[DISC_THAUMATURGY] = mod;
hndl.c:729:		ch->pcdata->powers_set_wear++;
hndl.c:732:		if (!IS_NPC (ch) && ch->pcdata->powers_set[DISC_VICISSITUDE] < mod)
hndl.c:733:			ch->pcdata->powers_set[DISC_VICISSITUDE] = mod;
hndl.c:734:		ch->pcdata->powers_set_wear++;
hndl.c:737:		ch->blood[BLOOD_POOL] += mod;
hndl.c:740:		ch->blood[BLOOD_POTENCY] += mod;
hndl.c:758:			obj_to_room (wield, ch->in_room);
hndl.c:786:	paf_new->next = ch->affected;
hndl.c:787:	ch->affected = paf_new;
hndl.c:800:	if (ch->affected == NULL)
hndl.c:808:	if (paf == ch->affected)
hndl.c:810:		ch->affected = paf->next;
hndl.c:816:		for (prev = ch->affected; prev != NULL; prev = prev->next)
hndl.c:847:	for (paf = ch->affected; paf != NULL; paf = paf_next)
hndl.c:866:	for (paf = ch->affected; paf != NULL; paf = paf->next)
hndl.c:886:	for (paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next)
hndl.c:910:	if (ch->in_room == NULL)
hndl.c:917:		--ch->in_room->area->nplayer;
hndl.c:919:	if (!IS_NPC (ch) && IS_VAMPIRE (ch) && IS_MORE (ch, MORE_HAND_FLAME) && ch->in_room->light > 0)
hndl.c:920:		--ch->in_room->light;
hndl.c:921:	else if ((obj = get_eq_char (ch, WEAR_WIELD)) != NULL && obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room->light > 0)
hndl.c:922:		--ch->in_room->light;
hndl.c:923:	else if ((obj = get_eq_char (ch, WEAR_HOLD)) != NULL && obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room->light > 0)
hndl.c:924:		--ch->in_room->light;
hndl.c:928:		if (ch->in_room != NULL)
hndl.c:930:			REMOVE_BIT (ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
hndl.c:931:			REMOVE_BIT (ch->more, MORE_DARKNESS);
hndl.c:932:			ch->pcdata->darkness = 60;
hndl.c:939:		if (ch->in_room != NULL)
hndl.c:941:			REMOVE_BIT (ch->in_room->added_flags, ROOM2_SILENCE);
hndl.c:942:			REMOVE_BIT (ch->more, MORE_SILENCE);
hndl.c:943:			ch->pcdata->silence = 60;
hndl.c:951:		if (ch->in_room != NULL)
hndl.c:953:			REMOVE_BIT (ch->more2, MORE2_BLESSING);
hndl.c:954:			ch->pcdata->obeah = 120;
hndl.c:961:	if (!IS_NPC (ch) && (IS_WEREWOLF (ch)) && IS_SET (ch->act, PLR_VANISH))
hndl.c:963:		REMOVE_BIT (ch->act, PLR_VANISH);
hndl.c:971:		if (ch->in_room != NULL)
hndl.c:973:			REMOVE_BIT (ch->in_room->room_flags, ROOM_SAFE);
hndl.c:974:			REMOVE_BIT (ch->more, MORE_REINA);
hndl.c:975:			ch->pcdata->reina = 60;
hndl.c:982:		if (ch->in_room != NULL)
hndl.c:984:			REMOVE_BIT (ch->in_room->room_flags, ROOM_SAFE);
hndl.c:985:			REMOVE_BIT (ch->more, MORE_NEUTRAL);
hndl.c:986:			ch->pcdata->obeah = 30;
hndl.c:993:		REMOVE_BIT (ch->affected_by, AFF_HIDE);
hndl.c:999:	if (ch == ch->in_room->people)
hndl.c:1001:		ch->in_room->people = ch->next_in_room;
hndl.c:1007:		for (prev = ch->in_room->people; prev; prev = prev->next_in_room)
hndl.c:1011:				prev->next_in_room = ch->next_in_room;
hndl.c:1020:	ch->in_room = NULL;
hndl.c:1021:	ch->next_in_room = NULL;
hndl.c:1040:	ch->in_room = pRoomIndex;
hndl.c:1041:	ch->next_in_room = pRoomIndex->people;
hndl.c:1045:		++ch->in_room->area->nplayer;
hndl.c:1048:		++ch->in_room->light;
hndl.c:1050:		++ch->in_room->light;
hndl.c:1052:		++ch->in_room->light;
hndl.c:1054:	if (ch->loc_hp[6] > 0 && ch->in_room->blood < 100)
hndl.c:1057:			ch->loc_hp[6] = 0;
hndl.c:1059:			ch->in_room->blood += 1;
hndl.c:1064:		SET_BIT (ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
hndl.c:1065:		ch->pcdata->darkness = 60;
hndl.c:1072:		SET_BIT (ch->in_room->added_flags, ROOM2_SILENCE);
hndl.c:1073:		ch->pcdata->silence = 60;
hndl.c:1080:		SET_BIT (ch->in_room->room_flags, ROOM_SAFE);
hndl.c:1081:		ch->pcdata->reina = 60;
hndl.c:1087:		SET_BIT (ch->in_room->room_flags, ROOM_SAFE);
hndl.c:1088:		ch->pcdata->obeah = 30;
hndl.c:1105:	obj->next_content = ch->carrying;
hndl.c:1106:	ch->carrying = obj;
hndl.c:1110:	ch->carry_number += 1;
hndl.c:1111:	ch->carry_weight += get_obj_weight (obj);
hndl.c:1134:	if (ch->carrying == obj)
hndl.c:1136:		ch->carrying = obj->next_content;
hndl.c:1142:		for (prev = ch->carrying; prev != NULL; prev = prev->next_content)
hndl.c:1157:	ch->carry_number -= 1;
hndl.c:1158:	ch->carry_weight -= get_obj_weight (obj);
hndl.c:1228:	for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hndl.c:1262:		obj_to_room (obj, ch->in_room);
hndl.c:1274:		ch->armor -= apply_ac (obj, iWear);
hndl.c:1282:	if (obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room != NULL)
hndl.c:1283:		++ch->in_room->light;
hndl.c:1285:	if (!IS_NPC (ch) && ch->pcdata->powers_set_wear > 0)
hndl.c:1290:		if ((chch = get_char_world (ch, ch->name)) == NULL)
hndl.c:1292:		if (chch->desc != ch->desc)
hndl.c:1377:			SET_BIT (ch->affected_by, AFF_BLIND);
hndl.c:1383:			SET_BIT (ch->affected_by, AFF_DETECT_INVIS);
hndl.c:1389:			SET_BIT (ch->affected_by, AFF_FLYING);
hndl.c:1395:			SET_BIT (ch->affected_by, AFF_INFRARED);
hndl.c:1401:			SET_BIT (ch->affected_by, AFF_INVISIBLE);
hndl.c:1407:			SET_BIT (ch->affected_by, AFF_PASS_DOOR);
hndl.c:1413:			SET_BIT (ch->affected_by, AFF_PROTECT);
hndl.c:1419:			SET_BIT (ch->affected_by, AFF_SANCTUARY);
hndl.c:1425:			SET_BIT (ch->affected_by, AFF_SNEAK);
hndl.c:1431:			SET_BIT (ch->itemaffect, ITEMA_SHOCKSHIELD);
hndl.c:1437:			SET_BIT (ch->itemaffect, ITEMA_FIRESHIELD);
hndl.c:1443:			SET_BIT (ch->itemaffect, ITEMA_ICESHIELD);
hndl.c:1449:			SET_BIT (ch->itemaffect, ITEMA_ACIDSHIELD);
hndl.c:1455:			SET_BIT (ch->itemaffect, ITEMA_DBPASS);
hndl.c:1460:			SET_BIT (ch->itemaffect, ITEMA_CHAOSSHIELD);
hndl.c:1465:			SET_BIT (ch->itemaffect, ITEMA_REGENERATE);
hndl.c:1468:			SET_BIT (ch->itemaffect, ITEMA_SPEED);
hndl.c:1473:			SET_BIT (ch->itemaffect, ITEMA_VORPAL);
hndl.c:1475:			SET_BIT (ch->itemaffect, ITEMA_PEACE);
hndl.c:1478:			SET_BIT (ch->itemaffect, ITEMA_REFLECT);
hndl.c:1483:			SET_BIT (ch->itemaffect, ITEMA_RESISTANCE);
hndl.c:1486:			SET_BIT (ch->itemaffect, ITEMA_VISION);
hndl.c:1491:			SET_BIT (ch->itemaffect, ITEMA_STALKER);
hndl.c:1494:			SET_BIT (ch->itemaffect, ITEMA_VANISH);
hndl.c:1500:			SET_BIT (ch->itemaffect, ITEMA_RAGER);
hndl.c:1501:			if (IS_WEREWOLF (ch) && ch->pcdata->wolf < 100)
hndl.c:1503:				ch->pcdata->wolf = 300;
hndl.c:1507:				ch->pcdata->wolf = 300;
hndl.c:1509:				ch->pcdata->wolf = 25;
hndl.c:1512:			SET_BIT (ch->itemaffect, ITEMA_SHADES);
hndl.c:1539:		ch->armor += apply_ac (obj, obj->wear_loc);
hndl.c:1547:	if (obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room != NULL && ch->in_room->light > 0)
hndl.c:1548:		--ch->in_room->light;
hndl.c:1549:	if (!IS_NPC (ch) && ch->pcdata->powers_set_wear > 0)
hndl.c:1552:	if ((chch = get_char_world (ch, ch->name)) == NULL)
hndl.c:1554:	if (chch->desc != ch->desc)
hndl.c:1557:	if (!IS_NPC (ch) && (ch->desc != NULL && ch->desc->connected != CON_PLAYING))
hndl.c:1568:			REMOVE_BIT (ch->affected_by, AFF_BLIND);
hndl.c:1574:			REMOVE_BIT (ch->affected_by, AFF_DETECT_INVIS);
hndl.c:1580:			REMOVE_BIT (ch->affected_by, AFF_FLYING);
hndl.c:1586:			REMOVE_BIT (ch->affected_by, AFF_INFRARED);
hndl.c:1592:			REMOVE_BIT (ch->affected_by, AFF_INVISIBLE);
hndl.c:1598:			REMOVE_BIT (ch->affected_by, AFF_PASS_DOOR);
hndl.c:1604:			REMOVE_BIT (ch->affected_by, AFF_PROTECT);
hndl.c:1610:			REMOVE_BIT (ch->affected_by, AFF_SANCTUARY);
hndl.c:1616:			REMOVE_BIT (ch->affected_by, AFF_SNEAK);
hndl.c:1622:			REMOVE_BIT (ch->itemaffect, ITEMA_SHOCKSHIELD);
hndl.c:1628:			REMOVE_BIT (ch->itemaffect, ITEMA_FIRESHIELD);
hndl.c:1634:			REMOVE_BIT (ch->itemaffect, ITEMA_ICESHIELD);
hndl.c:1640:			REMOVE_BIT (ch->itemaffect, ITEMA_ACIDSHIELD);
hndl.c:1646:			REMOVE_BIT (ch->itemaffect, ITEMA_DBPASS);
hndl.c:1651:			REMOVE_BIT (ch->itemaffect, ITEMA_CHAOSSHIELD);
hndl.c:1656:			REMOVE_BIT (ch->itemaffect, ITEMA_REGENERATE);
hndl.c:1659:			REMOVE_BIT (ch->itemaffect, ITEMA_SPEED);
hndl.c:1664:			REMOVE_BIT (ch->itemaffect, ITEMA_VORPAL);
hndl.c:1666:			REMOVE_BIT (ch->itemaffect, ITEMA_PEACE);
hndl.c:1669:			REMOVE_BIT (ch->itemaffect, ITEMA_REFLECT);
hndl.c:1674:			REMOVE_BIT (ch->itemaffect, ITEMA_RESISTANCE);
hndl.c:1677:			REMOVE_BIT (ch->itemaffect, ITEMA_VISION);
hndl.c:1682:			REMOVE_BIT (ch->itemaffect, ITEMA_STALKER);
hndl.c:1685:			REMOVE_BIT (ch->itemaffect, ITEMA_VANISH);
hndl.c:1691:			REMOVE_BIT (ch->itemaffect, ITEMA_RAGER);
hndl.c:1692:			if (IS_WEREWOLF (ch) && ch->pcdata->wolf >= 100)
hndl.c:1694:				ch->pcdata->wolf = 0;
hndl.c:1697:			ch->pcdata->wolf = 0;
hndl.c:1700:			REMOVE_BIT (ch->itemaffect, ITEMA_SHADES);
hndl.c:1919:	if ((ch = obj->chobj) != NULL && !IS_NPC (ch) && ch->pcdata->chobj == obj)
hndl.c:1921:		REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
hndl.c:1922:		free_string (ch->morph);
hndl.c:1923:		ch->morph = str_dup ("");
hndl.c:1924:		ch->hit = 1;
hndl.c:1927:		ch->pcdata->chobj = NULL;
hndl.c:1931:		ch->position = POS_RESTING;
hndl.c:1933:	else if ((ch = obj->chobj) != NULL && !IS_NPC (ch) && ch->pcdata->chobj == obj && (IS_EXTRA (ch, EXTRA_OSWITCH) || ch->pcdata->obj_vnum != 0))
hndl.c:1935:		if (ch->pcdata->obj_vnum != 0)
hndl.c:1938:			ch->pcdata->chobj = NULL;
hndl.c:1943:			REMOVE_BIT (ch->extra, EXTRA_OSWITCH);
hndl.c:1944:			REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
hndl.c:1945:			free_string (ch->morph);
hndl.c:1946:			ch->morph = str_dup ("");
hndl.c:1949:			ch->pcdata->chobj = NULL;
hndl.c:1962:	if ((ch = obj->sat) != NULL && ch->sat == obj)
hndl.c:1965:		ch->sat = NULL;
hndl.c:2076:	if (ch->in_room == NULL)
hndl.c:2085:	for (obj = ch->carrying; obj != NULL; obj = obj_next)
hndl.c:2094:		--ch->pIndexData->count;
hndl.c:2095:	else if (ch->pcdata->chobj != NULL)
hndl.c:2097:		ch->pcdata->chobj->chobj = NULL;
hndl.c:2098:		ch->pcdata->chobj = NULL;
hndl.c:2101:	if ((obj = ch->sat) != NULL && obj->sat == ch)
hndl.c:2104:		ch->sat = NULL;
hndl.c:2113:	if (ch->desc != NULL && ch->desc->original != NULL)
hndl.c:2116:	for (wch = char_list; wch != NULL; wch = wch->next)
hndl.c:2118:		if (wch->reply == ch)
hndl.c:2119:			wch->reply = NULL;
hndl.c:2124:		char_list = ch->next;
hndl.c:2134:				prev->next = ch->next;
hndl.c:2147:	if (ch->desc)
hndl.c:2148:		ch->desc->character = NULL;
hndl.c:2150:	if ((wizard = ch->wizard) != NULL)
hndl.c:2154:		ch->wizard = NULL;
hndl.c:2156:	if ((wizard = ch->mount) != NULL)
hndl.c:2158:		if (IS_SET (ch->mounted, IS_MOUNT))
hndl.c:2166:		ch->mount = NULL;
hndl.c:2167:		ch->mounted = 0;
hndl.c:2170:	if ((familiar = ch->embrace) != NULL)
hndl.c:2172:		ch->embrace = NULL;
hndl.c:2173:		ch->embraced = ARE_NONE;
hndl.c:2180:		if ((familiar = ch->pcdata->partner) != NULL)
hndl.c:2181:			ch->pcdata->partner = NULL;
hndl.c:2182:		if ((familiar = ch->pcdata->propose) != NULL)
hndl.c:2184:			ch->pcdata->propose = NULL;
hndl.c:2187:		if ((familiar = ch->pcdata->familiar) != NULL)
hndl.c:2190:			ch->pcdata->familiar = NULL;
hndl.c:2205:	if (IS_NPC (ch) && strlen (ch->lord) > 1)
hndl.c:2207:		for (wch = char_list; wch != NULL; wch = wch->next)
hndl.c:2211:			if (str_cmp (wch->name, ch->lord))
hndl.c:2213:			if (wch->pcdata->followers > 0)
hndl.c:2214:				wch->pcdata->followers--;
hndl.c:2216:				REMOVE_BIT (wch->extra, EXTRA_NO_ACTION);
hndl.c:2244:	for (wch = char_list; wch != NULL; wch = wch->next)
hndl.c:2248:		else if (!can_see (ch, wch) || (!is_abbr (arg, wch->name) && (IS_NPC (wch) || !is_abbr (arg, wch->morph))))
hndl.c:2266:	for (wch = char_list; wch != NULL; wch = wch->next)
hndl.c:2268:		if (!IS_NPC (wch) && !str_cmp (argument, wch->name))
hndl.c:2334:	if (IS_NPC (ch) || ch->pcdata->chobj == NULL || ch->pcdata->chobj->in_obj == NULL)
hndl.c:2336:	obj = ch->pcdata->chobj;
hndl.c:2366:	for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hndl.c:2392:	for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hndl.c:2413:	if (is_abbr (argument, "self me myself") && !IS_NPC (ch) && ch->pcdata->chobj != NULL)
hndl.c:2414:		return ch->pcdata->chobj;
hndl.c:2416:	obj = get_obj_list (ch, argument, ch->in_room->contents);
hndl.c:2441:	if (is_abbr (argument, "self me myself") && !IS_NPC (ch) && ch->pcdata->chobj != NULL)
hndl.c:2442:		return ch->pcdata->chobj;
hndl.c:2444:	obj = get_obj_list (ch, argument, ch->in_room->contents);
hndl.c:2463:	if (is_abbr (argument, "self me myself") && !IS_NPC (ch) && ch->pcdata->chobj != NULL)
hndl.c:2464:		return ch->pcdata->chobj;
hndl.c:2576:	for (rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room)
hndl.c:2603:	if (!can_see (ch, victim) && room_is_dark (ch->in_room) && IS_MORE2 (ch, MORE2_HEIGHTENSENSES))
hndl.c:2618:	if (ch->plane != victim->plane)
hndl.c:2634:		if (ch->pcdata->familiar == NULL)
hndl.c:2635:			REMOVE_BIT (ch->act, EXTRA_CAN_SEE);
hndl.c:2636:		else if (victim->in_room != NULL && ch->in_room != NULL && ch->pcdata->familiar->in_room != NULL)
hndl.c:2638:			if (ch->in_room != ch->pcdata->familiar->in_room && ch->pcdata->familiar->in_room == victim->in_room)
hndl.c:2640:				if (can_see (ch->pcdata->familiar, victim))
hndl.c:2652:     && get_trust (ch) < (get_trust (victim)) && ch->in_room != victim->in_room)
hndl.c:2676:	if (!IS_STORYTELLER (ch) && IS_SET (ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
hndl.c:2693:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
hndl.c:2711:	if (room_is_dark (ch->in_room) && !IS_AFFECTED (ch, AFF_INFRARED) && !IS_VAMPAFF (ch, VAM_NIGHTSIGHT))
hndl.c:2734:	if (!IS_NPC (ch) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
hndl.c:2737:	if (!IS_NPC (ch) && IS_EXTRA (ch, EXTRA_OSWITCH) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
hndl.c:2750:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
hndl.c:2782:	if (room_is_dark (ch->in_room) && !IS_AFFECTED (ch, AFF_INFRARED) && !IS_VAMPAFF (ch, VAM_NIGHTSIGHT))
hndl.c:2788:	if (!IS_NPC (ch) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
hndl.c:2791:	if (!IS_NPC (ch) && IS_EXTRA (ch, EXTRA_OSWITCH) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
hndl.c:2810:	if (!IS_NPC (ch) && ch->level >= LEVEL_IMMORTAL)
hndl.c:3029:	if (!ch->pcdata)
hndl.c:3030:		return ch->desc->original;
hndl.c:3042:	for (wch = char_list; wch != NULL; wch = wch->next)
hndl.c:3044:		if (IS_NPC (wch) && !str_cmp (argument, wch->short_descr))
hndl.c:3130:	if (is_abbr (arg, "self me myself") && (IS_NPC (ch) || ch->pcdata->chobj == NULL))
hndl.c:3132:	for (rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room)
hndl.c:3136:		else if (!can_see (ch, rch) || (!is_abbr (arg, rch->name) && (IS_NPC (rch) || !is_abbr (arg, rch->morph))))
hndl.c:3358:	if ((obj = ch->pcdata->chobj) == NULL)
hndl.c:3368:	if (!IS_SET (ch->act, PLR_CHAMPION))
interpret.c:483:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_FREEZE))
interpret.c:496:		if (ch->blood[BLOOD_CURRENT] > 2)
interpret.c:499:			REMOVE_BIT (ch->more3, MORE3_DEATHSWHISPER);
interpret.c:540:		  if(IS_SET(ch->extra2, EXTRA2_RESEARCH))
interpret.c:564:			if (!IS_NPC (ch) && IS_SET (ch->extra2, EXTRA2_DAEMON_REGEN))
interpret.c:582:			if (!IS_NPC (ch) && IS_SET (ch->extra2, EXTRA2_TORPORED))
interpret.c:696:					else if (!str_cmp (cmd_table[cmd].name, "quit") && !IS_NPC (ch) && ch->pcdata->obj_vnum != 0)
interpret.c:784:					if (ch->pcdata->familiar == NULL)
interpret.c:785:						REMOVE_BIT (ch->extra, EXTRA_NO_ACTION);
interpret.c:789:			else if (ch->embraced != ARE_NONE)
interpret.c:966:					if (ch->position > POS_STUNNED)
interpret.c:1146:	if ((!IS_NPC (ch) && IS_SET (ch->act, PLR_LOG)) || fLogAll || cmd_table[cmd].log == LOG_ALWAYS)
interpret.c:1148:		sprintf (log_buf, "Log %s: %s", ch->name, logline);
interpret.c:1153:		sprintf( log_buf, "Log %s: %s", ch->name, logline);
interpret.c:1157:	if (ch->desc != NULL && ch->desc->snoop_by != NULL)
interpret.c:1159:		if ((vch = ch->desc->snoop_by->character) == NULL)
interpret.c:1160:			ch->desc->snoop_by = NULL;
interpret.c:1163:			write_to_buffer (ch->desc->snoop_by, "% ", 2);
interpret.c:1164:			write_to_buffer (ch->desc->snoop_by, logline, 0);
interpret.c:1165:			write_to_buffer (ch->desc->snoop_by, "\n\r", 2);
interpret.c:1167:		else if (ch->in_room == NULL || vch->in_room == NULL)
interpret.c:1169:			sprintf (buf, "You loose your mental link with %s.\n\r", ch->name);
interpret.c:1172:			ch->desc->snoop_by = NULL;
interpret.c:1174:		else if (ch->in_room != vch->in_room)
interpret.c:1176:			sprintf (buf, "You loose your mental link with %s.\n\r", ch->name);
interpret.c:1178:			ch->desc->snoop_by = NULL;
interpret.c:1182:			sprintf (buf, "%s thinks: %s.\n\r", ch->name, logline);
interpret.c:1203:	if (IS_SET (ch->extra2, EXTRA2_AFK))
interpret.c:1209:			sprintf (buf, "#C%s #eis back.#n\n\r", ch->name);
interpret.c:1211:			REMOVE_BIT (ch->extra2, EXTRA2_AFK);
interpret.c:1218:	if (ch->position < cmd_table[cmd].position && !IS_NPC (ch) && IS_VAMPIRE (ch) && get_disc (ch, DISC_PROTEAN) >= 5)
interpret.c:1221:		switch (ch->position)
interpret.c:1247:	else if (ch->position < cmd_table[cmd].position)
interpret.c:1249:		switch (ch->position)
interpret.c:1282:	sprintf (log_buf, "%s %s BY %s", cmd_table[cmd].name, argument, ch->name);
interpret.c:1310:	if (!IS_NPC (ch) && IS_SET (ch->act, PLR_NO_EMOTE))
interpret.c:1315:	if (IS_NPC (ch) && IS_SET (ch->act, ACT_NOPARTS))
interpret.c:1327:	if (!IS_NPC (ch) && get_disc (ch, DISC_PROTEAN) >= 5 && ch->position <= POS_SLEEPING)
interpret.c:1333:		switch (ch->position)
interpret.c:1575:		ch->pcdata->did_ic++;
interpret.c:1747:		p->disabled_by = str_dup (ch->name);
ki.c:56:	if (current_date >= ch->pcdata->denydate)
ki.c:60:		sprintf (buf, "You are denied for %d more days.\n\r", ch->pcdata->denydate - current_date);
m_c.c:155:        bug( "Mpasound - No argument: vnum %d.", ch->pIndexData->vnum );
m_c.c:159:    was_in_room = ch->in_room;
m_c.c:168:	ch->in_room = pexit->to_room;
m_c.c:174:  ch->in_room = was_in_room;
m_c.c:197:		ch->pIndexData->vnum );
m_c.c:204:	    ch->pIndexData->vnum );
m_c.c:211:	    ch->pIndexData->vnum );
m_c.c:215:    if ( IS_AFFECTED( ch, AFF_CHARM ) && ch->master == victim )
m_c.c:218:	    ch->pIndexData->vnum );
m_c.c:222:    if ( ch->position == POS_FIGHTING )
m_c.c:225:	    ch->pIndexData->vnum );
m_c.c:253:        bug( "Mpjunk - No argument: vnum %d.", ch->pIndexData->vnum );
m_c.c:270:      for ( obj = ch->carrying; obj != NULL; obj = obj_next )
m_c.c:302:       bug( "Mpechoaround - No argument:  vnum %d.", ch->pIndexData->vnum );
m_c.c:309:	    ch->pIndexData->vnum );
m_c.c:335:	   ch->pIndexData->vnum );
m_c.c:342:	    ch->pIndexData->vnum );
m_c.c:363:	    ch->pIndexData->vnum );
m_c.c:392:	bug( "Mpmload - Bad vnum as arg: vnum %d.", ch->pIndexData->vnum );
m_c.c:398:	bug( "Mpmload - Bad mob vnum: vnum %d.", ch->pIndexData->vnum );
m_c.c:403:    char_to_room( victim, ch->in_room );
m_c.c:433:    ch->gold = ch->gold + gold;
m_c.c:457:	    ch->pIndexData->vnum );
m_c.c:472:	    bug( "Mpoload - Bad syntax: vnum %d.", ch->pIndexData->vnum );
m_c.c:478:	    bug( "Mpoload - Bad level: vnum %d.", ch->pIndexData->vnum );
m_c.c:485:	bug( "Mpoload - Bad vnum arg: vnum %d.", ch->pIndexData->vnum );
m_c.c:496:	obj_to_room( obj, ch->in_room );
m_c.c:527:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
m_c.c:534:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
m_c.c:551:	    bug( "Mppurge - Bad argument: vnum %d.", ch->pIndexData->vnum );
m_c.c:558:	bug( "Mppurge - Purging a PC: vnum %d.", ch->pIndexData->vnum );
m_c.c:583:	bug( "Mpgoto - No argument: vnum %d.", ch->pIndexData->vnum );
m_c.c:589:	bug( "Mpgoto - No such location: vnum %d.", ch->pIndexData->vnum );
m_c.c:618:	bug( "Mpat - Bad argument: vnum %d.", ch->pIndexData->vnum );
m_c.c:624:	bug( "Mpat - No such location: vnum %d.", ch->pIndexData->vnum );
m_c.c:628:    original = ch->in_room;
m_c.c:637:    for ( wch = char_list; wch != NULL; wch = wch->next )
m_c.c:671:	bug( "Mptransfer - Bad syntax: vnum %d.", ch->pIndexData->vnum );
m_c.c:697:	location = ch->in_room;
m_c.c:704:	        ch->pIndexData->vnum );
m_c.c:711:		ch->pIndexData->vnum );
m_c.c:719:	    ch->pIndexData->vnum );
m_c.c:726:	    ch->pIndexData->vnum );
m_c.c:753:	bug( "Mpforce - Bad syntax: vnum %d.", ch->pIndexData->vnum );
m_c.c:764:	    vch_next = vch->next;
m_c.c:766:	    if ( vch->in_room == ch->in_room
m_c.c:781:	  	ch->pIndexData->vnum );
m_c.c:788:	    	ch->pIndexData->vnum );
m_p.c:1400: for ( vch = mob->in_room->people; vch; vch = vch->next_in_room )
m_p.c:1402:       &&  vch->level < MAX_LEVEL-3
m_p.c:1661: for ( vmob = ch->in_room->people; vmob != NULL; vmob = vmob->next_in_room )
m_p.c:1728:	for (victim = ch->in_room->people; victim != NULL; victim = v_next)
mxp.c:49:  if (!ch->desc)
mxp.c:179:  if (!ch->desc)
mxp.c:182:  if (!ch->desc->mxp)
mxp.c:187:  if (IS_SET(ch->act, PLR_MXP))
mxp.c:189:    REMOVE_BIT(ch->act, PLR_MXP);
mxp.c:194:    SET_BIT(ch->act, PLR_MXP);
olc.c:47:                             || strstr( Area->builders, ch->name ) != NULL  \
olc.c:49:                             || (IS_NPC(ch) && ch->pIndexData->area == Area) )
olc.c:608:	pArea = (AREA_DATA *) ch->desc->pEdit;
olc.c:631:		ch->desc->pEdit = NULL;
olc.c:632:		ch->desc->editor = 0;
olc.c:634:		ch->desc->connected = CON_PLAYING;
olc.c:666:		ch->desc->pEdit = (void *) pArea;
olc.c:974:	pRoom = ch->in_room;
olc.c:994:		ch->desc->pEdit = NULL;
olc.c:995:		ch->desc->editor = 0;
olc.c:998:		ch->desc->connected = CON_PLAYING;
olc.c:1120:			pExit->to_room = ch->in_room;
olc.c:1121:			pExit->vnum = ch->in_room->vnum;
olc.c:1469:		ch->desc->pEdit = (void *) pRoom;
olc.c:1845:	pObj = (OBJ_INDEX_DATA *) ch->desc->pEdit;
olc.c:1859:		ch->desc->pEdit = NULL;
olc.c:1860:		ch->desc->editor = 0;
olc.c:1862:		ch->desc->connected = CON_PLAYING;
olc.c:2156:		ch->desc->pEdit = (void *) pObj;
olc.c:2378:	pMob = (MOB_INDEX_DATA *) ch->desc->pEdit;
olc.c:2392:		ch->desc->pEdit = NULL;
olc.c:2393:		ch->desc->editor = 0;
olc.c:2395:		ch->desc->connected = CON_PLAYING;
olc.c:3119:		ch->desc->pEdit = (void *) pMob;
olc.c:3138:	pArea = ch->in_room->area;
olc.c:3165:	ch->desc->pEdit = (void *) pArea;
olc.c:3166:	ch->desc->editor = ED_AEDITOR;
olc.c:3193:		ch->desc->pEdit = (void *) pObj;
olc.c:3194:		ch->desc->editor = ED_OEDITOR;
olc.c:3239:			ch->desc->pEdit = (void *) pObj;
olc.c:3242:			ch->desc->editor = ED_OEDITOR;
olc.c:3263:	pRoom = ch->in_room;
olc.c:3321:	ch->desc->pEdit = (void *) pRoom;
olc.c:3322:	ch->desc->editor = ED_REDITOR;
olc.c:3348:		ch->desc->pEdit = (void *) pMob;
olc.c:3349:		ch->desc->editor = ED_MEDITOR;
olc.c:3396:			ch->desc->pEdit = (void *) pMob;
olc.c:3399:			ch->desc->editor = ED_MEDITOR;
olc.c:3422:		pArea = ch->in_room->area;
olc.c:3425:		pArea = ch->in_room->area;
olc.c:3463:	location = (arg[0] == '\0') ? ch->in_room : find_location (ch, arg);
olc.c:3470:	if (ch->in_room != location && room_is_private (location))
olc.c:3504:	for (rch = location->people; rch; rch = rch->next_in_room)
olc.c:3507:		one_argument (rch->name, buf);
olc.c:3722:	AREA_DATA *pArea = ch->in_room->area;
olc.c:3953:		if (ch->in_room->area->reset_first != NULL)
olc.c:3962:	if (!IS_BUILDER2 (ch, ch->in_room->area))
olc.c:3970:		AREA_DATA *pArea = ch->in_room->area;
olc.c:3976:			if (ch->in_room->area->reset_first == NULL)
olc.c:4026:				pReset->arg3 = ch->in_room->vnum;
olc.c:4041:					pReset->arg3 = ch->in_room->vnum;
olc.c:4057:			add_reset (ch->in_room->area, pReset, atoi (arg1));
olc.c:4668:		save_area (ch->in_room->area);
string.c:54:	ch->desc->pString = pString;
string.c:76:	ch->desc->pString = pString;
string.c:128:			fprintf(out,"%s\n", *ch->desc->pString);
string.c:152:			**ch->desc->pString = '\0';
string.c:159:			send_to_char (*ch->desc->pString, ch);
string.c:171:			*ch->desc->pString = string_replace (*ch->desc->pString, arg2, arg3);
string.c:181:			*ch->desc->pString = format_string (*ch->desc->pString);
string.c:205:	strcpy (buf, *ch->desc->pString);
string.c:209:		ch->desc->pString = NULL;
string.c:210:		if (ch->desc->editor == ED_REDITOR)
string.c:215:	if (strlen ( *ch->desc->pString ) + strlen (argument) >= (MAX_STRING_LENGTH - 4))
string.c:219:		free_string (*ch->desc->pString);
string.c:220:		*ch->desc->pString = str_dup (buf);
string.c:221:		ch->desc->pString = NULL;
string.c:227:	free_string (*ch->desc->pString);
string.c:228:	*ch->desc->pString = str_dup (buf);
sv.c:85:        if (ch->desc != NULL && ch->desc->connected != CON_PLAYING)
sv.c:88:        if (ch->desc != NULL && ch->desc->original != NULL)
sv.c:89:                ch = ch->desc->original;
sv.c:91:        ch->save_time = current_time;
sv.c:94:        sprintf (strsave, "%s%s", PLAYER_BAK_DIR, capitalize (ch->name));
sv.c:105:                        if (ch->carrying != NULL)
sv.c:106:                                fwrite_opt_obj (ch, ch->carrying, fp, 0);
sv.c:111:                        if (ch->carrying != NULL)
sv.c:112:                                fwrite_obj (ch, ch->carrying, fp, 0);
sv.c:135:	if (ch->desc != NULL && ch->desc->connected != CON_PLAYING)
sv.c:138:	if (ch->desc != NULL && ch->desc->original != NULL)
sv.c:139:		ch = ch->desc->original;
sv.c:141:	ch->save_time = current_time;
sv.c:144:	sprintf (strsave, "%s%s", PLAYER_DIR, capitalize (ch->name));
sv.c:156:			if (ch->carrying != NULL)
sv.c:157:				fwrite_opt_obj (ch, ch->carrying, fp, 0);
sv.c:162:			if (ch->carrying != NULL)
sv.c:163:				fwrite_obj (ch, ch->carrying, fp, 0);
sv.c:183:	fprintf (fp, "Name         %s~\n", ch->name);
sv.c:185:	fprintf (fp, "ShortDescr   %s~\n", ch->short_descr);
sv.c:186:	fprintf (fp, "LongDescr    %s~\n", ch->long_descr);
sv.c:187:	fprintf (fp, "Description  %s~\n", ch->description);
sv.c:188:	fprintf (fp, "Lord         %s~\n", ch->lord);
sv.c:189:	fprintf (fp, "Clan         %s~\n", ch->clan);
sv.c:190:	fprintf (fp, "Side         %s~\n", ch->side);
sv.c:191:	fprintf (fp, "Nature       %s~\n", ch->nature);
sv.c:192:	fprintf (fp, "Demeanor     %s~\n", ch->demeanor);
sv.c:193:	fprintf (fp, "Order        %s~\n", ch->order);
sv.c:194:	fprintf (fp, "Impulse      %s~\n", ch->impulse);
sv.c:195:	fprintf (fp, "Morph        %s~\n", ch->morph);
sv.c:196:	fprintf (fp, "Createtime   %s~\n", ch->createtime);
sv.c:197:	fprintf (fp, "Lasttime     %s~\n", ch->lasttime);
sv.c:198:	fprintf (fp, "Lasthost     %s~\n", ch->lasthost);
sv.c:199:	fprintf (fp, "Poweraction  %s~\n", ch->poweraction);
sv.c:200:	fprintf (fp, "Powertype    %s~\n", ch->powertype);
sv.c:201:	fprintf (fp, "Prompt       %s~\n", ch->prompt);
sv.c:202:	fprintf (fp, "Cprompt      %s~\n", ch->cprompt);
sv.c:203:	fprintf (fp, "Sex          %d\n", ch->sex);
sv.c:204:	fprintf (fp, "Race         %d\n", ch->race);
sv.c:205:	fprintf (fp, "Class        %d\n", ch->class);
sv.c:206:	fprintf (fp, "Immune       %d\n", ch->immune);
sv.c:207:	fprintf (fp, "Polyaff      %d\n", ch->polyaff);
sv.c:208:	fprintf (fp, "Itemaffect   %d\n", ch->itemaffect);
sv.c:209:	fprintf (fp, "Vampaff      %d\n", ch->vampaff);
sv.c:210:	fprintf (fp, "Vamppass     %d\n", ch->vamppass);
sv.c:211:	fprintf (fp, "Form         %d\n", ch->form);
sv.c:212:	fprintf (fp, "Body         %d\n", ch->body);
sv.c:213:	fprintf (fp, "Beast        %d\n", ch->beast);
sv.c:214:	fprintf (fp, "Truebeast    %d\n", ch->truebeast);
sv.c:215:	fprintf (fp, "Vampgen      %d\n", ch->vampgen);
sv.c:216:	fprintf (fp, "Spectype     %d\n", ch->spectype);
sv.c:217:	fprintf (fp, "Specpower    %d\n", ch->specpower);
sv.c:218:	fprintf (fp, "Home         %d\n", ch->home);
sv.c:219:	fprintf (fp, "Level        %d\n", ch->level);
sv.c:221:	fprintf (fp, "Security     %d\n", ch->pcdata->security);	/* OLC */
sv.c:222:	fprintf (fp, "Trust        %d\n", ch->trust);
sv.c:223:	fprintf (fp, "Paradox      %d %d %d\n", ch->paradox[0], ch->paradox[1], ch->paradox[2]);
sv.c:224:	fprintf (fp, "Played       %d\n", ch->played + (int) (current_time - ch->logon));
sv.c:225:	fprintf (fp, "Room         %d\n", (ch->in_room == get_room_index (ROOM_VNUM_LIMBO) && ch->was_in_room != NULL) ? ch->was_in_room->vnum : ch->in_room->vnum);
sv.c:227:	fprintf (fp, "PkPdMkMd     %d %d %d %d\n", ch->pkill, ch->pdeath, ch->mkill, ch->mdeath);
sv.c:229:	fprintf (fp, "Weapons      %d %d %d %d %d %d %d %d %d %d %d %d %d\n", ch->wpn[0], ch->wpn[1], ch->wpn[2], ch->wpn[3], ch->wpn[4], ch->wpn[5], ch->wpn[6], ch->wpn[7], ch->wpn[8], ch->wpn[9], ch->wpn[10], ch->wpn[11], ch->wpn[12]);
sv.c:230:	fprintf (fp, "Spells       %d %d %d %d %d\n", ch->spl[0], ch->spl[1], ch->spl[2], ch->spl[3], ch->spl[4]);
sv.c:231:	fprintf (fp, "Combat       %d %d %d %d %d %d %d %d\n", ch->cmbt[0], ch->cmbt[1], ch->cmbt[2], ch->cmbt[3], ch->cmbt[4], ch->cmbt[5], ch->cmbt[6], ch->cmbt[7]);
sv.c:232:	fprintf (fp, "Stance       %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", ch->stance[0], ch->stance[1], ch->stance[2], ch->stance[3], ch->stance[4], ch->stance[5], ch->stance[6], ch->stance[7], ch->stance[8], ch->stance[9], ch->stance[10], ch->stance[11], ch->stance[12], ch->stance[13], ch->stance[14], ch->stance[15]);
sv.c:233:	fprintf (fp, "Locationhp   %d %d %d %d %d %d %d\n", ch->loc_hp[0], ch->loc_hp[1], ch->loc_hp[2], ch->loc_hp[3], ch->loc_hp[4], ch->loc_hp[5], ch->loc_hp[6]);
sv.c:234:	fprintf (fp, "HpManaMove   %d %d %d %d %d %d\n", ch->hit, ch->max_hit, ch->mana, ch->max_mana, ch->move, ch->max_move);
sv.c:235:	fprintf (fp, "Agg          %d\n", ch->agg);
sv.c:236:	fprintf (fp, "Gold         %d\n", ch->gold);
sv.c:237:	fprintf (fp, "Exp          %d\n", ch->exp);
sv.c:238:	fprintf (fp, "Act          %d\n", ch->act);
sv.c:239:	fprintf (fp, "Extra        %d\n", ch->extra);
sv.c:240:	fprintf (fp, "More         %d\n", ch->more);
sv.c:241:	fprintf (fp, "More2         %d\n", ch->more2);
sv.c:242:	fprintf (fp, "More3         %d\n", ch->more3);
sv.c:243:	fprintf (fp, "AffectedBy   %d\n", ch->affected_by);
sv.c:245:	fprintf (fp, "Position     %d\n", ch->position == POS_FIGHTING ? POS_STANDING : ch->position);
sv.c:246:	fprintf (fp, "AggDmg       %d\n", ch->pcdata->aggdamage);
sv.c:247:	fprintf (fp, "BashingDmg   %d\n", ch->pcdata->bashingdamage);
sv.c:248:	fprintf (fp, "LethalDmg    %d\n", ch->pcdata->lethaldamage);
sv.c:249:	fprintf (fp, "SavingThrow  %d\n", ch->saving_throw);
sv.c:250:	fprintf (fp, "Alignment    %d\n", ch->alignment);
sv.c:251:	fprintf (fp, "Hitroll      %d\n", ch->hitroll);
sv.c:252:	fprintf (fp, "Damroll      %d\n", ch->damroll);
sv.c:253:	fprintf (fp, "Armor        %d\n", ch->armor);
sv.c:254:	fprintf (fp, "Wimpy        %d\n", ch->wimpy);
sv.c:255:	fprintf (fp, "Deaf         %d\n", ch->deaf);
sv.c:256:	fprintf (fp, "LocationXY   %d %d %d\n", ch->x, ch->y, ch->room);
sv.c:257:	fprintf (fp, "HomeXY       %d %d\n", ch->home_x, ch->home_y);
sv.c:259:	fprintf (fp, "Votes	   %d\n", ch->pcdata->votes);
sv.c:260:	fprintf (fp, "Lastvotetime %d %d %d\n", ch->pcdata->last_vote_time.year, ch->pcdata->last_vote_time.month, ch->pcdata->last_vote_time.day);
sv.c:262:	fprintf (fp, "WpRegain     %d\n", ch->pcdata->wp_regain_counter);
sv.c:263:	fprintf (fp, "BloodCounter %d\n", ch->pcdata->blood_burn_counter);
sv.c:264:	fprintf (fp, "AutoVote %d\n", ch->pcdata->auto_vote_counter);
sv.c:268:		fprintf (fp, "Vnum         %d\n", ch->pIndexData->vnum);
sv.c:272:		fprintf (fp, "Vision        %d\n", ch->pcdata->vision);
sv.c:273:		fprintf (fp, "ShortDescL %s~n", ch->pcdata->lupusdescshort);
sv.c:274:		fprintf (fp, "ShortDescC %s~n", ch->pcdata->crinosdescshort);
sv.c:275:		fprintf (fp, "ShortDescH %s~n", ch->pcdata->hispodescshort);
sv.c:276:		fprintf (fp, "ShortDescG %s~n", ch->pcdata->glabrodescshort);
sv.c:277:		fprintf (fp, "LupusDesc  %s~\n", ch->pcdata->lupusdesc);
sv.c:278:		fprintf (fp, "CrinosDesc  %s~\n", ch->pcdata->crinosdesc);
sv.c:279:		fprintf (fp, "HispoDesc  %s~\n", ch->pcdata->hispodesc);
sv.c:280:		fprintf (fp, "GlabroDesc  %s~\n", ch->pcdata->glabrodesc);
sv.c:281:		fprintf (fp, "TempDesc  %s~\n", ch->pcdata->tempdesc);
sv.c:282:		fprintf (fp, "ShowTempDesc %d\n", ch->pcdata->showtempdesc);
sv.c:283:		fprintf (fp, "Giftlist  %s~\n", ch->pcdata->giftlist);
sv.c:284:		fprintf (fp, "Password     %s~\n", ch->pcdata->pwd);
sv.c:285:		fprintf (fp, "Bamfin       %s~\n", ch->pcdata->bamfin);
sv.c:286:		fprintf (fp, "Bamfout      %s~\n", ch->pcdata->bamfout);
sv.c:287:		fprintf (fp, "Title        %s~\n", ch->pcdata->title);
sv.c:288:		fprintf (fp, "Conception   %s~\n", ch->pcdata->conception);
sv.c:289:		fprintf (fp, "Parents      %s~\n", ch->pcdata->parents);
sv.c:290:		fprintf (fp, "Cparents     %s~\n", ch->pcdata->cparents);
sv.c:291:		fprintf (fp, "Marriage     %s~\n", ch->pcdata->marriage);
sv.c:292:		fprintf (fp, "Email        %s~\n", ch->pcdata->email);
sv.c:293:		fprintf (fp, "Conding      %s~\n", ch->pcdata->conding);
sv.c:294:		fprintf (fp, "Love         %s~\n", ch->pcdata->love);
sv.c:295:		fprintf (fp, "Coterie      %s~\n", ch->pcdata->coterie);
sv.c:296:		fprintf (fp, "CotTime      %s~\n", ch->pcdata->cot_time);
sv.c:297:		fprintf (fp, "CotClans     %s~\n", ch->pcdata->cot_clans);
sv.c:298:		fprintf (fp, "CotSides     %s~\n", ch->pcdata->cot_sides);
sv.c:299:		fprintf (fp, "Stancename   %s~\n", ch->pcdata->stancename);
sv.c:300:		fprintf (fp, "Stancelist   %s~\n", ch->pcdata->stancelist);
sv.c:301:		fprintf (fp, "Stancework   %s~\n", ch->pcdata->stancework);
sv.c:302:		fprintf (fp, "Leader       %s~\n", ch->pcdata->leader);
sv.c:303:		fprintf (fp, "DenyDate     %d\n", ch->pcdata->denydate);
sv.c:304:		fprintf (fp, "Stancemove   %d %d %d %d %d\n", ch->pcdata->stancemove[0], ch->pcdata->stancemove[1], ch->pcdata->stancemove[2], ch->pcdata->stancemove[3], ch->pcdata->stancemove[4]);
sv.c:305:		fprintf (fp, "AttrPerm     %d %d %d %d %d\n", ch->pcdata->perm_str, ch->pcdata->perm_int, ch->pcdata->perm_wis, ch->pcdata->perm_dex, ch->pcdata->perm_con);
sv.c:307:		fprintf (fp, "AttrMod      %d %d %d %d %d\n", ch->pcdata->mod_str, ch->pcdata->mod_int, ch->pcdata->mod_wis, ch->pcdata->mod_dex, ch->pcdata->mod_con);
sv.c:309:		fprintf (fp, "Quest        %d\n", ch->pcdata->quest);
sv.c:310:		fprintf (fp, "Wolf         %d\n", ch->pcdata->wolf);
sv.c:311:		fprintf (fp, "Rank         %d\n", ch->pcdata->rank);
sv.c:312:		fprintf (fp, "Virtues      %d %d %d\n", ch->pcdata->virtues[VIRTUE_CONSCIENCE], ch->pcdata->virtues[VIRTUE_SELFCONTROL], ch->pcdata->virtues[VIRTUE_COURAGE]);	
sv.c:313:		fprintf (fp, "Faith         %d\n", ch->pcdata->faith);
sv.c:316:			fprintf (fp, "Conviction   %d %d\n", ch->pcdata->conviction[CONVICTION_CURRENT], ch->pcdata->conviction[CONVICTION_MAX]);
sv.c:317:			fprintf (fp, "ConvictionBank  %d\n", ch->pcdata->conviction_bank);
sv.c:318:			fprintf (fp, "Virtues      %d %d %d %d %d %d", ch->pcdata->virtues[VIRTUE_CONSCIENCE], ch->pcdata->virtues[VIRTUE_SELFCONTROL], ch->pcdata->virtues[VIRTUE_COURAGE], ch->pcdata->virtues[VIRTUE_WISDOM], ch->pcdata->virtues[VIRTUE_FAITH], ch->pcdata->virtues[VIRTUE_ZEAL]);
sv.c:322:			fprintf(fp, "Virtues	   %d %d %d\n", ch->pcdata->virtues[VIRTUE_CONSCIENCE], ch->pcdata->virtues[VIRTUE_SELFCONTROL], ch->pcdata->virtues[VIRTUE_COURAGE]);	
sv.c:324:		fprintf (fp, "Regenerate   %d\n", ch->pcdata->regenerate);
sv.c:325:		fprintf (fp, "Demonic      %d\n", ch->pcdata->demonic);
sv.c:326:		fprintf (fp, "Atm          %d\n", ch->pcdata->atm);
sv.c:327:		fprintf (fp, "Necromancy   %d\n", ch->pcdata->necromancy);
sv.c:328:		fprintf (fp, "Obeah        %d\n", ch->pcdata->obeah);
sv.c:329:		fprintf (fp, "Darkness     %d\n", ch->pcdata->darkness);
sv.c:330:		fprintf (fp, "Temporis     %d\n", ch->pcdata->temporis);
sv.c:331:		fprintf (fp, "Silence      %d\n", ch->pcdata->silence);
sv.c:332:		fprintf (fp, "Dementation      %d\n", ch->pcdata->dementation);
sv.c:333:		fprintf (fp, "Devil      %d\n", ch->pcdata->devil);
sv.c:334:		fprintf (fp, "Bodymods     %d\n", ch->pcdata->bodymods);
sv.c:335:		fprintf (fp, "Reina        %d\n", ch->pcdata->reina);
sv.c:336:		fprintf (fp, "Bpoints      %d\n", ch->pcdata->bpoints);
sv.c:337:		fprintf (fp, "Dpoints      %d\n", ch->pcdata->dpoints);
sv.c:338:		fprintf (fp, "Gpoints      %d\n", ch->pcdata->gpoints);
sv.c:339:		fprintf (fp, "Rpoints      %d\n", ch->pcdata->rpoints);
sv.c:340:		fprintf (fp, "Wpoints      %d\n", ch->pcdata->wpoints);
sv.c:341:		fprintf (fp, "Spirit       %d\n", ch->pcdata->spirit);
sv.c:342:		fprintf (fp, "Conjure      %d\n", ch->pcdata->conjure);
sv.c:343:		fprintf (fp, "Celerity     %d\n", ch->pcdata->celerity);
sv.c:344:		fprintf (fp, "Firstaid     %d\n", ch->pcdata->firstaid);
sv.c:345:		fprintf (fp, "Repair       %d\n", ch->pcdata->repair);
sv.c:346:		fprintf (fp, "Teach        %d\n", ch->pcdata->teach);
sv.c:347:		fprintf (fp, "Learn        %d\n", ch->pcdata->learn);
sv.c:348:		fprintf (fp, "Notes        %d\n", ch->pcdata->notes);
sv.c:349:		fprintf (fp, "Evileye      %d\n", ch->pcdata->evileye);
sv.c:350:		fprintf (fp, "Gnosis       %d %d\n", ch->pcdata->gnosis[0], ch->pcdata->gnosis[1]);
sv.c:351:		fprintf (fp, "Rage       %d %d\n", ch->pcdata->rage[0], ch->pcdata->rage[1]);
sv.c:353:		fprintf (fp, "Absorb       %d %d %d %d %d %d\n", ch->pcdata->absorb[0], ch->pcdata->absorb[1], ch->pcdata->absorb[2], ch->pcdata->absorb[3], ch->pcdata->absorb[4], ch->pcdata->absorb[5]);
sv.c:354:		fprintf (fp, "Qstats       %d %d %d %d %d\n", ch->pcdata->qstats[0], ch->pcdata->qstats[1], ch->pcdata->qstats[2], ch->pcdata->qstats[3], ch->pcdata->qstats[4]);
sv.c:355:		fprintf (fp, "Exercise     %d %d %d %d\n", ch->pcdata->exercise[0], ch->pcdata->exercise[1], ch->pcdata->exercise[2], ch->pcdata->exercise[3]);
sv.c:356:		fprintf (fp, "Language     %d %d\n", ch->pcdata->language[0], ch->pcdata->language[1]);
sv.c:357:		fprintf (fp, "Stage        %d %d %d\n", ch->pcdata->stage[0], ch->pcdata->stage[1], ch->pcdata->stage[2]);
sv.c:358:		fprintf (fp, "Status       %d %d %d\n", ch->pcdata->status[0], ch->pcdata->status[1], ch->pcdata->status[2]);
sv.c:359:		fprintf (fp, "Wolfform     %d %d\n", ch->pcdata->wolfform[0], ch->pcdata->wolfform[1]);
sv.c:360:		fprintf (fp, "Score        %d %d %d %d %d %d\n", ch->pcdata->score[0], ch->pcdata->score[1], ch->pcdata->score[2], ch->pcdata->score[3], ch->pcdata->score[4], ch->pcdata->score[5]);
sv.c:361:		fprintf (fp, "Runes        %d %d %d %d\n", ch->pcdata->runes[0], ch->pcdata->runes[1], ch->pcdata->runes[2], ch->pcdata->runes[3]);
sv.c:362:		fprintf (fp, "Disc         %d %d %d %d %d %d %d %d %d %d %d\n", ch->pcdata->disc[0], ch->pcdata->disc[1], ch->pcdata->disc[2], ch->pcdata->disc[3], ch->pcdata->disc[4], ch->pcdata->disc[5], ch->pcdata->disc[6], ch->pcdata->disc[7], ch->pcdata->disc[8], ch->pcdata->disc[9], ch->pcdata->disc[10]);
sv.c:363:		fprintf (fp, "Research     %d %d\n", ch->pcdata->research[0], ch->pcdata->research[1]);
sv.c:365:		fprintf (fp, "Rituals      %d %d %d %d %d %d %d %d %d %d\n", ch->pcdata->rituals[0], ch->pcdata->rituals[1], ch->pcdata->rituals[2], ch->pcdata->rituals[3], ch->pcdata->rituals[4], ch->pcdata->rituals[5], ch->pcdata->rituals[6], ch->pcdata->rituals[7], ch->pcdata->rituals[8], ch->pcdata->rituals[9]);
sv.c:366:		fprintf (fp, "Clandisc     %d %d %d\n", ch->pcdata->cland[0], ch->pcdata->cland[1], ch->pcdata->cland[2]);
sv.c:367:		fprintf (fp, "Diableries   %d %d\n", ch->pcdata->diableries[0], ch->pcdata->diableries[1]);
sv.c:368:		fprintf (fp, "Renown    %d %d %d %d %d %d\n", ch->pcdata->renown[0], ch->pcdata->renown[1], ch->pcdata->renown[2], ch->pcdata->renown[3], ch->pcdata->renown[4], ch->pcdata->renown[5]);
sv.c:369:		fprintf (fp, "Breed        %d %d %d\n", ch->pcdata->breed[0], ch->pcdata->breed[1], ch->pcdata->breed[2]);
sv.c:370:		fprintf (fp, "Auspice      %d %d %d %d %d\n", ch->pcdata->auspice[0], ch->pcdata->auspice[1], ch->pcdata->auspice[2], ch->pcdata->auspice[3], ch->pcdata->auspice[4]);
sv.c:372:			 ch->pcdata->tribes[0], ch->pcdata->tribes[1], ch->pcdata->tribes[2], ch->pcdata->tribes[3], ch->pcdata->tribes[4], ch->pcdata->tribes[5], ch->pcdata->tribes[6], ch->pcdata->tribes[7], ch->pcdata->tribes[8], ch->pcdata->tribes[9], ch->pcdata->tribes[10], ch->pcdata->tribes[11], ch->pcdata->tribes[12], ch->pcdata->tribes[13], ch->pcdata->tribes[14], ch->pcdata->tribes[15], ch->pcdata->tribes[16], ch->pcdata->tribes[17], ch->pcdata->tribes[18], ch->pcdata->tribes[19]);
sv.c:374:			 ch->pcdata->thaum[0], ch->pcdata->thaum[1], ch->pcdata->thaum[2], ch->pcdata->thaum[3], ch->pcdata->thaum[4], ch->pcdata->thaum[5], ch->pcdata->thaum[6], ch->pcdata->thaum[7], ch->pcdata->thaum[8], ch->pcdata->thaum[9], ch->pcdata->thaum[10], ch->pcdata->thaum[11], ch->pcdata->thaum[12], ch->pcdata->thaum[13], ch->pcdata->thaum[14], ch->pcdata->thaum[15], ch->pcdata->thaum[16], ch->pcdata->thaum[17], ch->pcdata->thaum[18], ch->pcdata->thaum[19]);
sv.c:377:			 ch->pcdata->powers[0], ch->pcdata->powers[1], ch->pcdata->powers[2], ch->pcdata->powers[3], ch->pcdata->powers[4], ch->pcdata->powers[5], ch->pcdata->powers[6], ch->pcdata->powers[7], ch->pcdata->powers[8], ch->pcdata->powers[9], ch->pcdata->powers[10], ch->pcdata->powers[11], ch->pcdata->powers[12], ch->pcdata->powers[13], ch->pcdata->powers[14], ch->pcdata->powers[15], ch->pcdata->powers[16], ch->pcdata->powers[17], ch->pcdata->powers[18], ch->pcdata->powers[19],	//added stuff
sv.c:378:			 ch->pcdata->powers[20], ch->pcdata->powers[21], ch->pcdata->powers[22],
sv.c:379:			 ch->pcdata->powers[23], ch->pcdata->powers[24], ch->pcdata->powers[25], ch->pcdata->powers[26], ch->pcdata->powers[27], ch->pcdata->powers[28], ch->pcdata->powers[29], ch->pcdata->powers[30], ch->pcdata->powers[31], ch->pcdata->powers[32], ch->pcdata->powers[33], ch->pcdata->powers[34], ch->pcdata->powers[35], ch->pcdata->powers[36], ch->pcdata->powers[37], ch->pcdata->powers[38], ch->pcdata->powers[39]);
sv.c:383:			 ch->pcdata->powers_mod[0], ch->pcdata->powers_mod[1], ch->pcdata->powers_mod[2],
sv.c:384:			 ch->pcdata->powers_mod[3], ch->pcdata->powers_mod[4], ch->pcdata->powers_mod[5], ch->pcdata->powers_mod[6], ch->pcdata->powers_mod[7], ch->pcdata->powers_mod[8], ch->pcdata->powers_mod[9], ch->pcdata->powers_mod[10], ch->pcdata->powers_mod[11], ch->pcdata->powers_mod[12], ch->pcdata->powers_mod[13], ch->pcdata->powers_mod[14], ch->pcdata->powers_mod[15], ch->pcdata->powers_mod[16], ch->pcdata->powers_mod[17], ch->pcdata->powers_mod[18], ch->pcdata->powers_mod[19]);
sv.c:386:			 ch->pcdata->powers_set[0], ch->pcdata->powers_set[1], ch->pcdata->powers_set[2],
sv.c:387:			 ch->pcdata->powers_set[3], ch->pcdata->powers_set[4], ch->pcdata->powers_set[5], ch->pcdata->powers_set[6], ch->pcdata->powers_set[7], ch->pcdata->powers_set[8], ch->pcdata->powers_set[9], ch->pcdata->powers_set[10], ch->pcdata->powers_set[11], ch->pcdata->powers_set[12], ch->pcdata->powers_set[13], ch->pcdata->powers_set[14], ch->pcdata->powers_set[15], ch->pcdata->powers_set[16], ch->pcdata->powers_set[17], ch->pcdata->powers_set[18], ch->pcdata->powers_set[19]);
sv.c:388:		fprintf (fp, "PowersWear   %d\n", ch->pcdata->powers_set_wear);
sv.c:389:		fprintf (fp, "Genes        %d %d %d %d %d %d %d %d %d %d\n", ch->pcdata->genes[0], ch->pcdata->genes[1], ch->pcdata->genes[2], ch->pcdata->genes[3], ch->pcdata->genes[4], ch->pcdata->genes[5], ch->pcdata->genes[6], ch->pcdata->genes[7], ch->pcdata->genes[8], ch->pcdata->genes[9]);
sv.c:390:		fprintf (fp, "CotMin       %d %d %d %d %d %d %d %d %d %d %d %d\n", ch->pcdata->cot_min[0], ch->pcdata->cot_min[1], ch->pcdata->cot_min[2], ch->pcdata->cot_min[3], ch->pcdata->cot_min[4], ch->pcdata->cot_min[5], ch->pcdata->cot_min[6], ch->pcdata->cot_min[7], ch->pcdata->cot_min[8], ch->pcdata->cot_min[9], ch->pcdata->cot_min[10], ch->pcdata->cot_min[11]);
sv.c:391:		fprintf (fp, "Blood        %d %d\n", ch->blood[0], ch->blood[1]);
sv.c:392:		fprintf (fp, "Willpower    %d %d\n", ch->pcdata->willpower[0], ch->pcdata->willpower[1]);
sv.c:393:		fprintf (fp, "Resist       %d %d %d %d %d\n", ch->pcdata->resist[0], ch->pcdata->resist[1], ch->pcdata->resist[2], ch->pcdata->resist[3], ch->pcdata->resist[4]);
sv.c:394:		fprintf (fp, "Power        %d %d\n", ch->pcdata->power[0], ch->pcdata->power[1]);
sv.c:396:		fprintf (fp, "FakeCon      %d %d %d %d %d %d %d %d\n", ch->pcdata->fake_skill, ch->pcdata->fake_stance, ch->pcdata->fake_hit, ch->pcdata->fake_dam, ch->pcdata->fake_ac, ch->pcdata->fake_hp, ch->pcdata->fake_mana, ch->pcdata->fake_move);
sv.c:398:		fprintf (fp, "FakeTwo      %d %d %d %d %d %d %d %d\n", ch->pcdata->fake_max_hp, ch->pcdata->fake_max_mana, ch->pcdata->fake_max_move, ch->pcdata->fake_stats[STAT_STR], ch->pcdata->fake_stats[STAT_INT], ch->pcdata->fake_stats[STAT_WIS], ch->pcdata->fake_stats[STAT_DEX], ch->pcdata->fake_stats[STAT_CON]);
sv.c:400:		if (ch->pcdata->obj_vnum != 0)
sv.c:401:			fprintf (fp, "Objvnum      %d\n", ch->pcdata->obj_vnum);
sv.c:403:		fprintf (fp, "Majesty      %d\n", ch->pcdata->majesty);
sv.c:405:		fprintf (fp, "Condition    %d %d %d\n", ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2]);
sv.c:407:		fprintf (fp, "Exhaustion   %d\n", ch->pcdata->exhaustion);
sv.c:408:		fprintf (fp, "TempClass    %d\n", ch->pcdata->class);
sv.c:414:			fprintf (fp, "%s %ld ", boards[i].short_name, ch->pcdata->last_note[i]);
sv.c:419:			fprintf (fp, " %d", ch->attributes[i]);
sv.c:424:			fprintf (fp, " %d", ch->abilities[TALENTS][i]);
sv.c:429:			fprintf (fp, " %d", ch->abilities[SKILLS][i]);
sv.c:434:			fprintf (fp, " %d", ch->abilities[KNOWLEDGES][i]);
sv.c:439:			if (skill_table[sn].name != NULL && ch->pcdata->learned[sn] > 0)
sv.c:441:				fprintf (fp, "Skill        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn].name);
sv.c:446:	for (paf = ch->affected; paf != NULL; paf = paf->next)
sv.c:472:	fprintf (fp, "NAM %s~\n", ch->name);
sv.c:474:	if (strlen (ch->short_descr) > 1)
sv.c:475:		fprintf (fp, "SDS %s~\n", ch->short_descr);
sv.c:476:	if (strlen (ch->long_descr) > 1)
sv.c:477:		fprintf (fp, "LDS %s~\n", ch->long_descr);
sv.c:478:	if (strlen (ch->description) > 1)
sv.c:479:		fprintf (fp, "DDS %s~\n", ch->description);
sv.c:480:	if (ch->pcdata->doing != NULL)
sv.c:481:		fprintf (fp, "DNG %s~\n", ch->pcdata->doing);
sv.c:483:	if (ch->pcdata->aura != NULL)
sv.c:484:		fprintf (fp, "AUR %s~\n", ch->pcdata->aura);
sv.c:485:	if (ch->pcdata->voice != NULL)
sv.c:486:		fprintf (fp, "VOI %s~\n", ch->pcdata->voice);	
sv.c:487:	if (ch->pcdata->roomdesc != NULL)
sv.c:488:		fprintf (fp, "RDS %s~\n", ch->pcdata->roomdesc);	
sv.c:490:	if (ch->pcdata->show_social)
sv.c:491:		fprintf (fp, "SSD %d\n", ch->pcdata->show_social);
sv.c:492:	if (strlen (ch->lord) > 1)
sv.c:493:		fprintf (fp, "LRD %s~\n", ch->lord);
sv.c:494:	if (strlen (ch->clan) > 1)
sv.c:495:		fprintf (fp, "CLN %s~\n", ch->clan);
sv.c:496:	if (strlen (ch->side) > 1)
sv.c:497:		fprintf (fp, "SID %s~\n", ch->side);
sv.c:498:	if (strlen (ch->nature) > 1)
sv.c:499:		fprintf (fp, "NTR %s~\n", ch->nature);
sv.c:500:	if (strlen (ch->demeanor) > 1)
sv.c:501:		fprintf (fp, "DNR %s~\n", ch->demeanor);
sv.c:502:	if (strlen (ch->order) > 1)
sv.c:503:		fprintf (fp, "ORD %s~\n", ch->order);
sv.c:504:	if (strlen (ch->impulse) > 1)
sv.c:505:		fprintf (fp, "IMS %s~\n", ch->impulse);
sv.c:506:	if (strlen (ch->morph) > 1)
sv.c:507:		fprintf (fp, "MRF %s~\n", ch->morph);
sv.c:508:	if (strlen (ch->mem_name) > 1)
sv.c:509:		fprintf (fp, "MMN %s~\n", ch->mem_name);
sv.c:510:	if (strlen (ch->mem_desc) > 1)
sv.c:511:		fprintf (fp, "MMD %s~\n", ch->mem_desc);
sv.c:512:	fprintf (fp, "CTM %s~\n", ch->createtime);
sv.c:513:	fprintf (fp, "LTM %s~\n", ch->lasttime);
sv.c:514:	fprintf (fp, "LHS %s~\n", ch->lasthost);
sv.c:515:	fprintf (fp, "PLN %d\n", ch->plane);
sv.c:516:	fprintf (fp, "QNT %d %d\n", ch->quintessence, ch->max_quintessence);
sv.c:517:	if (strlen (ch->poweraction) > 1)
sv.c:518:		fprintf (fp, "POA %s~\n", ch->poweraction);
sv.c:519:	if (strlen (ch->powertype) > 1)
sv.c:520:		fprintf (fp, "POT    %s~\n", ch->powertype);
sv.c:521:	if (strlen (ch->prompt) > 1)
sv.c:522:		fprintf (fp, "PRM %s~\n", ch->prompt);
sv.c:523:	if (strlen (ch->cprompt) > 1)
sv.c:524:		fprintf (fp, "CPM %s~\n", ch->cprompt);
sv.c:525:	fprintf (fp, "SEX %d\n", ch->sex);
sv.c:526:	if (ch->race)
sv.c:527:		fprintf (fp, "RAC %d\n", ch->race);
sv.c:528:	if (ch->pcdata->vision)
sv.c:529:		fprintf (fp, "VSN %d\n", ch->pcdata->vision);
sv.c:531:	if (ch->class)
sv.c:532:		fprintf (fp, "CLS %d\n", ch->class);
sv.c:533:	if (ch->immune)
sv.c:534:		fprintf (fp, "IMU %d\n", ch->immune);
sv.c:535:	if (ch->polyaff)
sv.c:536:		fprintf (fp, "PAF %d\n", ch->polyaff);
sv.c:537:	if (ch->itemaffect)
sv.c:538:		fprintf (fp, "IAF %d\n", ch->itemaffect);
sv.c:539:	if (ch->vampaff)
sv.c:540:		fprintf (fp, "VAF %d\n", ch->vampaff);
sv.c:541:	if (ch->vamppass != -1)
sv.c:542:		fprintf (fp, "VPS %d\n", ch->vamppass);
sv.c:543:	if (ch->form)
sv.c:544:		fprintf (fp, "FRM %d\n", ch->form);
sv.c:545:	if (ch->body != 32767)
sv.c:546:		fprintf (fp, "BDY %d\n", ch->body);
sv.c:547:	if (ch->beast != 20)
sv.c:548:		fprintf (fp, "BST %d\n", ch->beast);
sv.c:549:	if (ch->truebeast != 20)
sv.c:550:		fprintf (fp, "TBS %d\n", ch->truebeast);
sv.c:551:	if (ch->vampgen)
sv.c:552:		fprintf (fp, "GEN %d\n", ch->vampgen);
sv.c:553:	if (ch->spectype)
sv.c:554:		fprintf (fp, "SPT %d\n", ch->spectype);
sv.c:555:	if (ch->spectype)
sv.c:556:		fprintf (fp, "SPP %d\n", ch->specpower);
sv.c:557:	if (ch->home != 3700)
sv.c:558:		fprintf (fp, "HOM %d\n", ch->home);
sv.c:559:	fprintf (fp, "WXY %d %d\n", ch->x, ch->y);
sv.c:560:	fprintf (fp, "HXY %d %d\n", ch->home_x, ch->home_y);
sv.c:561:	fprintf (fp, "VOT %d\n", ch->pcdata->votes);
sv.c:562:	fprintf (fp, "LVT %d %d %d\n", ch->pcdata->last_vote_time.year, ch->pcdata->last_vote_time.month, ch->pcdata->last_vote_time.day);
sv.c:563:	fprintf (fp, "LVL %d\n", ch->level);
sv.c:565:		fprintf (fp, "VRT %d %d %d\n", ch->pcdata->virtues[VIRTUE_CONSCIENCE], ch->pcdata->virtues[VIRTUE_SELFCONTROL], ch->pcdata->virtues[VIRTUE_COURAGE]); */
sv.c:566:	fprintf (fp, "ROD %d\n", ch->pcdata->road);
sv.c:567:	fprintf (fp, "RDT %d\n", ch->pcdata->roadt);
sv.c:569:		fprintf (fp, "VRT %d %d %d %d %d %d\n", ch->pcdata->virtues[VIRTUE_CONSCIENCE], ch->pcdata->virtues[VIRTUE_SELFCONTROL], ch->pcdata->virtues[VIRTUE_COURAGE], ch->pcdata->virtues[VIRTUE_WISDOM], ch->pcdata->virtues[VIRTUE_FAITH], ch->pcdata->virtues[VIRTUE_ZEAL]);
sv.c:571:		fprintf (fp, "VRT %d %d %d\n", ch->pcdata->virtues[VIRTUE_CONSCIENCE], ch->pcdata->virtues[VIRTUE_SELFCONTROL], ch->pcdata->virtues[VIRTUE_COURAGE]);
sv.c:573:		fprintf (fp, "SCR %d\n", ch->pcdata->security);	/* OLC */
sv.c:574:	if (ch->trust)
sv.c:575:		fprintf (fp, "TRS %d\n", ch->trust);
sv.c:576:	fprintf (fp, "PLY %d\n", ch->played + (int) (current_time - ch->logon));
sv.c:577:	fprintf (fp, "ROM %d\n", (ch->in_room == get_room_index (ROOM_VNUM_LIMBO) && ch->was_in_room != NULL) ? ch->was_in_room->vnum : ch->in_room->vnum);
sv.c:579:	fprintf (fp, "KAD %d %d %d %d\n", ch->pkill, ch->pdeath, ch->mkill, ch->mdeath);
sv.c:581:	fprintf (fp, "WPN %d %d %d %d %d %d %d %d %d %d %d %d %d\n", ch->wpn[0], ch->wpn[1], ch->wpn[2], ch->wpn[3], ch->wpn[4], ch->wpn[5], ch->wpn[6], ch->wpn[7], ch->wpn[8], ch->wpn[9], ch->wpn[10], ch->wpn[11], ch->wpn[12]);
sv.c:582:	fprintf (fp, "SPL %d %d %d %d %d\n", ch->spl[0], ch->spl[1], ch->spl[2], ch->spl[3], ch->spl[4]);
sv.c:583:	fprintf (fp, "STN %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", ch->stance[0], ch->stance[1], ch->stance[2], ch->stance[3], ch->stance[4], ch->stance[5], ch->stance[6], ch->stance[7], ch->stance[8], ch->stance[9], ch->stance[10], ch->stance[11], ch->stance[12], ch->stance[13], ch->stance[14], ch->stance[15]);
sv.c:584:	if (ch->loc_hp[0] | ch->loc_hp[1] | ch->loc_hp[2] | ch->loc_hp[3] | ch->loc_hp[4] | ch->loc_hp[5] | ch->loc_hp[6])
sv.c:585:		fprintf (fp, "LHP %d %d %d %d %d %d %d\n", ch->loc_hp[0], ch->loc_hp[1], ch->loc_hp[2], ch->loc_hp[3], ch->loc_hp[4], ch->loc_hp[5], ch->loc_hp[6]);
sv.c:586:	fprintf (fp, "HMM %d %d %d %d %d %d\n", ch->hit, ch->max_hit, ch->mana, ch->max_mana, ch->move, ch->max_move);
sv.c:587:	if (ch->agg)
sv.c:588:		fprintf (fp, "AGG %d\n", ch->agg);
sv.c:589:	if (ch->gold)
sv.c:590:		fprintf (fp, "GLD %d\n", ch->gold);
sv.c:591:	if (ch->exp)
sv.c:592:		fprintf (fp, "EXP %d\n", ch->exp);
sv.c:593:	if (ch->act != (PLR_BLANK | PLR_COMBINE | PLR_PROMPT))
sv.c:594:		fprintf (fp, "ACT %d\n", ch->act);
sv.c:595:	if (ch->extra)
sv.c:596:		fprintf (fp, "EXT %d\n", ch->extra);
sv.c:597:	if (ch->extra2)
sv.c:598:		fprintf (fp, "EX2 %d\n", ch->extra2);
sv.c:599:	if (ch->more)
sv.c:600:		fprintf (fp, "MOR %d\n", ch->more);
sv.c:601:	if (ch->more2)
sv.c:602:		fprintf (fp, "MOR2 %d\n", ch->more2);
sv.c:603:	if (ch->more3)
sv.c:604:		fprintf (fp, "MOR3 %d\n", ch->more3);
sv.c:606:	if (ch->autostance)
sv.c:607:		fprintf (fp, "AUT %d\n", ch->autostance);
sv.c:608:	if (ch->affected_by)
sv.c:609:		fprintf (fp, "AFB %d\n", ch->affected_by);
sv.c:611:	fprintf (fp, "POS %d\n", ch->position == POS_FIGHTING ? POS_STANDING : ch->position);
sv.c:613:	if (ch->pcdata->aggdamage)
sv.c:614:		fprintf (fp, "ADM %d\n", ch->pcdata->aggdamage);
sv.c:615:	if (ch->pcdata->lethaldamage)
sv.c:616:		fprintf (fp, "LDM %d\n", ch->pcdata->lethaldamage);
sv.c:617:	if (ch->pcdata->bashingdamage)
sv.c:618:		fprintf (fp, "BDM %d\n", ch->pcdata->bashingdamage);
sv.c:620:	if (ch->saving_throw)
sv.c:621:		fprintf (fp, "SAV %d\n", ch->saving_throw);
sv.c:622:	if (ch->alignment)
sv.c:623:		fprintf (fp, "ALN %d\n", ch->alignment);
sv.c:624:	fprintf (fp, "HIT %d\n", ch->hitroll);
sv.c:625:	fprintf (fp, "DAM %d\n", ch->damroll);
sv.c:626:	fprintf (fp, "ARM %d\n", ch->armor);
sv.c:627:	if (ch->wimpy)
sv.c:628:		fprintf (fp, "WMP %d\n", ch->wimpy);
sv.c:629:	if (ch->deaf)
sv.c:630:		fprintf (fp, "DEF %d\n", ch->deaf);
sv.c:632:	fprintf (fp, "WRC %d\n", ch->pcdata->wp_regain_counter);
sv.c:633:	fprintf (fp, "BBC %d\n", ch->pcdata->blood_burn_counter);
sv.c:634:	fprintf (fp, "AVC %d\n", ch->pcdata->auto_vote_counter);
sv.c:638:			fprintf (fp, " %d", ch->pcdata->pthaum[i]);
sv.c:640:	fprintf(fp, "THM %d %d %d %d %d\n", ch->pcdata->thaum_type, ch->pcdata->thaum_prime, ch->pcdata->research_power, ch->pcdata->research_time, ch->pcdata->research_type);
sv.c:644:		fprintf (fp, "VNM %d\n", ch->pIndexData->vnum);
sv.c:648:		if (strlen (ch->pcdata->lupusdescshort) > 1 )
sv.c:649:			fprintf (fp, "SDL %s~\n", ch->pcdata->lupusdescshort);
sv.c:650:		if (strlen (ch->pcdata->crinosdescshort) > 1 )
sv.c:651:			fprintf (fp, "SDC %s~\n", ch->pcdata->crinosdescshort);
sv.c:652:		if (strlen (ch->pcdata->hispodescshort) > 1 )
sv.c:653:			fprintf (fp, "SDH %s~\n", ch->pcdata->hispodescshort);
sv.c:654:		if (strlen (ch->pcdata->glabrodescshort) > 1 )
sv.c:655:			fprintf (fp, "SDG %s~\n", ch->pcdata->glabrodescshort);
sv.c:656:		if (strlen (ch->pcdata->lupusdesc) > 1)
sv.c:657:			fprintf (fp, "LDD %s~\n", ch->pcdata->lupusdesc);
sv.c:658:		if (strlen (ch->pcdata->crinosdesc) > 1)
sv.c:659:			fprintf (fp, "CDD %s~\n", ch->pcdata->crinosdesc);
sv.c:661:		if (strlen (ch->pcdata->hispodesc) > 1)
sv.c:662:			fprintf (fp, "HDD %s~\n", ch->pcdata->hispodesc);
sv.c:663:		if (strlen (ch->pcdata->glabrodesc) > 1)
sv.c:664:			fprintf (fp, "GDD %s~\n", ch->pcdata->glabrodesc);
sv.c:665:		if (strlen (ch->pcdata->tempdesc) > 1)
sv.c:666:			fprintf (fp, "TDC %s~\n", ch->pcdata->tempdesc);
sv.c:667:		if (ch->pcdata->showtempdesc)
sv.c:668:			fprintf (fp, "TDS %d\n", ch->pcdata->showtempdesc);
sv.c:669:		if (strlen (ch->pcdata->giftlist) > 1)
sv.c:670:			fprintf (fp, "GFL %s~\n", ch->pcdata->giftlist);
sv.c:676:			fprintf (fp, " %ld", ch->pcdata->last_note[i]);
sv.c:681:			fprintf (fp, " %d", ch->attributes[i]);
sv.c:686:			fprintf (fp, " %d", ch->abilities[TALENTS][i]);
sv.c:691:			fprintf (fp, " %d", ch->pcdata->abilities_points[TALENTS][i]);
sv.c:696:			fprintf (fp, " %d", ch->abilities[SKILLS][i]);
sv.c:701:			fprintf (fp, " %d", ch->pcdata->abilities_points[SKILLS][i]);
sv.c:706:			fprintf (fp, " %d", ch->abilities[KNOWLEDGES][i]);
sv.c:711:			fprintf (fp, " %d", ch->pcdata->abilities_points[KNOWLEDGES][i]);
sv.c:713:		fprintf (fp, "PSW %s~\n", ch->pcdata->pwd);
sv.c:716:			if(strlen (ch->pcdata->bamfin) > 1)
sv.c:717:				fprintf (fp, "BFI %s~\n", ch->pcdata->bamfin);
sv.c:721:			if (strlen (ch->pcdata->bamfout) > 1)
sv.c:722:				fprintf (fp, "BFO %s~\n", ch->pcdata->bamfout);
sv.c:724:		fprintf (fp, "TTL %s~\n", ch->pcdata->title);
sv.c:725:		if (strlen (ch->pcdata->conception) > 1)
sv.c:726:			fprintf (fp, "CPT %s~\n", ch->pcdata->conception);
sv.c:727:		if (strlen (ch->pcdata->parents) > 1)
sv.c:728:			fprintf (fp, "PAR %s~\n", ch->pcdata->parents);
sv.c:729:		if (strlen (ch->pcdata->cparents) > 1)
sv.c:730:			fprintf (fp, "CPR %s~\n", ch->pcdata->cparents);
sv.c:731:		if (strlen (ch->pcdata->marriage) > 1)
sv.c:732:			fprintf (fp, "MRG %s~\n", ch->pcdata->marriage);
sv.c:733:		if (strlen (ch->pcdata->email) > 1)
sv.c:734:			fprintf (fp, "EML %s~\n", ch->pcdata->email);
sv.c:735:		if (strlen (ch->pcdata->conding) > 1)
sv.c:736:			fprintf (fp, "CND %s~\n", ch->pcdata->conding);
sv.c:737:		if (strlen (ch->pcdata->love) > 1)
sv.c:738:			fprintf (fp, "LOV %s~\n", ch->pcdata->love);
sv.c:739:		if (strlen (ch->pcdata->coterie) > 1)
sv.c:740:			fprintf (fp, "COT %s~\n", ch->pcdata->coterie);
sv.c:741:		if (str_cmp (ch->pcdata->cot_time, "None"))
sv.c:742:			fprintf (fp, "C_T %s~\n", ch->pcdata->cot_time);
sv.c:743:		if (str_cmp (ch->pcdata->cot_clans, "All"))
sv.c:744:			fprintf (fp, "C_C %s~\n", ch->pcdata->cot_clans);
sv.c:745:		if (str_cmp (ch->pcdata->cot_sides, "All"))
sv.c:746:			fprintf (fp, "C_S %s~\n", ch->pcdata->cot_sides);
sv.c:747:		if (strlen (ch->pcdata->leader) > 1)
sv.c:748:			fprintf (fp, "C_L %s~\n", ch->pcdata->leader);
sv.c:750:		if (strlen (ch->pcdata->stancename) > 1)
sv.c:751:			fprintf (fp, "S_N %s~\n", ch->pcdata->stancename);
sv.c:752:		if (strlen (ch->pcdata->stancelist) > 1)
sv.c:753:			fprintf (fp, "S_L %s~\n", ch->pcdata->stancelist);
sv.c:754:		if (strlen (ch->pcdata->stancework) > 1)
sv.c:755:			fprintf (fp, "S_W %s~\n", ch->pcdata->stancework);
sv.c:756:		if (ch->pcdata->denydate)
sv.c:757:			fprintf (fp, "DNY %d\n", ch->pcdata->denydate);
sv.c:758:		if (ch->pcdata->stancemove[0])
sv.c:759:			fprintf (fp, "S_M %d %d %d %d %d\n", ch->pcdata->stancemove[0], ch->pcdata->stancemove[1], ch->pcdata->stancemove[2], ch->pcdata->stancemove[3], ch->pcdata->stancemove[4]);
sv.c:761:		fprintf (fp, "A_P %d %d %d %d %d\n", ch->pcdata->perm_str, ch->pcdata->perm_int, ch->pcdata->perm_wis, ch->pcdata->perm_dex, ch->pcdata->perm_con);
sv.c:763:		if (ch->pcdata->mod_str | ch->pcdata->mod_int | ch->pcdata->mod_wis | ch->pcdata->mod_dex | ch->pcdata->mod_con)
sv.c:764:			fprintf (fp, "A_M %d %d %d %d %d\n", ch->pcdata->mod_str, ch->pcdata->mod_int, ch->pcdata->mod_wis, ch->pcdata->mod_dex, ch->pcdata->mod_con);
sv.c:765:		if (ch->pcdata->quest)
sv.c:766:			fprintf (fp, "QST %d\n", ch->pcdata->quest);
sv.c:767:		if (ch->pcdata->wolf)
sv.c:768:			fprintf (fp, "WLF %d\n", ch->pcdata->wolf);
sv.c:769:		if (ch->pcdata->rank)
sv.c:770:			fprintf (fp, "RNK %d\n", ch->pcdata->rank);
sv.c:771:		if (ch->pcdata->faith)
sv.c:772:			fprintf (fp, "FAI %d\n", ch->pcdata->faith);
sv.c:775:			fprintf (fp, "CNV %d %d\n", ch->pcdata->conviction[CONVICTION_CURRENT], ch->pcdata->conviction[CONVICTION_MAX]);
sv.c:777:			if (ch->pcdata->conviction_bank)
sv.c:778:				fprintf (fp, "CVB %d\n", ch->pcdata->conviction_bank);						
sv.c:780:		if (ch->pcdata->regenerate)
sv.c:781:			fprintf (fp, "RGN %d\n", ch->pcdata->regenerate);
sv.c:782:		if (ch->pcdata->demonic)
sv.c:783:			fprintf (fp, "DEM %d\n", ch->pcdata->demonic);
sv.c:784:		if (ch->pcdata->atm)
sv.c:785:			fprintf (fp, "ATM %d\n", ch->pcdata->atm);
sv.c:786:		if (ch->pcdata->necromancy)
sv.c:787:			fprintf (fp, "NEC %d\n", ch->pcdata->necromancy);
sv.c:788:		if (ch->pcdata->obeah)
sv.c:789:			fprintf (fp, "OBE %d\n", ch->pcdata->obeah);
sv.c:790:		if (ch->pcdata->darkness)
sv.c:791:			fprintf (fp, "DRK %d\n", ch->pcdata->darkness);
sv.c:792:		if (ch->pcdata->temporis)
sv.c:793:			fprintf (fp, "TPR %d\n", ch->pcdata->temporis);
sv.c:794:		if (ch->pcdata->dementation)
sv.c:795:			fprintf (fp, "D_M %d\n", ch->pcdata->dementation);
sv.c:797:		if (ch->pcdata->silence)
sv.c:798:			fprintf (fp, "SIL %d\n", ch->pcdata->silence);
sv.c:799:		if (ch->pcdata->devil)
sv.c:800:			fprintf (fp, "DVL %d\n", ch->pcdata->devil);
sv.c:802:		if (ch->pcdata->bodymods)
sv.c:803:			fprintf (fp, "BDM %d\n", ch->pcdata->bodymods);
sv.c:804:		if (ch->pcdata->reina)
sv.c:805:			fprintf (fp, "RNA %d\n", ch->pcdata->reina);
sv.c:806:		if (ch->pcdata->bpoints)
sv.c:807:			fprintf (fp, "BPT %d\n", ch->pcdata->bpoints);
sv.c:808:		if (ch->pcdata->dpoints)
sv.c:809:			fprintf (fp, "DPT %d\n", ch->pcdata->dpoints);
sv.c:810:		if (ch->pcdata->gpoints)
sv.c:811:			fprintf (fp, "GPT %d\n", ch->pcdata->gpoints);
sv.c:812:		if (ch->pcdata->rpoints)
sv.c:813:			fprintf (fp, "RPT %d\n", ch->pcdata->rpoints);
sv.c:814:		if (ch->pcdata->wpoints)
sv.c:815:			fprintf (fp, "WPT %d\n", ch->pcdata->wpoints);
sv.c:816:		if (ch->pcdata->spirit)
sv.c:817:			fprintf (fp, "SPR %d\n", ch->pcdata->spirit);
sv.c:818:		if (ch->pcdata->conjure)
sv.c:819:			fprintf (fp, "CJR %d\n", ch->pcdata->conjure);
sv.c:820:		if (ch->pcdata->celerity)
sv.c:821:			fprintf (fp, "CEL %d\n", ch->pcdata->celerity);
sv.c:822:		if (ch->pcdata->evileye)
sv.c:823:			fprintf (fp, "EVE %d\n", ch->pcdata->evileye);
sv.c:824:		if (ch->pcdata->gnosis[0] != 1 || ch->pcdata->gnosis[1] != 1)
sv.c:825:			fprintf (fp, "GNO %d %d\n", ch->pcdata->gnosis[0], ch->pcdata->gnosis[1]);
sv.c:826:		if (ch->pcdata->rage[0] != 1 || ch->pcdata->rage[1] != 1)
sv.c:827:			fprintf (fp, "RAG %d %d\n", ch->pcdata->rage[0], ch->pcdata->rage[1]);
sv.c:829:		if (ch->pcdata->absorb[0])
sv.c:830:			fprintf (fp, "ABS %d %d %d %d %d %d\n", ch->pcdata->absorb[0], ch->pcdata->absorb[1], ch->pcdata->absorb[2], ch->pcdata->absorb[3], ch->pcdata->absorb[4], ch->pcdata->absorb[5]);
sv.c:831:		if (ch->pcdata->qstats[0])
sv.c:832:			fprintf (fp, "Q_S %d %d %d %d %d\n", ch->pcdata->qstats[0], ch->pcdata->qstats[1], ch->pcdata->qstats[2], ch->pcdata->qstats[3], ch->pcdata->qstats[4]);
sv.c:833:		if (ch->pcdata->language[0] | ch->pcdata->language[1])
sv.c:834:			fprintf (fp, "LAN %d %d\n", ch->pcdata->language[0], ch->pcdata->language[1]);
sv.c:835:		if (ch->pcdata->stage[0] | ch->pcdata->stage[1] | ch->pcdata->stage[2])
sv.c:836:			fprintf (fp, "STG %d %d %d\n", ch->pcdata->stage[0], ch->pcdata->stage[1], ch->pcdata->stage[2]);
sv.c:837:		if (ch->pcdata->status[0] | ch->pcdata->status[1] | ch->pcdata->status[2])
sv.c:838:			fprintf (fp, "STA %d %d %d\n", ch->pcdata->status[0], ch->pcdata->status[1], ch->pcdata->status[2]);
sv.c:839:		fprintf (fp, "WFF %d %d\n", ch->pcdata->wolfform[0], ch->pcdata->wolfform[1]);
sv.c:840:		fprintf (fp, "SCO %d %d %d %d %d %d\n", ch->pcdata->score[0], ch->pcdata->score[1], ch->pcdata->score[2], ch->pcdata->score[3], ch->pcdata->score[4], ch->pcdata->score[5]);
sv.c:841:		if (ch->pcdata->runes[0] | ch->pcdata->runes[1] | ch->pcdata->runes[2] | ch->pcdata->runes[3])
sv.c:842:			fprintf (fp, "RNE %d %d %d %d\n", ch->pcdata->runes[0], ch->pcdata->runes[1], ch->pcdata->runes[2], ch->pcdata->runes[3]);
sv.c:843:		if (ch->pcdata->cland[0] | ch->pcdata->cland[1] | ch->pcdata->cland[2])
sv.c:844:			fprintf (fp, "CLD %d %d %d\n", ch->pcdata->cland[0], ch->pcdata->cland[1], ch->pcdata->cland[2]);
sv.c:845:		if (ch->pcdata->diableries[0] | ch->pcdata->diableries[1])
sv.c:846:			fprintf (fp, "DIA %d %d\n", ch->pcdata->diableries[0], ch->pcdata->diableries[1]);
sv.c:849:			fprintf (fp, "BRE %d %d %d\n", ch->pcdata->breed[0], ch->pcdata->breed[1], ch->pcdata->breed[2]);
sv.c:850:			fprintf (fp, "AUS %d %d %d %d %d\n", ch->pcdata->auspice[0], ch->pcdata->auspice[1], ch->pcdata->auspice[2], ch->pcdata->auspice[3], ch->pcdata->auspice[4]);
sv.c:852:				 ch->pcdata->tribes[0], ch->pcdata->tribes[1], ch->pcdata->tribes[2],
sv.c:853:				 ch->pcdata->tribes[3], ch->pcdata->tribes[4], ch->pcdata->tribes[5], ch->pcdata->tribes[6], ch->pcdata->tribes[7], ch->pcdata->tribes[8], ch->pcdata->tribes[9], ch->pcdata->tribes[10], ch->pcdata->tribes[11], ch->pcdata->tribes[12], ch->pcdata->tribes[13], ch->pcdata->tribes[14], ch->pcdata->tribes[15], ch->pcdata->tribes[16], ch->pcdata->tribes[17], ch->pcdata->tribes[18], ch->pcdata->tribes[19]);
sv.c:855:			fprintf (fp, "RNW    %d %d %d %d %d %d\n", ch->pcdata->renown[0], ch->pcdata->renown[1], ch->pcdata->renown[2], ch->pcdata->renown[3], ch->pcdata->renown[4], ch->pcdata->renown[5]);
sv.c:859:		if (ch->pcdata->thaum[0] | ch->pcdata->thaum[1] | ch->pcdata->thaum[2] | ch->pcdata->thaum[3] | ch->pcdata->thaum[4] | ch->pcdata->thaum[5] | ch->pcdata->thaum[6] | ch->pcdata->thaum[7] | ch->pcdata->thaum[8] | ch->pcdata->thaum[9] | ch->pcdata->thaum[10] | ch->pcdata->thaum[11] | ch->pcdata->thaum[12] | ch->pcdata->thaum[13] | ch->pcdata->thaum[14] | ch->pcdata->thaum[15] | ch->pcdata->thaum[16] | ch->pcdata->thaum[17] | ch->pcdata->thaum[18] | ch->pcdata->thaum[19])
sv.c:863:				 ch->pcdata->thaum[0], ch->pcdata->thaum[1], ch->pcdata->thaum[2], ch->pcdata->thaum[3], ch->pcdata->thaum[4], ch->pcdata->thaum[5], ch->pcdata->thaum[6], ch->pcdata->thaum[7], ch->pcdata->thaum[8], ch->pcdata->thaum[9], ch->pcdata->thaum[10], ch->pcdata->thaum[11], ch->pcdata->thaum[12], ch->pcdata->thaum[13], ch->pcdata->thaum[14], ch->pcdata->thaum[15], ch->pcdata->thaum[16], ch->pcdata->thaum[17], ch->pcdata->thaum[18], ch->pcdata->thaum[19]);
sv.c:866:		if (ch->pcdata->powers[0] | ch->pcdata->powers[1] |
sv.c:867:		    ch->pcdata->powers[2] | ch->pcdata->powers[3] |
sv.c:868:		    ch->pcdata->powers[4] | ch->pcdata->powers[5] |
sv.c:869:		    ch->pcdata->powers[6] | ch->pcdata->powers[7] |
sv.c:870:		    ch->pcdata->powers[8] | ch->pcdata->powers[9] |
sv.c:871:		    ch->pcdata->powers[10] | ch->pcdata->powers[11] |
sv.c:872:		    ch->pcdata->powers[12] | ch->pcdata->powers[13] |
sv.c:873:		    ch->pcdata->powers[14] | ch->pcdata->powers[15] |
sv.c:874:		    ch->pcdata->powers[16] | ch->pcdata->powers[17] |
sv.c:875:		    ch->pcdata->powers[18] | ch->pcdata->powers[19] |
sv.c:876:		    ch->pcdata->powers[20] | ch->pcdata->powers[21] |
sv.c:877:		    ch->pcdata->powers[22] | ch->pcdata->powers[23] | ch->pcdata->powers[24] | ch->pcdata->powers[25] | ch->pcdata->powers[26] | ch->pcdata->powers[27] | ch->pcdata->powers[28] | ch->pcdata->powers[29] | ch->pcdata->powers[30] | ch->pcdata->powers[31] | ch->pcdata->powers[32] | ch->pcdata->powers[33] | ch->pcdata->powers[34] | ch->pcdata->powers[35] | ch->pcdata->powers[36] | ch->pcdata->powers[37] | ch->pcdata->powers[38] | ch->pcdata->powers[39])
sv.c:880:				 ch->pcdata->powers[0], ch->pcdata->powers[1], ch->pcdata->powers[2],
sv.c:881:				 ch->pcdata->powers[3], ch->pcdata->powers[4], ch->pcdata->powers[5],
sv.c:882:				 ch->pcdata->powers[6], ch->pcdata->powers[7], ch->pcdata->powers[8],
sv.c:883:				 ch->pcdata->powers[9], ch->pcdata->powers[10], ch->pcdata->powers[11],
sv.c:884:				 ch->pcdata->powers[12], ch->pcdata->powers[13], ch->pcdata->powers[14],
sv.c:885:				 ch->pcdata->powers[15], ch->pcdata->powers[16], ch->pcdata->powers[17],
sv.c:886:				 ch->pcdata->powers[18], ch->pcdata->powers[19], ch->pcdata->powers[20],
sv.c:887:				 ch->pcdata->powers[21], ch->pcdata->powers[22], ch->pcdata->powers[23], ch->pcdata->powers[24], ch->pcdata->powers[25], ch->pcdata->powers[26], ch->pcdata->powers[27], ch->pcdata->powers[28], ch->pcdata->powers[29], ch->pcdata->powers[30], ch->pcdata->powers[31], ch->pcdata->powers[32], ch->pcdata->powers[33], ch->pcdata->powers[34], ch->pcdata->powers[35], ch->pcdata->powers[36], ch->pcdata->powers[37], ch->pcdata->powers[38], ch->pcdata->powers[39]);
sv.c:889:		if (ch->pcdata->powers_mod[0] | ch->pcdata->powers_mod[1] |
sv.c:890:		    ch->pcdata->powers_mod[2] | ch->pcdata->powers_mod[3] |
sv.c:891:		    ch->pcdata->powers_mod[4] | ch->pcdata->powers_mod[5] | ch->pcdata->powers_mod[6] | ch->pcdata->powers_mod[7] | ch->pcdata->powers_mod[8] | ch->pcdata->powers_mod[9] | ch->pcdata->powers_mod[10] | ch->pcdata->powers_mod[11] | ch->pcdata->powers_mod[12] | ch->pcdata->powers_mod[13] | ch->pcdata->powers_mod[14] | ch->pcdata->powers_mod[15] | ch->pcdata->powers_mod[16] | ch->pcdata->powers_mod[17] | ch->pcdata->powers_mod[18] | ch->pcdata->powers_mod[19])
sv.c:894:				 ch->pcdata->powers_mod[0], ch->pcdata->powers_mod[1], ch->pcdata->powers_mod[2],
sv.c:895:				 ch->pcdata->powers_mod[3], ch->pcdata->powers_mod[4], ch->pcdata->powers_mod[5],
sv.c:896:				 ch->pcdata->powers_mod[6], ch->pcdata->powers_mod[7], ch->pcdata->powers_mod[8], ch->pcdata->powers_mod[9], ch->pcdata->powers_mod[10], ch->pcdata->powers_mod[11], ch->pcdata->powers_mod[12], ch->pcdata->powers_mod[13], ch->pcdata->powers_mod[14], ch->pcdata->powers_mod[15], ch->pcdata->powers_mod[16], ch->pcdata->powers_mod[17], ch->pcdata->powers_mod[18], ch->pcdata->powers_mod[19]);
sv.c:898:		if (ch->pcdata->powers_set[0] | ch->pcdata->powers_set[1] |
sv.c:899:		    ch->pcdata->powers_set[2] | ch->pcdata->powers_set[3] |
sv.c:900:		    ch->pcdata->powers_set[4] | ch->pcdata->powers_set[5] | ch->pcdata->powers_set[6] | ch->pcdata->powers_set[7] | ch->pcdata->powers_set[8] | ch->pcdata->powers_set[9] | ch->pcdata->powers_set[10] | ch->pcdata->powers_set[11] | ch->pcdata->powers_set[12] | ch->pcdata->powers_set[13] | ch->pcdata->powers_set[14] | ch->pcdata->powers_set[15] | ch->pcdata->powers_set[16] | ch->pcdata->powers_set[17] | ch->pcdata->powers_set[18] | ch->pcdata->powers_set[19])
sv.c:903:				 ch->pcdata->powers_set[0], ch->pcdata->powers_set[1], ch->pcdata->powers_set[2],
sv.c:904:				 ch->pcdata->powers_set[3], ch->pcdata->powers_set[4], ch->pcdata->powers_set[5],
sv.c:905:				 ch->pcdata->powers_set[6], ch->pcdata->powers_set[7], ch->pcdata->powers_set[8], ch->pcdata->powers_set[9], ch->pcdata->powers_set[10], ch->pcdata->powers_set[11], ch->pcdata->powers_set[12], ch->pcdata->powers_set[13], ch->pcdata->powers_set[14], ch->pcdata->powers_set[15], ch->pcdata->powers_set[16], ch->pcdata->powers_set[17], ch->pcdata->powers_set[18], ch->pcdata->powers_set[19]);
sv.c:907:		if (ch->pcdata->powers_set_wear)
sv.c:908:			fprintf (fp, "PWW %d\n", ch->pcdata->powers_set_wear);
sv.c:909:		if (ch->pcdata->genes[0] | ch->pcdata->genes[1] | ch->pcdata->genes[2] | ch->pcdata->genes[3] | ch->pcdata->genes[4] | ch->pcdata->genes[5] | ch->pcdata->genes[6] | ch->pcdata->genes[7] | ch->pcdata->genes[8] | ch->pcdata->genes[9])
sv.c:911:			fprintf (fp, "GNS %d %d %d %d %d %d %d %d %d %d\n", ch->pcdata->genes[0], ch->pcdata->genes[1], ch->pcdata->genes[2], ch->pcdata->genes[3], ch->pcdata->genes[4], ch->pcdata->genes[5], ch->pcdata->genes[6], ch->pcdata->genes[7], ch->pcdata->genes[8], ch->pcdata->genes[9]);
sv.c:913:		if (strlen (ch->pcdata->coterie) > 1)
sv.c:914:			fprintf (fp, "C_M %d %d %d %d %d %d %d %d %d %d %d %d\n", ch->pcdata->cot_min[0], ch->pcdata->cot_min[1], ch->pcdata->cot_min[2], ch->pcdata->cot_min[3], ch->pcdata->cot_min[4], ch->pcdata->cot_min[5], ch->pcdata->cot_min[6], ch->pcdata->cot_min[7], ch->pcdata->cot_min[8], ch->pcdata->cot_min[9], ch->pcdata->cot_min[10], ch->pcdata->cot_min[11]);
sv.c:916:		if (ch->blood[0] != 100 || ch->blood[1] != 100)
sv.c:917:			fprintf (fp, "BLD %d %d\n", ch->blood[0], ch->blood[1]);
sv.c:918:		fprintf (fp, "WIL %d %d\n", ch->pcdata->willpower[0], ch->pcdata->willpower[1]);
sv.c:919:		if (ch->pcdata->resist[0] | ch->pcdata->resist[1] | ch->pcdata->resist[2] | ch->pcdata->resist[3] | ch->pcdata->resist[4])
sv.c:920:			fprintf (fp, "RST %d %d %d %d %d\n", ch->pcdata->resist[0], ch->pcdata->resist[1], ch->pcdata->resist[2], ch->pcdata->resist[3], ch->pcdata->resist[4]);
sv.c:922:		if (ch->pcdata->power[0] | ch->pcdata->power[1])
sv.c:923:			fprintf (fp, "POW %d %d\n", ch->pcdata->power[0], ch->pcdata->power[1]);
sv.c:925:		if (ch->pcdata->fake_skill | ch->pcdata->fake_stance | ch->pcdata->fake_hit | ch->pcdata->fake_dam | ch->pcdata->fake_ac | ch->pcdata->fake_hp | ch->pcdata->fake_mana | ch->pcdata->fake_move)
sv.c:926:			fprintf (fp, "FK1 %d %d %d %d %d %d %d %d\n", ch->pcdata->fake_skill, ch->pcdata->fake_stance, ch->pcdata->fake_hit, ch->pcdata->fake_dam, ch->pcdata->fake_ac, ch->pcdata->fake_hp, ch->pcdata->fake_mana, ch->pcdata->fake_move);
sv.c:928:		if (ch->pcdata->fake_max_hp | ch->pcdata->fake_max_mana | ch->pcdata->fake_max_move | ch->pcdata->fake_stats[0] | ch->pcdata->fake_stats[1] | ch->pcdata->fake_stats[2] | ch->pcdata->fake_stats[3] | ch->pcdata->fake_stats[4])
sv.c:929:			fprintf (fp, "FK2 %d %d %d %d %d %d %d %d\n", ch->pcdata->fake_max_hp, ch->pcdata->fake_max_mana, ch->pcdata->fake_max_move, ch->pcdata->fake_stats[0], ch->pcdata->fake_stats[1], ch->pcdata->fake_stats[2], ch->pcdata->fake_stats[3], ch->pcdata->fake_stats[4]);
sv.c:931:		if (ch->pcdata->obj_vnum)
sv.c:932:			fprintf (fp, "OBV %d\n", ch->pcdata->obj_vnum);
sv.c:934:		if (ch->pcdata->majesty)
sv.c:935:			fprintf (fp, "MAJ %d\n", ch->pcdata->majesty);
sv.c:937:		fprintf (fp, "CON %d %d %d\n", ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2]);
sv.c:941:			if (skill_table[sn].name != NULL && ch->pcdata->learned[sn] > 0 && skill_table[sn].skill_level <= MAX_LEVEL)
sv.c:943:				fprintf (fp, "SKL %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn].name);
sv.c:948:	for (paf = ch->affected; paf != NULL; paf = paf->next)
sv.c:957:	for (extra = ch->pcdata->extra; extra; extra = extra->prev)
sv.c:1286:		ch->pcdata = alloc_perm (sizeof (*ch->pcdata));
sv.c:1290:		ch->pcdata = pcdata_free;
sv.c:1293:	*ch->pcdata = pcdata_zero;
sv.c:1296:	ch->desc = d;
sv.c:1297:	ch->name = str_dup (name);
sv.c:1298:	ch->act = PLR_BLANK | PLR_COMBINE | PLR_PROMPT;
sv.c:1299:	ch->extra = 0;
sv.c:1300:	ch->extra2 = 0;
sv.c:1301:	ch->more = 0;
sv.c:1302:	ch->more2 = 0;
sv.c:1303:	ch->more3 = 0;
sv.c:1304:	ch->quintessence = 0;
sv.c:1305:	ch->max_quintessence = 0;
sv.c:1306:	ch->plane = 0;
sv.c:1307:	ch->pcdata->familiar = NULL;
sv.c:1308:	ch->pcdata->partner = NULL;
sv.c:1309:	ch->pcdata->propose = NULL;
sv.c:1310:	ch->pcdata->chobj = NULL;
sv.c:1311:	ch->pcdata->memorised = NULL;
sv.c:1312:	ch->pcdata->board = &boards[DEFAULT_BOARD];
sv.c:1313:	ch->pcdata->soul_keeper = str_dup ("");
sv.c:1314:	ch->pcdata->soul = 10;
sv.c:1315:	ch->pcdata->thaum_prime = -1;
sv.c:1316:	ch->pcdata->research_power = -1;
sv.c:1317:	ch->pcdata->research_time = 0;
sv.c:1318:	ch->pcdata->research_type = 0;
sv.c:1319:	ch->pcdata->rp_counter = 0;
sv.c:1320:	ch->pcdata->research_tick = 0;
sv.c:1321:	ch->pcdata->infernal_ranking = 0;
sv.c:1322:	ch->pcdata->pwd = str_dup ("");
sv.c:1324:	ch->pcdata->votes = 0;
sv.c:1325:	ch->pcdata->last_vote_time.year = 0;
sv.c:1326:	ch->pcdata->last_vote_time.month = 0;
sv.c:1327:	ch->pcdata->last_vote_time.day = 0;
sv.c:1329:	ch->pcdata->bamfin = str_dup ("");
sv.c:1330:	ch->pcdata->bamfout = str_dup ("");
sv.c:1331:	ch->pcdata->lupusdescshort = str_dup ("");
sv.c:1332:	ch->pcdata->crinosdescshort = str_dup ("");
sv.c:1333:	ch->pcdata->hispodescshort = str_dup ("");
sv.c:1334:	ch->pcdata->glabrodescshort = str_dup ("");
sv.c:1335:	ch->pcdata->title = str_dup ("");
sv.c:1336:	ch->pcdata->conception = str_dup ("");
sv.c:1337:	ch->pcdata->parents = str_dup ("");
sv.c:1338:	ch->pcdata->cparents = str_dup ("");
sv.c:1339:	ch->pcdata->marriage = str_dup ("");
sv.c:1340:	ch->pcdata->email = str_dup ("");
sv.c:1341:	ch->pcdata->conding = str_dup ("");
sv.c:1342:	ch->pcdata->love = str_dup ("");
sv.c:1343:	ch->pcdata->coterie = str_dup ("");
sv.c:1344:	ch->pcdata->cot_time = str_dup ("None");
sv.c:1345:	ch->pcdata->cot_clans = str_dup ("All");
sv.c:1346:	ch->pcdata->cot_sides = str_dup ("All");
sv.c:1347:	ch->pcdata->leader = str_dup ("");
sv.c:1348:	ch->pcdata->stancename = str_dup ("");
sv.c:1349:	ch->pcdata->stancelist = str_dup ("");
sv.c:1350:	ch->pcdata->stancework = str_dup ("");
sv.c:1351:	ch->pcdata->doing = str_dup ("");
sv.c:1353:	ch->pcdata->aura = str_dup ("");
sv.c:1354:	ch->pcdata->voice = str_dup ("");
sv.c:1355:	ch->pcdata->roomdesc = str_dup ("");
sv.c:1356:	ch->pcdata->show_social = FALSE;
sv.c:1357:	ch->pcdata->lupusdesc = str_dup ("");
sv.c:1358:	ch->pcdata->crinosdesc = str_dup ("");
sv.c:1359:	ch->pcdata->hispodesc = str_dup ("");
sv.c:1360:	ch->pcdata->glabrodesc = str_dup ("");
sv.c:1361:	ch->pcdata->tempdesc = str_dup ("");
sv.c:1362:	ch->pcdata->showtempdesc = FALSE;
sv.c:1363:	ch->pcdata->giftlist = str_dup ("");
sv.c:1364:	ch->lord = str_dup ("");
sv.c:1365:	ch->clan = str_dup ("");
sv.c:1366:	ch->side = str_dup ("");
sv.c:1367:	ch->nature = str_dup("");
sv.c:1368:	ch->demeanor = str_dup("");
sv.c:1369:	ch->order = str_dup("");
sv.c:1370:	ch->impulse = str_dup("");
sv.c:1371:	ch->morph = str_dup ("");
sv.c:1372:	ch->mem_name = str_dup ("");
sv.c:1373:	ch->mem_desc = str_dup ("");
sv.c:1374:	ch->pload = str_dup ("");
sv.c:1375:	ch->prompt = str_dup ("");
sv.c:1376:	ch->cprompt = str_dup ("");
sv.c:1379:	free_string (ch->lasttime);
sv.c:1380:	ch->createtime = str_dup (strtime);
sv.c:1381:	ch->lasttime = str_dup ("");
sv.c:1382:	ch->lasthost = str_dup ("");
sv.c:1383:	ch->poweraction = str_dup ("");
sv.c:1384:	ch->powertype = str_dup ("");
sv.c:1385:	ch->hunting = str_dup ("");
sv.c:1386:	ch->pcdata->denydate = 0;
sv.c:1387:	ch->pcdata->stancemove[0] = 0;
sv.c:1388:	ch->pcdata->stancemove[1] = 0;
sv.c:1389:	ch->pcdata->stancemove[2] = 0;
sv.c:1390:	ch->pcdata->stancemove[3] = 0;
sv.c:1391:	ch->pcdata->stancemove[4] = 0;
sv.c:1392:	ch->spectype = 0;
sv.c:1393:	ch->specpower = 0;
sv.c:1394:	ch->mounted = 0;
sv.c:1395:	ch->home = 3700;
sv.c:1396:	ch->agg = 0;
sv.c:1397:	ch->vampgen = 0;
sv.c:1398:	ch->paradox[0] = 0;	/* Total paradox */
sv.c:1399:	ch->paradox[1] = 0;	/* Current Paradox */
sv.c:1400:	ch->paradox[2] = 0;	/* Paradox Ticker */
sv.c:1401:	ch->damcap[0] = 1000;
sv.c:1402:	ch->damcap[1] = 0;
sv.c:1403:	ch->vampaff = 0;
sv.c:1404:	ch->itemaffect = 0;
sv.c:1405:	ch->vamppass = -1;
sv.c:1406:	ch->polyaff = 0;
sv.c:1407:	ch->immune = 0;
sv.c:1408:	ch->form = 0;
sv.c:1409:	ch->init = 0;
sv.c:1410:	ch->body = 32767;
sv.c:1411:	ch->beast = 20;
sv.c:1412:	ch->truebeast = 20;
sv.c:1413:	ch->autostance = 0;
sv.c:1414:	ch->pcdata->virtues[VIRTUE_CONSCIENCE] = 1;
sv.c:1415:	ch->pcdata->virtues[VIRTUE_SELFCONTROL] = 1;
sv.c:1416:	ch->pcdata->virtues[VIRTUE_COURAGE] = 1;
sv.c:1419:		ch->pcdata->virtues[VIRTUE_WISDOM] = 1;
sv.c:1420:		ch->pcdata->virtues[VIRTUE_FAITH] = 1;
sv.c:1421:		ch->pcdata->virtues[VIRTUE_ZEAL] = 1;
sv.c:1423:	ch->loc_hp[0] = 0;
sv.c:1424:	ch->loc_hp[1] = 0;
sv.c:1425:	ch->loc_hp[2] = 0;
sv.c:1426:	ch->loc_hp[3] = 0;
sv.c:1427:	ch->loc_hp[4] = 0;
sv.c:1428:	ch->loc_hp[5] = 0;
sv.c:1429:	ch->loc_hp[6] = 0;
sv.c:1430:	ch->wpn[0] = 0;
sv.c:1431:	ch->wpn[1] = 0;
sv.c:1432:	ch->wpn[2] = 0;
sv.c:1433:	ch->wpn[3] = 0;
sv.c:1434:	ch->wpn[4] = 0;
sv.c:1435:	ch->wpn[5] = 0;
sv.c:1436:	ch->wpn[6] = 0;
sv.c:1437:	ch->wpn[7] = 0;
sv.c:1438:	ch->wpn[8] = 0;
sv.c:1439:	ch->wpn[9] = 0;
sv.c:1440:	ch->wpn[10] = 0;
sv.c:1441:	ch->wpn[11] = 0;
sv.c:1442:	ch->wpn[12] = 0;
sv.c:1443:	ch->spl[0] = 4;
sv.c:1444:	ch->spl[1] = 4;
sv.c:1445:	ch->spl[2] = 4;
sv.c:1446:	ch->spl[3] = 4;
sv.c:1447:	ch->spl[4] = 4;
sv.c:1448:	ch->cmbt[0] = 0;
sv.c:1449:	ch->cmbt[1] = 0;
sv.c:1450:	ch->cmbt[2] = 0;
sv.c:1451:	ch->cmbt[3] = 0;
sv.c:1452:	ch->cmbt[4] = 0;
sv.c:1453:	ch->cmbt[5] = 0;
sv.c:1454:	ch->cmbt[6] = 0;
sv.c:1455:	ch->cmbt[7] = 0;
sv.c:1456:	ch->stance[0] = 0;
sv.c:1457:	ch->stance[1] = 0;
sv.c:1458:	ch->stance[2] = 0;
sv.c:1459:	ch->stance[3] = 0;
sv.c:1460:	ch->stance[4] = 0;
sv.c:1461:	ch->stance[5] = 0;
sv.c:1462:	ch->stance[6] = 0;
sv.c:1463:	ch->stance[7] = 0;
sv.c:1464:	ch->stance[8] = 0;
sv.c:1465:	ch->stance[9] = 0;
sv.c:1466:	ch->stance[10] = 0;
sv.c:1467:	ch->stance[11] = 0;
sv.c:1468:	ch->stance[12] = 0;
sv.c:1469:	ch->stance[13] = 0;
sv.c:1470:	ch->stance[14] = 0;
sv.c:1471:	ch->stance[15] = 0;
sv.c:1472:	ch->pkill = 0;
sv.c:1473:	ch->pdeath = 0;
sv.c:1474:	ch->mkill = 0;
sv.c:1475:	ch->mdeath = 0;
sv.c:1476:	ch->embraced = 0;
sv.c:1477:	ch->blood[0] = 10;
sv.c:1478:	ch->blood[1] = 10;
sv.c:1479:	ch->blood[2] = 1;
sv.c:1480:	ch->pcdata->aggdamage = 0;
sv.c:1481:	ch->pcdata->bashingdamage = 0;
sv.c:1482:	ch->pcdata->lethaldamage = 0;
sv.c:1483:	ch->pcdata->wp_regain_counter = 0;
sv.c:1484:	ch->pcdata->blood_burn_counter = 0;
sv.c:1485:	ch->pcdata->auto_vote_counter = 0;
sv.c:1486:	ch->pcdata->perm_str = 13;
sv.c:1487:	ch->pcdata->perm_int = 13;
sv.c:1488:	ch->pcdata->perm_wis = 13;
sv.c:1489:	ch->pcdata->perm_dex = 13;
sv.c:1490:	ch->pcdata->perm_con = 13;
sv.c:1491:	ch->pcdata->quest = 0;
sv.c:1492:	ch->pcdata->wolf = 0;
sv.c:1493:	ch->pcdata->rank = 0;
sv.c:1494:	ch->pcdata->faith = 0;
sv.c:1497:		ch->pcdata->conviction[CONVICTION_CURRENT] = 0;
sv.c:1498:		ch->pcdata->conviction[CONVICTION_MAX] = 0;
sv.c:1499:		ch->pcdata->conviction_bank = 0;
sv.c:1501:	ch->pcdata->regenerate = 0;
sv.c:1502:	ch->pcdata->demonic = 0;
sv.c:1503:	ch->pcdata->atm = 0;
sv.c:1504:	ch->pcdata->song = 0;
sv.c:1505:	ch->pcdata->necromancy = 0;
sv.c:1506:	ch->pcdata->obeah = 0;
sv.c:1507:	ch->pcdata->darkness = 0;
sv.c:1508:	ch->pcdata->temporis = 0;
sv.c:1509:	ch->pcdata->silence = 0;
sv.c:1510:	ch->pcdata->devil = 0;
sv.c:1511:	ch->pcdata->dementation = 0;
sv.c:1512:	ch->pcdata->bodymods = 0;
sv.c:1513:	ch->pcdata->vision = 3;
sv.c:1514:	ch->pcdata->reina = 0;
sv.c:1515:	ch->pcdata->bpoints = 0;
sv.c:1516:	ch->pcdata->dpoints = 0;
sv.c:1517:	ch->pcdata->gpoints = 0;
sv.c:1518:	ch->pcdata->rpoints = 0;
sv.c:1519:	ch->pcdata->wpoints = 0;
sv.c:1520:	ch->pcdata->spirit = 0;
sv.c:1521:	ch->pcdata->conjure = 0;
sv.c:1522:	ch->pcdata->celerity = 0;
sv.c:1523:	ch->pcdata->firstaid = 0;
sv.c:1524:	ch->pcdata->repair = 0;
sv.c:1525:	ch->pcdata->teach = 0;
sv.c:1526:	ch->pcdata->learn = 0;
sv.c:1527:	ch->pcdata->notes = 0;
sv.c:1528:	ch->pcdata->evileye = 0;
sv.c:1529:	ch->pcdata->followers = 0;
sv.c:1530:	ch->pcdata->gnosis[0] = 1;
sv.c:1531:	ch->pcdata->gnosis[1] = 1;
sv.c:1532:	ch->pcdata->rage[0] = 1;
sv.c:1533:	ch->pcdata->rage[1] = 1;
sv.c:1534:	ch->pcdata->absorb[0] = 0;
sv.c:1535:	ch->pcdata->absorb[1] = 0;
sv.c:1536:	ch->pcdata->absorb[2] = 0;
sv.c:1537:	ch->pcdata->absorb[3] = 0;
sv.c:1538:	ch->pcdata->absorb[4] = 0;
sv.c:1539:	ch->pcdata->absorb[5] = 0;
sv.c:1540:	ch->pcdata->qstats[0] = 0;
sv.c:1541:	ch->pcdata->qstats[1] = 0;
sv.c:1542:	ch->pcdata->qstats[2] = 0;
sv.c:1543:	ch->pcdata->qstats[3] = 0;
sv.c:1544:	ch->pcdata->qstats[4] = 0;
sv.c:1545:	ch->pcdata->exercise[0] = 0;
sv.c:1546:	ch->pcdata->exercise[1] = 0;
sv.c:1547:	ch->pcdata->exercise[2] = 0;
sv.c:1548:	ch->pcdata->exercise[3] = 0;
sv.c:1549:	ch->pcdata->language[0] = 0;
sv.c:1550:	ch->pcdata->language[1] = 0;
sv.c:1551:	ch->pcdata->stage[0] = 0;
sv.c:1552:	ch->pcdata->stage[1] = 0;
sv.c:1553:	ch->pcdata->stage[2] = 0;
sv.c:1554:	ch->pcdata->status[0] = 0;
sv.c:1555:	ch->pcdata->status[1] = 0;
sv.c:1556:	ch->pcdata->status[2] = 0;
sv.c:1557:	ch->pcdata->wolfform[0] = 1;
sv.c:1558:	ch->pcdata->wolfform[1] = 1;
sv.c:1559:	ch->pcdata->score[0] = 0;
sv.c:1560:	ch->pcdata->score[1] = 0;
sv.c:1561:	ch->pcdata->score[2] = 0;
sv.c:1562:	ch->pcdata->score[3] = 0;
sv.c:1563:	ch->pcdata->score[4] = 0;
sv.c:1564:	ch->pcdata->score[5] = 0;
sv.c:1565:	ch->pcdata->runes[0] = 0;
sv.c:1566:	ch->pcdata->runes[1] = 0;
sv.c:1567:	ch->pcdata->runes[2] = 0;
sv.c:1568:	ch->pcdata->runes[3] = 0;
sv.c:1569:	ch->pcdata->disc[0] = 0;
sv.c:1570:	ch->pcdata->disc[1] = 0;
sv.c:1571:	ch->pcdata->disc[2] = 0;
sv.c:1572:	ch->pcdata->disc[3] = 0;
sv.c:1573:	ch->pcdata->disc[4] = 0;
sv.c:1574:	ch->pcdata->disc[5] = 0;
sv.c:1575:	ch->pcdata->disc[6] = 0;
sv.c:1576:	ch->pcdata->disc[7] = 0;
sv.c:1577:	ch->pcdata->disc[8] = 0;
sv.c:1578:	ch->pcdata->disc[9] = 0;
sv.c:1579:	ch->pcdata->disc[10] = 0;
sv.c:1580:	ch->pcdata->research[0] = 0;
sv.c:1581:	ch->pcdata->research[1] = 0;
sv.c:1583:	ch->pcdata->rituals[0] = 0;
sv.c:1584:	ch->pcdata->rituals[1] = 0;
sv.c:1585:	ch->pcdata->rituals[2] = 0;
sv.c:1586:	ch->pcdata->rituals[3] = 0;
sv.c:1587:	ch->pcdata->rituals[4] = 0;
sv.c:1588:	ch->pcdata->rituals[5] = 0;
sv.c:1589:	ch->pcdata->rituals[6] = 0;
sv.c:1590:	ch->pcdata->rituals[7] = 0;
sv.c:1591:	ch->pcdata->rituals[8] = 0;
sv.c:1592:	ch->pcdata->rituals[9] = 0;
sv.c:1593:	ch->pcdata->cland[0] = 0;
sv.c:1594:	ch->pcdata->cland[1] = 0;
sv.c:1595:	ch->pcdata->cland[2] = 0;
sv.c:1596:	ch->pcdata->extended_char_creation_in_progress = FALSE;
sv.c:1597:	ch->pcdata->diableries[0] = 0;
sv.c:1598:	ch->pcdata->diableries[1] = 0;
sv.c:1599:	ch->pcdata->renown[0] = 0;
sv.c:1600:	ch->pcdata->renown[1] = 0;
sv.c:1601:	ch->pcdata->renown[2] = 0;
sv.c:1602:	ch->pcdata->renown[3] = 0;
sv.c:1603:	ch->pcdata->renown[4] = 0;
sv.c:1604:	ch->pcdata->renown[5] = 0;
sv.c:1606:	ch->pcdata->breed[0] = 0;
sv.c:1607:	ch->pcdata->breed[1] = 0;
sv.c:1608:	ch->pcdata->breed[2] = 0;
sv.c:1609:	ch->pcdata->auspice[0] = 0;
sv.c:1610:	ch->pcdata->auspice[1] = 0;
sv.c:1611:	ch->pcdata->auspice[2] = 0;
sv.c:1612:	ch->pcdata->auspice[3] = 0;
sv.c:1613:	ch->pcdata->auspice[4] = 0;
sv.c:1614:	ch->pcdata->tribes[0] = 0;
sv.c:1615:	ch->pcdata->tribes[1] = 0;
sv.c:1616:	ch->pcdata->tribes[2] = 0;
sv.c:1617:	ch->pcdata->tribes[3] = 0;
sv.c:1618:	ch->pcdata->tribes[4] = 0;
sv.c:1619:	ch->pcdata->tribes[5] = 0;
sv.c:1620:	ch->pcdata->tribes[6] = 0;
sv.c:1621:	ch->pcdata->tribes[7] = 0;
sv.c:1622:	ch->pcdata->tribes[8] = 0;
sv.c:1623:	ch->pcdata->tribes[9] = 0;
sv.c:1624:	ch->pcdata->tribes[10] = 0;
sv.c:1625:	ch->pcdata->tribes[11] = 0;
sv.c:1626:	ch->pcdata->tribes[12] = 0;
sv.c:1627:	ch->pcdata->tribes[13] = 0;
sv.c:1628:	ch->pcdata->tribes[14] = 0;
sv.c:1629:	ch->pcdata->tribes[15] = 0;
sv.c:1630:	ch->pcdata->tribes[16] = 0;
sv.c:1631:	ch->pcdata->tribes[17] = 0;
sv.c:1632:	ch->pcdata->tribes[18] = 0;
sv.c:1633:	ch->pcdata->tribes[19] = 0;
sv.c:1635:	ch->pcdata->thaum[0] = 0;
sv.c:1636:	ch->pcdata->thaum[1] = 0;
sv.c:1637:	ch->pcdata->thaum[2] = 0;
sv.c:1638:	ch->pcdata->thaum[3] = 0;
sv.c:1639:	ch->pcdata->thaum[4] = 0;
sv.c:1640:	ch->pcdata->thaum[5] = 0;
sv.c:1641:	ch->pcdata->thaum[6] = 0;
sv.c:1642:	ch->pcdata->thaum[7] = 0;
sv.c:1643:	ch->pcdata->thaum[8] = 0;
sv.c:1644:	ch->pcdata->thaum[9] = 0;
sv.c:1645:	ch->pcdata->thaum[10] = 0;
sv.c:1646:	ch->pcdata->thaum[11] = 0;
sv.c:1647:	ch->pcdata->thaum[12] = 0;
sv.c:1648:	ch->pcdata->thaum[13] = 0;
sv.c:1649:	ch->pcdata->thaum[14] = 0;
sv.c:1650:	ch->pcdata->thaum[15] = 0;
sv.c:1651:	ch->pcdata->thaum[16] = 0;
sv.c:1652:	ch->pcdata->thaum[17] = 0;
sv.c:1653:	ch->pcdata->thaum[18] = 0;
sv.c:1654:	ch->pcdata->thaum[19] = 0;
sv.c:1656:	ch->pcdata->powers[0] = 0;
sv.c:1657:	ch->pcdata->powers[1] = 0;
sv.c:1658:	ch->pcdata->powers[2] = 0;
sv.c:1659:	ch->pcdata->powers[3] = 0;
sv.c:1660:	ch->pcdata->powers[4] = 0;
sv.c:1661:	ch->pcdata->powers[5] = 0;
sv.c:1662:	ch->pcdata->powers[6] = 0;
sv.c:1663:	ch->pcdata->powers[7] = 0;
sv.c:1664:	ch->pcdata->powers[8] = 0;
sv.c:1665:	ch->pcdata->powers[9] = 0;
sv.c:1666:	ch->pcdata->powers[10] = 0;
sv.c:1667:	ch->pcdata->powers[11] = 0;
sv.c:1668:	ch->pcdata->powers[12] = 0;
sv.c:1669:	ch->pcdata->powers[13] = 0;
sv.c:1670:	ch->pcdata->powers[14] = 0;
sv.c:1671:	ch->pcdata->powers[15] = 0;
sv.c:1672:	ch->pcdata->powers[16] = 0;
sv.c:1673:	ch->pcdata->powers[17] = 0;
sv.c:1674:	ch->pcdata->powers[18] = 0;
sv.c:1675:	ch->pcdata->powers[19] = 0;
sv.c:1676:	ch->pcdata->powers[20] = 0;
sv.c:1677:	ch->pcdata->powers[21] = 0;
sv.c:1678:	ch->pcdata->powers[22] = 0;
sv.c:1679:	ch->pcdata->powers[23] = 0;
sv.c:1680:	ch->pcdata->powers[24] = 0;
sv.c:1681:	ch->pcdata->powers[25] = 0;
sv.c:1682:	ch->pcdata->powers[26] = 0;
sv.c:1683:	ch->pcdata->powers[27] = 0;
sv.c:1684:	ch->pcdata->powers[28] = 0;
sv.c:1685:	ch->pcdata->powers[29] = 0;
sv.c:1686:	ch->pcdata->powers[30] = 0;
sv.c:1687:	ch->pcdata->powers[31] = 0;
sv.c:1688:	ch->pcdata->powers[32] = 0;
sv.c:1689:	ch->pcdata->powers[33] = 0;
sv.c:1690:	ch->pcdata->powers[34] = 0;
sv.c:1691:	ch->pcdata->powers[35] = 0;
sv.c:1692:	ch->pcdata->powers[36] = 0;
sv.c:1693:	ch->pcdata->powers[37] = 0;
sv.c:1694:	ch->pcdata->powers[38] = 0;
sv.c:1695:	ch->pcdata->powers[39] = 0;
sv.c:1696:	ch->pcdata->powers_mod[0] = 0;
sv.c:1697:	ch->pcdata->powers_mod[1] = 0;
sv.c:1698:	ch->pcdata->powers_mod[2] = 0;
sv.c:1699:	ch->pcdata->powers_mod[3] = 0;
sv.c:1700:	ch->pcdata->powers_mod[4] = 0;
sv.c:1701:	ch->pcdata->powers_mod[5] = 0;
sv.c:1702:	ch->pcdata->powers_mod[6] = 0;
sv.c:1703:	ch->pcdata->powers_mod[7] = 0;
sv.c:1704:	ch->pcdata->powers_mod[8] = 0;
sv.c:1705:	ch->pcdata->powers_mod[9] = 0;
sv.c:1706:	ch->pcdata->powers_mod[10] = 0;
sv.c:1707:	ch->pcdata->powers_mod[11] = 0;
sv.c:1708:	ch->pcdata->powers_mod[12] = 0;
sv.c:1709:	ch->pcdata->powers_mod[13] = 0;
sv.c:1710:	ch->pcdata->powers_mod[14] = 0;
sv.c:1711:	ch->pcdata->powers_mod[15] = 0;
sv.c:1712:	ch->pcdata->powers_mod[16] = 0;
sv.c:1713:	ch->pcdata->powers_mod[17] = 0;
sv.c:1714:	ch->pcdata->powers_mod[18] = 0;
sv.c:1715:	ch->pcdata->powers_mod[19] = 0;
sv.c:1716:	ch->pcdata->powers_set[0] = 0;
sv.c:1717:	ch->pcdata->powers_set[1] = 0;
sv.c:1718:	ch->pcdata->powers_set[2] = 0;
sv.c:1719:	ch->pcdata->powers_set[3] = 0;
sv.c:1720:	ch->pcdata->powers_set[4] = 0;
sv.c:1721:	ch->pcdata->powers_set[5] = 0;
sv.c:1722:	ch->pcdata->powers_set[6] = 0;
sv.c:1723:	ch->pcdata->powers_set[7] = 0;
sv.c:1724:	ch->pcdata->powers_set[8] = 0;
sv.c:1725:	ch->pcdata->powers_set[9] = 0;
sv.c:1726:	ch->pcdata->powers_set[10] = 0;
sv.c:1727:	ch->pcdata->powers_set[11] = 0;
sv.c:1728:	ch->pcdata->powers_set[12] = 0;
sv.c:1729:	ch->pcdata->powers_set[13] = 0;
sv.c:1730:	ch->pcdata->powers_set[14] = 0;
sv.c:1731:	ch->pcdata->powers_set[15] = 0;
sv.c:1732:	ch->pcdata->powers_set[16] = 0;
sv.c:1733:	ch->pcdata->powers_set[17] = 0;
sv.c:1734:	ch->pcdata->powers_set[18] = 0;
sv.c:1735:	ch->pcdata->powers_set[19] = 0;
sv.c:1736:	ch->pcdata->powers_set_wear = 0;
sv.c:1737:	ch->pcdata->genes[0] = 0;
sv.c:1738:	ch->pcdata->genes[1] = 0;
sv.c:1739:	ch->pcdata->genes[2] = 0;
sv.c:1740:	ch->pcdata->genes[3] = 0;
sv.c:1741:	ch->pcdata->genes[4] = 0;
sv.c:1742:	ch->pcdata->genes[5] = 0;
sv.c:1743:	ch->pcdata->genes[6] = 0;
sv.c:1744:	ch->pcdata->genes[7] = 0;
sv.c:1745:	ch->pcdata->genes[8] = 0;
sv.c:1746:	ch->pcdata->genes[9] = 0;
sv.c:1747:	ch->pcdata->cot_min[0] = 0;
sv.c:1748:	ch->pcdata->cot_min[1] = 0;
sv.c:1749:	ch->pcdata->cot_min[2] = 0;
sv.c:1750:	ch->pcdata->cot_min[3] = 0;
sv.c:1751:	ch->pcdata->cot_min[4] = 0;
sv.c:1752:	ch->pcdata->cot_min[5] = 0;
sv.c:1753:	ch->pcdata->cot_min[6] = 0;
sv.c:1754:	ch->pcdata->cot_min[7] = 0;
sv.c:1755:	ch->pcdata->cot_min[8] = 0;
sv.c:1756:	ch->pcdata->cot_min[9] = 0;
sv.c:1757:	ch->pcdata->cot_min[10] = 0;
sv.c:1758:	ch->pcdata->cot_min[11] = 0;
sv.c:1759:	ch->pcdata->willpower[0] = 1;
sv.c:1760:	ch->pcdata->willpower[1] = 1;
sv.c:1761:	ch->pcdata->resist[0] = 0;
sv.c:1762:	ch->pcdata->resist[1] = 0;
sv.c:1763:	ch->pcdata->resist[2] = 0;
sv.c:1764:	ch->pcdata->resist[3] = 0;
sv.c:1765:	ch->pcdata->resist[4] = 0;
sv.c:1766:	ch->pcdata->power[0] = 0;
sv.c:1767:	ch->pcdata->power[1] = 0;
sv.c:1768:	ch->pcdata->fake_skill = 0;
sv.c:1769:	ch->pcdata->fake_stance = 0;
sv.c:1770:	ch->pcdata->fake_hit = 0;
sv.c:1771:	ch->pcdata->fake_dam = 0;
sv.c:1772:	ch->pcdata->fake_ac = 0;
sv.c:1773:	ch->pcdata->fake_hp = 0;
sv.c:1774:	ch->pcdata->fake_mana = 0;
sv.c:1775:	ch->pcdata->fake_move = 0;
sv.c:1776:	ch->pcdata->fake_max_hp = 0;
sv.c:1777:	ch->pcdata->fake_max_mana = 0;
sv.c:1778:	ch->pcdata->fake_max_move = 0;
sv.c:1779:	ch->pcdata->fake_stats[STAT_STR] = 0;
sv.c:1780:	ch->pcdata->fake_stats[STAT_INT] = 0;
sv.c:1781:	ch->pcdata->fake_stats[STAT_WIS] = 0;
sv.c:1782:	ch->pcdata->fake_stats[STAT_DEX] = 0;
sv.c:1783:	ch->pcdata->fake_stats[STAT_CON] = 0;
sv.c:1784:	ch->pcdata->obj_vnum = 0;
sv.c:1785:	ch->pcdata->majesty = 0;
sv.c:1786:	ch->pcdata->exhaustion = 0;
sv.c:1787:	ch->pcdata->lie = 0;
sv.c:1788:	ch->pcdata->class = 0;
sv.c:1789:	ch->pcdata->road = -1;
sv.c:1790:	ch->pcdata->roadt = 1;
sv.c:1791:	ch->pcdata->board = &boards[DEFAULT_BOARD];
sv.c:1792:	ch->health_level = HEALTH_NORMAL;
sv.c:1793:	ch->home_x = 0;
sv.c:1794:	ch->home_y = 0;
sv.c:1795:	ch->room = 0;
sv.c:1796:	ch->state = 0;
sv.c:1797:	ch->action = 0;
sv.c:1798:	ch->quality = 0;
sv.c:1800:	ch->pcdata->in_progress = NULL;
sv.c:1802:	ch->attributes[ATTRIB_STR] = 1;
sv.c:1803:	ch->attributes[ATTRIB_DEX] = 1;
sv.c:1804:	ch->attributes[ATTRIB_STA] = 1;
sv.c:1805:	ch->attributes[ATTRIB_CHA] = 1;
sv.c:1806:	ch->attributes[ATTRIB_MAN] = 1;
sv.c:1807:	ch->attributes[ATTRIB_APP] = 1;
sv.c:1808:	ch->attributes[ATTRIB_PER] = 1;
sv.c:1809:	ch->attributes[ATTRIB_INT] = 1;
sv.c:1810:	ch->attributes[ATTRIB_WIT] = 1;
sv.c:1816:			ch->abilities[i][j] = 0;
sv.c:1817:			ch->pcdata->abilities_points[i][j] = 0;
sv.c:1904:		ch->pcdata = alloc_perm (sizeof (*ch->pcdata));
sv.c:1908:		ch->pcdata = pcdata_free;
sv.c:1911:	*ch->pcdata = pcdata_zero;
sv.c:1914:	ch->desc = d;
sv.c:1915:	ch->name = str_dup (name);
sv.c:1916:	ch->act = PLR_BLANK | PLR_COMBINE | PLR_PROMPT;
sv.c:1917:	ch->extra = 0;
sv.c:1918:	ch->extra2 = 0;
sv.c:1919:	ch->more = 0;
sv.c:1920:	ch->more2 = 0;
sv.c:1921:	ch->more3 = 0;
sv.c:1922:	ch->pcdata->familiar = NULL;
sv.c:1923:	ch->pcdata->partner = NULL;
sv.c:1924:	ch->pcdata->propose = NULL;
sv.c:1925:	ch->pcdata->chobj = NULL;
sv.c:1926:	ch->pcdata->memorised = NULL;
sv.c:1927:	ch->pcdata->doing = NULL;
sv.c:1929:	ch->pcdata->aura = NULL;
sv.c:1930:	ch->pcdata->voice = NULL;	
sv.c:1931:	ch->pcdata->roomdesc = NULL;
sv.c:1932:	ch->pcdata->show_social = FALSE;
sv.c:1933:	ch->pcdata->soul_keeper = str_dup ("");
sv.c:1934:	ch->pcdata->soul = 10;
sv.c:1935:	ch->pcdata->thaum_prime = -1;
sv.c:1936:	ch->pcdata->research_power = -1;
sv.c:1937:	ch->pcdata->research_time = 0;
sv.c:1938:	ch->pcdata->research_tick = 0;
sv.c:1939:	ch->pcdata->research_type = 0;
sv.c:1940:	ch->pcdata->rp_counter = 0;
sv.c:1941:	ch->pcdata->infernal_ranking = 0;
sv.c:1942:	ch->pcdata->pwd = str_dup ("");
sv.c:1944:	ch->pcdata->votes = 0;
sv.c:1945:	ch->pcdata->last_vote_time.year = 0;
sv.c:1946:	ch->pcdata->last_vote_time.month = 0;
sv.c:1947:	ch->pcdata->last_vote_time.day = 0;
sv.c:1949:	ch->pcdata->wp_regain_counter = 0;
sv.c:1950:	ch->pcdata->blood_burn_counter = 0;
sv.c:1951:	ch->pcdata->auto_vote_counter = 0;		
sv.c:1952:	ch->pcdata->bamfout = str_dup ("");
sv.c:1953:	ch->pcdata->lupusdescshort = str_dup ("");
sv.c:1954:	ch->pcdata->crinosdescshort = str_dup ("");
sv.c:1955:	ch->pcdata->hispodescshort = str_dup ("");
sv.c:1956:	ch->pcdata->glabrodescshort = str_dup ("");
sv.c:1957:	ch->pcdata->title = str_dup ("");
sv.c:1958:	ch->pcdata->conception = str_dup ("");
sv.c:1959:	ch->pcdata->parents = str_dup ("");
sv.c:1960:	ch->pcdata->cparents = str_dup ("");
sv.c:1961:	ch->pcdata->marriage = str_dup ("");
sv.c:1962:	ch->pcdata->email = str_dup ("");
sv.c:1963:	ch->pcdata->conding = str_dup ("");
sv.c:1964:	ch->pcdata->love = str_dup ("");
sv.c:1965:	ch->pcdata->coterie = str_dup ("");
sv.c:1966:	ch->pcdata->cot_time = str_dup ("None");
sv.c:1967:	ch->pcdata->cot_clans = str_dup ("All");
sv.c:1968:	ch->pcdata->cot_sides = str_dup ("All");
sv.c:1969:	ch->pcdata->leader = str_dup ("");
sv.c:1970:	ch->pcdata->stancename = str_dup ("");
sv.c:1971:	ch->pcdata->stancelist = str_dup ("");
sv.c:1972:	ch->pcdata->stancework = str_dup ("");
sv.c:1973:	ch->pcdata->stancework = str_dup ("");
sv.c:1974:	ch->pcdata->lupusdesc = str_dup ("");
sv.c:1975:	ch->pcdata->crinosdesc = str_dup ("");
sv.c:1976:	ch->pcdata->hispodesc = str_dup ("");
sv.c:1977:	ch->pcdata->glabrodesc = str_dup ("");
sv.c:1978:	ch->pcdata->giftlist = str_dup ("");
sv.c:1979:	ch->pcdata->tempdesc = str_dup ("");
sv.c:1980:	ch->pcdata->showtempdesc = FALSE;
sv.c:1981:	ch->lord = str_dup ("");
sv.c:1982:	ch->clan = str_dup ("");
sv.c:1983:	ch->side = str_dup ("");
sv.c:1984:	ch->nature = str_dup("");
sv.c:1985:	ch->demeanor = str_dup("");
sv.c:1986:	ch->order = str_dup("");
sv.c:1987:	ch->impulse = str_dup("");
sv.c:1988:	ch->morph = str_dup ("");
sv.c:1989:	ch->mem_name = str_dup ("");
sv.c:1990:	ch->mem_desc = str_dup ("");
sv.c:1991:	ch->pload = str_dup ("");
sv.c:1992:	ch->prompt = str_dup ("");
sv.c:1993:	ch->cprompt = str_dup ("");
sv.c:1996:	free_string (ch->lasttime);
sv.c:1997:	ch->createtime = str_dup (strtime);
sv.c:1998:	ch->lasttime = str_dup ("");
sv.c:1999:	ch->lasthost = str_dup ("");
sv.c:2000:	ch->poweraction = str_dup ("");
sv.c:2001:	ch->powertype = str_dup ("");
sv.c:2002:	ch->hunting = str_dup ("");
sv.c:2003:	ch->pcdata->doing = str_dup ("");
sv.c:2005:	ch->pcdata->aura = str_dup ("");
sv.c:2006:	ch->pcdata->voice = str_dup ("");
sv.c:2007:	ch->pcdata->roomdesc = str_dup ("");
sv.c:2008:	ch->pcdata->show_social = FALSE;
sv.c:2009:	ch->pcdata->denydate = 0;
sv.c:2010:	ch->pcdata->stancemove[0] = 0;
sv.c:2011:	ch->pcdata->stancemove[1] = 0;
sv.c:2012:	ch->pcdata->stancemove[2] = 0;
sv.c:2013:	ch->pcdata->stancemove[3] = 0;
sv.c:2014:	ch->pcdata->stancemove[4] = 0;
sv.c:2015:	ch->spectype = 0;
sv.c:2016:	ch->specpower = 0;
sv.c:2017:	ch->mounted = 0;
sv.c:2018:	ch->home = 3700;
sv.c:2019:	ch->agg = 0;
sv.c:2020:	ch->vampgen = 0;
sv.c:2021:	ch->pcdata->virtues[VIRTUE_CONSCIENCE] = 1;
sv.c:2022:	ch->pcdata->virtues[VIRTUE_SELFCONTROL] = 1;
sv.c:2023:	ch->pcdata->virtues[VIRTUE_COURAGE] = 1;
sv.c:2026:		ch->pcdata->virtues[VIRTUE_WISDOM] = 1;
sv.c:2027:		ch->pcdata->virtues[VIRTUE_FAITH] = 1;
sv.c:2028:		ch->pcdata->virtues[VIRTUE_ZEAL] = 1;
sv.c:2030:	ch->paradox[0] = 0;	/* Total paradox */
sv.c:2031:	ch->paradox[1] = 0;	/* Current Paradox */
sv.c:2032:	ch->paradox[2] = 0;	/* Paradox Ticker */
sv.c:2033:	ch->damcap[0] = 1000;
sv.c:2034:	ch->damcap[1] = 0;
sv.c:2035:	ch->vampaff = 0;
sv.c:2036:	ch->itemaffect = 0;
sv.c:2037:	ch->vamppass = -1;
sv.c:2038:	ch->polyaff = 0;
sv.c:2039:	ch->immune = 0;
sv.c:2040:	ch->form = 0;
sv.c:2041:	ch->init = 0;
sv.c:2042:	ch->body = 32767;
sv.c:2043:	ch->beast = 20;
sv.c:2044:	ch->truebeast = 20;
sv.c:2045:	ch->loc_hp[0] = 0;
sv.c:2046:	ch->loc_hp[1] = 0;
sv.c:2047:	ch->loc_hp[2] = 0;
sv.c:2048:	ch->loc_hp[3] = 0;
sv.c:2049:	ch->loc_hp[4] = 0;
sv.c:2050:	ch->loc_hp[5] = 0;
sv.c:2051:	ch->loc_hp[6] = 0;
sv.c:2052:	ch->wpn[0] = 0;
sv.c:2053:	ch->wpn[1] = 0;
sv.c:2054:	ch->wpn[2] = 0;
sv.c:2055:	ch->wpn[3] = 0;
sv.c:2056:	ch->wpn[4] = 0;
sv.c:2057:	ch->wpn[5] = 0;
sv.c:2058:	ch->wpn[6] = 0;
sv.c:2059:	ch->wpn[7] = 0;
sv.c:2060:	ch->wpn[8] = 0;
sv.c:2061:	ch->wpn[9] = 0;
sv.c:2062:	ch->wpn[10] = 0;
sv.c:2063:	ch->wpn[11] = 0;
sv.c:2064:	ch->wpn[12] = 0;
sv.c:2065:	ch->spl[0] = 4;
sv.c:2066:	ch->spl[1] = 4;
sv.c:2067:	ch->spl[2] = 4;
sv.c:2068:	ch->spl[3] = 4;
sv.c:2069:	ch->spl[4] = 4;
sv.c:2070:	ch->cmbt[0] = 0;
sv.c:2071:	ch->cmbt[1] = 0;
sv.c:2072:	ch->cmbt[2] = 0;
sv.c:2073:	ch->cmbt[3] = 0;
sv.c:2074:	ch->cmbt[4] = 0;
sv.c:2075:	ch->cmbt[5] = 0;
sv.c:2076:	ch->cmbt[6] = 0;
sv.c:2077:	ch->cmbt[7] = 0;
sv.c:2078:	ch->stance[0] = 0;
sv.c:2079:	ch->stance[1] = 0;
sv.c:2080:	ch->stance[2] = 0;
sv.c:2081:	ch->stance[3] = 0;
sv.c:2082:	ch->stance[4] = 0;
sv.c:2083:	ch->stance[5] = 0;
sv.c:2084:	ch->stance[6] = 0;
sv.c:2085:	ch->stance[7] = 0;
sv.c:2086:	ch->stance[8] = 0;
sv.c:2087:	ch->stance[9] = 0;
sv.c:2088:	ch->stance[10] = 0;
sv.c:2089:	ch->stance[11] = 0;
sv.c:2090:	ch->stance[12] = 0;
sv.c:2091:	ch->stance[13] = 0;
sv.c:2092:	ch->stance[14] = 0;
sv.c:2093:	ch->stance[15] = 0;
sv.c:2094:	ch->pcdata->extended_char_creation_in_progress = FALSE;
sv.c:2095:	ch->pkill = 0;
sv.c:2096:	ch->pdeath = 0;
sv.c:2097:	ch->mkill = 0;
sv.c:2098:	ch->mdeath = 0;
sv.c:2099:	ch->embraced = 0;
sv.c:2100:	ch->blood[0] = 10;
sv.c:2101:	ch->blood[1] = 10;
sv.c:2102:	ch->blood[2] = 1;
sv.c:2103:	ch->pcdata->aggdamage = 0;
sv.c:2104:	ch->pcdata->bashingdamage = 0;
sv.c:2105:	ch->pcdata->lethaldamage = 0;
sv.c:2106:	ch->pcdata->perm_str = 13;
sv.c:2107:	ch->pcdata->perm_int = 13;
sv.c:2108:	ch->pcdata->perm_wis = 13;
sv.c:2109:	ch->pcdata->perm_dex = 13;
sv.c:2110:	ch->pcdata->perm_con = 13;
sv.c:2111:	ch->pcdata->quest = 0;
sv.c:2112:	ch->pcdata->wolf = 0;
sv.c:2113:	ch->pcdata->rank = 0;
sv.c:2114:	ch->pcdata->faith = 0;
sv.c:2117:		ch->pcdata->conviction[CONVICTION_CURRENT] = 0;
sv.c:2118:		ch->pcdata->conviction[CONVICTION_MAX] = 0;
sv.c:2119:		ch->pcdata->conviction_bank = 0;
sv.c:2121:	ch->pcdata->regenerate = 0;
sv.c:2122:	ch->pcdata->demonic = 0;
sv.c:2123:	ch->pcdata->atm = 0;
sv.c:2124:	ch->pcdata->song = 0;
sv.c:2125:	ch->pcdata->necromancy = 0;
sv.c:2126:	ch->pcdata->obeah = 0;
sv.c:2127:	ch->pcdata->darkness = 0;
sv.c:2128:	ch->pcdata->temporis = 0;
sv.c:2129:	ch->pcdata->silence = 0;
sv.c:2130:	ch->pcdata->dementation = 0;
sv.c:2131:	ch->pcdata->devil = 0;
sv.c:2132:	ch->pcdata->bodymods = 0;
sv.c:2133:	ch->pcdata->vision = 3;
sv.c:2134:	ch->pcdata->reina = 0;
sv.c:2135:	ch->pcdata->bpoints = 0;
sv.c:2136:	ch->pcdata->dpoints = 0;
sv.c:2137:	ch->pcdata->gpoints = 0;
sv.c:2138:	ch->pcdata->rpoints = 0;
sv.c:2139:	ch->pcdata->wpoints = 0;
sv.c:2140:	ch->pcdata->spirit = 0;
sv.c:2141:	ch->pcdata->conjure = 0;
sv.c:2142:	ch->pcdata->celerity = 0;
sv.c:2143:	ch->pcdata->firstaid = 0;
sv.c:2144:	ch->pcdata->repair = 0;
sv.c:2145:	ch->pcdata->teach = 0;
sv.c:2146:	ch->pcdata->learn = 0;
sv.c:2147:	ch->pcdata->notes = 0;
sv.c:2148:	ch->pcdata->evileye = 0;
sv.c:2149:	ch->pcdata->followers = 0;
sv.c:2150:	ch->pcdata->gnosis[0] = 1;
sv.c:2151:	ch->pcdata->gnosis[1] = 1;
sv.c:2152:	ch->pcdata->rage[0] = 1;
sv.c:2153:	ch->pcdata->rage[1] = 1;
sv.c:2155:	ch->pcdata->absorb[0] = 0;
sv.c:2156:	ch->pcdata->absorb[1] = 0;
sv.c:2157:	ch->pcdata->absorb[2] = 0;
sv.c:2158:	ch->pcdata->absorb[3] = 0;
sv.c:2159:	ch->pcdata->absorb[4] = 0;
sv.c:2160:	ch->pcdata->absorb[5] = 0;
sv.c:2161:	ch->pcdata->qstats[0] = 0;
sv.c:2162:	ch->pcdata->qstats[1] = 0;
sv.c:2163:	ch->pcdata->qstats[2] = 0;
sv.c:2164:	ch->pcdata->qstats[3] = 0;
sv.c:2165:	ch->pcdata->qstats[4] = 0;
sv.c:2166:	ch->pcdata->exercise[0] = 0;
sv.c:2167:	ch->pcdata->exercise[1] = 0;
sv.c:2168:	ch->pcdata->exercise[2] = 0;
sv.c:2169:	ch->pcdata->exercise[3] = 0;
sv.c:2170:	ch->pcdata->language[0] = 0;
sv.c:2171:	ch->pcdata->language[1] = 0;
sv.c:2172:	ch->pcdata->stage[0] = 0;
sv.c:2173:	ch->pcdata->stage[1] = 0;
sv.c:2174:	ch->pcdata->stage[2] = 0;
sv.c:2175:	ch->pcdata->status[0] = 0;
sv.c:2176:	ch->pcdata->status[1] = 0;
sv.c:2177:	ch->pcdata->status[2] = 0;
sv.c:2178:	ch->pcdata->wolfform[0] = 1;
sv.c:2179:	ch->pcdata->wolfform[1] = 1;
sv.c:2180:	ch->pcdata->score[0] = 0;
sv.c:2181:	ch->pcdata->score[1] = 0;
sv.c:2182:	ch->pcdata->score[2] = 0;
sv.c:2183:	ch->pcdata->score[3] = 0;
sv.c:2184:	ch->pcdata->score[4] = 0;
sv.c:2185:	ch->pcdata->score[5] = 0;
sv.c:2186:	ch->pcdata->runes[0] = 0;
sv.c:2187:	ch->pcdata->runes[1] = 0;
sv.c:2188:	ch->pcdata->runes[2] = 0;
sv.c:2189:	ch->pcdata->runes[3] = 0;
sv.c:2190:	ch->pcdata->disc[0] = 0;
sv.c:2191:	ch->pcdata->disc[1] = 0;
sv.c:2192:	ch->pcdata->disc[2] = 0;
sv.c:2193:	ch->pcdata->disc[3] = 0;
sv.c:2194:	ch->pcdata->disc[4] = 0;
sv.c:2195:	ch->pcdata->disc[5] = 0;
sv.c:2196:	ch->pcdata->disc[6] = 0;
sv.c:2197:	ch->pcdata->disc[7] = 0;
sv.c:2198:	ch->pcdata->disc[8] = 0;
sv.c:2199:	ch->pcdata->disc[9] = 0;
sv.c:2200:	ch->pcdata->disc[10] = 0;
sv.c:2201:	ch->pcdata->research[0] = 0;
sv.c:2202:	ch->pcdata->research[1] = 0;
sv.c:2204:	ch->pcdata->rituals[0] = 0;
sv.c:2205:	ch->pcdata->rituals[1] = 0;
sv.c:2206:	ch->pcdata->rituals[2] = 0;
sv.c:2207:	ch->pcdata->rituals[3] = 0;
sv.c:2208:	ch->pcdata->rituals[4] = 0;
sv.c:2209:	ch->pcdata->rituals[5] = 0;
sv.c:2210:	ch->pcdata->rituals[6] = 0;
sv.c:2211:	ch->pcdata->rituals[7] = 0;
sv.c:2212:	ch->pcdata->rituals[8] = 0;
sv.c:2213:	ch->pcdata->rituals[9] = 0;
sv.c:2214:	ch->pcdata->cland[0] = 0;
sv.c:2215:	ch->pcdata->cland[1] = 0;
sv.c:2216:	ch->pcdata->cland[2] = 0;
sv.c:2217:	ch->pcdata->diableries[0] = 0;
sv.c:2218:	ch->pcdata->diableries[1] = 0;
sv.c:2219:	ch->pcdata->renown[0] = 0;
sv.c:2220:	ch->pcdata->renown[1] = 0;
sv.c:2221:	ch->pcdata->renown[2] = 0;
sv.c:2222:	ch->pcdata->renown[3] = 0;
sv.c:2223:	ch->pcdata->renown[4] = 0;
sv.c:2224:	ch->pcdata->renown[5] = 0;
sv.c:2226:	ch->pcdata->breed[0] = 0;
sv.c:2227:	ch->pcdata->breed[1] = 0;
sv.c:2228:	ch->pcdata->breed[2] = 0;
sv.c:2229:	ch->pcdata->auspice[0] = 0;
sv.c:2230:	ch->pcdata->auspice[1] = 0;
sv.c:2231:	ch->pcdata->auspice[2] = 0;
sv.c:2232:	ch->pcdata->auspice[3] = 0;
sv.c:2233:	ch->pcdata->auspice[4] = 0;
sv.c:2234:	ch->pcdata->tribes[0] = 0;
sv.c:2235:	ch->pcdata->tribes[1] = 0;
sv.c:2236:	ch->pcdata->tribes[2] = 0;
sv.c:2237:	ch->pcdata->tribes[3] = 0;
sv.c:2238:	ch->pcdata->tribes[4] = 0;
sv.c:2239:	ch->pcdata->tribes[5] = 0;
sv.c:2240:	ch->pcdata->tribes[6] = 0;
sv.c:2241:	ch->pcdata->tribes[7] = 0;
sv.c:2242:	ch->pcdata->tribes[8] = 0;
sv.c:2243:	ch->pcdata->tribes[9] = 0;
sv.c:2244:	ch->pcdata->tribes[10] = 0;
sv.c:2245:	ch->pcdata->tribes[11] = 0;
sv.c:2246:	ch->pcdata->tribes[12] = 0;
sv.c:2247:	ch->pcdata->tribes[13] = 0;
sv.c:2248:	ch->pcdata->tribes[14] = 0;
sv.c:2249:	ch->pcdata->tribes[15] = 0;
sv.c:2250:	ch->pcdata->tribes[16] = 0;
sv.c:2251:	ch->pcdata->tribes[17] = 0;
sv.c:2252:	ch->pcdata->tribes[18] = 0;
sv.c:2253:	ch->pcdata->tribes[19] = 0;
sv.c:2254:	ch->pcdata->thaum[0] = 0;
sv.c:2255:	ch->pcdata->thaum[1] = 0;
sv.c:2256:	ch->pcdata->thaum[2] = 0;
sv.c:2257:	ch->pcdata->thaum[3] = 0;
sv.c:2258:	ch->pcdata->thaum[4] = 0;
sv.c:2259:	ch->pcdata->thaum[5] = 0;
sv.c:2260:	ch->pcdata->thaum[6] = 0;
sv.c:2261:	ch->pcdata->thaum[7] = 0;
sv.c:2262:	ch->pcdata->thaum[8] = 0;
sv.c:2263:	ch->pcdata->thaum[9] = 0;
sv.c:2264:	ch->pcdata->thaum[10] = 0;
sv.c:2265:	ch->pcdata->thaum[11] = 0;
sv.c:2266:	ch->pcdata->thaum[12] = 0;
sv.c:2267:	ch->pcdata->thaum[13] = 0;
sv.c:2268:	ch->pcdata->thaum[14] = 0;
sv.c:2269:	ch->pcdata->thaum[15] = 0;
sv.c:2270:	ch->pcdata->thaum[16] = 0;
sv.c:2271:	ch->pcdata->thaum[17] = 0;
sv.c:2272:	ch->pcdata->thaum[18] = 0;
sv.c:2273:	ch->pcdata->thaum[19] = 0;
sv.c:2275:	ch->pcdata->powers[0] = 0;
sv.c:2276:	ch->pcdata->powers[1] = 0;
sv.c:2277:	ch->pcdata->powers[2] = 0;
sv.c:2278:	ch->pcdata->powers[3] = 0;
sv.c:2279:	ch->pcdata->powers[4] = 0;
sv.c:2280:	ch->pcdata->powers[5] = 0;
sv.c:2281:	ch->pcdata->powers[6] = 0;
sv.c:2282:	ch->pcdata->powers[7] = 0;
sv.c:2283:	ch->pcdata->powers[8] = 0;
sv.c:2284:	ch->pcdata->powers[9] = 0;
sv.c:2285:	ch->pcdata->powers[10] = 0;
sv.c:2286:	ch->pcdata->powers[11] = 0;
sv.c:2287:	ch->pcdata->powers[12] = 0;
sv.c:2288:	ch->pcdata->powers[13] = 0;
sv.c:2289:	ch->pcdata->powers[14] = 0;
sv.c:2290:	ch->pcdata->powers[15] = 0;
sv.c:2291:	ch->pcdata->powers[16] = 0;
sv.c:2292:	ch->pcdata->powers[17] = 0;
sv.c:2293:	ch->pcdata->powers[18] = 0;
sv.c:2294:	ch->pcdata->powers[19] = 0;
sv.c:2295:	ch->pcdata->powers[20] = 0;
sv.c:2296:	ch->pcdata->powers[21] = 0;
sv.c:2297:	ch->pcdata->powers[22] = 0;
sv.c:2298:	ch->pcdata->powers[23] = 0;
sv.c:2299:	ch->pcdata->powers[24] = 0;
sv.c:2300:	ch->pcdata->powers[25] = 0;
sv.c:2301:	ch->pcdata->powers[26] = 0;
sv.c:2302:	ch->pcdata->powers[27] = 0;
sv.c:2303:	ch->pcdata->powers[28] = 0;
sv.c:2304:	ch->pcdata->powers[29] = 0;
sv.c:2305:	ch->pcdata->powers[30] = 0;
sv.c:2306:	ch->pcdata->powers[31] = 0;
sv.c:2307:	ch->pcdata->powers[32] = 0;
sv.c:2308:	ch->pcdata->powers[33] = 0;
sv.c:2309:	ch->pcdata->powers[34] = 0;
sv.c:2310:	ch->pcdata->powers[35] = 0;
sv.c:2311:	ch->pcdata->powers[36] = 0;
sv.c:2312:	ch->pcdata->powers[37] = 0;
sv.c:2313:	ch->pcdata->powers[38] = 0;
sv.c:2314:	ch->pcdata->powers[39] = 0;
sv.c:2315:	ch->pcdata->powers_mod[0] = 0;
sv.c:2316:	ch->pcdata->powers_mod[1] = 0;
sv.c:2317:	ch->pcdata->powers_mod[2] = 0;
sv.c:2318:	ch->pcdata->powers_mod[3] = 0;
sv.c:2319:	ch->pcdata->powers_mod[4] = 0;
sv.c:2320:	ch->pcdata->powers_mod[5] = 0;
sv.c:2321:	ch->pcdata->powers_mod[6] = 0;
sv.c:2322:	ch->pcdata->powers_mod[7] = 0;
sv.c:2323:	ch->pcdata->powers_mod[8] = 0;
sv.c:2324:	ch->pcdata->powers_mod[9] = 0;
sv.c:2325:	ch->pcdata->powers_mod[10] = 0;
sv.c:2326:	ch->pcdata->powers_mod[11] = 0;
sv.c:2327:	ch->pcdata->powers_mod[12] = 0;
sv.c:2328:	ch->pcdata->powers_mod[13] = 0;
sv.c:2329:	ch->pcdata->powers_mod[14] = 0;
sv.c:2330:	ch->pcdata->powers_mod[15] = 0;
sv.c:2331:	ch->pcdata->powers_mod[16] = 0;
sv.c:2332:	ch->pcdata->powers_mod[17] = 0;
sv.c:2333:	ch->pcdata->powers_mod[18] = 0;
sv.c:2334:	ch->pcdata->powers_mod[19] = 0;
sv.c:2335:	ch->pcdata->powers_set[0] = 0;
sv.c:2336:	ch->pcdata->powers_set[1] = 0;
sv.c:2337:	ch->pcdata->powers_set[2] = 0;
sv.c:2338:	ch->pcdata->powers_set[3] = 0;
sv.c:2339:	ch->pcdata->powers_set[4] = 0;
sv.c:2340:	ch->pcdata->powers_set[5] = 0;
sv.c:2341:	ch->pcdata->powers_set[6] = 0;
sv.c:2342:	ch->pcdata->powers_set[7] = 0;
sv.c:2343:	ch->pcdata->powers_set[8] = 0;
sv.c:2344:	ch->pcdata->powers_set[9] = 0;
sv.c:2345:	ch->pcdata->powers_set[10] = 0;
sv.c:2346:	ch->pcdata->powers_set[11] = 0;
sv.c:2347:	ch->pcdata->powers_set[12] = 0;
sv.c:2348:	ch->pcdata->powers_set[13] = 0;
sv.c:2349:	ch->pcdata->powers_set[14] = 0;
sv.c:2350:	ch->pcdata->powers_set[15] = 0;
sv.c:2351:	ch->pcdata->powers_set[16] = 0;
sv.c:2352:	ch->pcdata->powers_set[17] = 0;
sv.c:2353:	ch->pcdata->powers_set[18] = 0;
sv.c:2354:	ch->pcdata->powers_set[19] = 0;
sv.c:2355:	ch->pcdata->powers_set_wear = 0;
sv.c:2356:	ch->pcdata->genes[0] = 0;
sv.c:2357:	ch->pcdata->genes[1] = 0;
sv.c:2358:	ch->pcdata->genes[2] = 0;
sv.c:2359:	ch->pcdata->genes[3] = 0;
sv.c:2360:	ch->pcdata->genes[4] = 0;
sv.c:2361:	ch->pcdata->genes[5] = 0;
sv.c:2362:	ch->pcdata->genes[6] = 0;
sv.c:2363:	ch->pcdata->genes[7] = 0;
sv.c:2364:	ch->pcdata->genes[8] = 0;
sv.c:2365:	ch->pcdata->genes[9] = 0;
sv.c:2366:	ch->pcdata->cot_min[0] = 0;
sv.c:2367:	ch->pcdata->cot_min[1] = 0;
sv.c:2368:	ch->pcdata->cot_min[2] = 0;
sv.c:2369:	ch->pcdata->cot_min[3] = 0;
sv.c:2370:	ch->pcdata->cot_min[4] = 0;
sv.c:2371:	ch->pcdata->cot_min[5] = 0;
sv.c:2372:	ch->pcdata->cot_min[6] = 0;
sv.c:2373:	ch->pcdata->cot_min[7] = 0;
sv.c:2374:	ch->pcdata->cot_min[8] = 0;
sv.c:2375:	ch->pcdata->cot_min[9] = 0;
sv.c:2376:	ch->pcdata->cot_min[10] = 0;
sv.c:2377:	ch->pcdata->cot_min[11] = 0;
sv.c:2378:	ch->pcdata->willpower[0] = 1;
sv.c:2379:	ch->pcdata->willpower[1] = 1;
sv.c:2380:	ch->pcdata->resist[0] = 0;
sv.c:2381:	ch->pcdata->resist[1] = 0;
sv.c:2382:	ch->pcdata->resist[2] = 0;
sv.c:2383:	ch->pcdata->resist[3] = 0;
sv.c:2384:	ch->pcdata->resist[4] = 0;
sv.c:2385:	ch->pcdata->power[0] = 0;
sv.c:2386:	ch->pcdata->power[1] = 0;
sv.c:2387:	ch->pcdata->fake_skill = 0;
sv.c:2388:	ch->pcdata->fake_stance = 0;
sv.c:2389:	ch->pcdata->fake_hit = 0;
sv.c:2390:	ch->pcdata->fake_dam = 0;
sv.c:2391:	ch->pcdata->fake_ac = 0;
sv.c:2392:	ch->pcdata->fake_hp = 0;
sv.c:2393:	ch->pcdata->fake_mana = 0;
sv.c:2394:	ch->pcdata->fake_move = 0;
sv.c:2395:	ch->pcdata->fake_max_hp = 0;
sv.c:2396:	ch->pcdata->fake_max_mana = 0;
sv.c:2397:	ch->pcdata->fake_max_move = 0;
sv.c:2398:	ch->pcdata->fake_stats[STAT_STR] = 0;
sv.c:2399:	ch->pcdata->fake_stats[STAT_INT] = 0;
sv.c:2400:	ch->pcdata->fake_stats[STAT_WIS] = 0;
sv.c:2401:	ch->pcdata->fake_stats[STAT_DEX] = 0;
sv.c:2402:	ch->pcdata->fake_stats[STAT_CON] = 0;
sv.c:2403:	ch->pcdata->obj_vnum = 0;
sv.c:2404:	ch->pcdata->majesty = 0;
sv.c:2405:	ch->pcdata->exhaustion = 0;
sv.c:2406:	ch->pcdata->lie = 0;
sv.c:2407:	ch->pcdata->class = 0;
sv.c:2408:	ch->pcdata->board = &boards[DEFAULT_BOARD];
sv.c:2409:	ch->home_x = 0;
sv.c:2410:	ch->home_y = 0;
sv.c:2411:	ch->room = 0;
sv.c:2412:	ch->state = 0;
sv.c:2413:	ch->action = 0;
sv.c:2414:	ch->quality = 0;
sv.c:2415:	ch->pcdata->extra = NULL;
sv.c:2417:	ch->pcdata->in_progress = NULL;
sv.c:2419:	ch->attributes[ATTRIB_STR] = 1;
sv.c:2420:	ch->attributes[ATTRIB_DEX] = 1;
sv.c:2421:	ch->attributes[ATTRIB_STA] = 1;
sv.c:2422:	ch->attributes[ATTRIB_CHA] = 1;
sv.c:2423:	ch->attributes[ATTRIB_MAN] = 1;
sv.c:2424:	ch->attributes[ATTRIB_APP] = 1;
sv.c:2425:	ch->attributes[ATTRIB_PER] = 1;
sv.c:2426:	ch->attributes[ATTRIB_INT] = 1;
sv.c:2427:	ch->attributes[ATTRIB_WIT] = 1;
sv.c:2433:			ch->abilities[i][j] = 0;
sv.c:2532:				ch->pcdata->absorb[0] = fread_number (fp);
sv.c:2533:				ch->pcdata->absorb[1] = fread_number (fp);
sv.c:2534:				ch->pcdata->absorb[2] = fread_number (fp);
sv.c:2535:				ch->pcdata->absorb[3] = fread_number (fp);
sv.c:2536:				ch->pcdata->absorb[4] = fread_number (fp);
sv.c:2537:				ch->pcdata->absorb[5] = fread_number (fp);
sv.c:2542:			KEY ("Act", ch->act, fread_number (fp));
sv.c:2543:			KEY ("AffectedBy", ch->affected_by, fread_number (fp));
sv.c:2544:			KEY ("Alignment", ch->alignment, fread_number (fp));
sv.c:2545:			KEY ("Armor", ch->armor, fread_number (fp));
sv.c:2581:				paf->next = ch->affected;
sv.c:2582:				ch->affected = paf;
sv.c:2587:			KEY ("Agg", ch->agg, fread_number (fp));
sv.c:2588:			KEY ("Aggdamage", ch->pcdata->aggdamage, fread_number (fp));
sv.c:2589:			KEY ("AutoVote", ch->pcdata->auto_vote_counter, fread_number(fp));
sv.c:2592:				ch->pcdata->auspice[0] = fread_number (fp);
sv.c:2593:				ch->pcdata->auspice[1] = fread_number (fp);
sv.c:2594:				ch->pcdata->auspice[2] = fread_number (fp);
sv.c:2595:				ch->pcdata->auspice[3] = fread_number (fp);
sv.c:2596:				ch->pcdata->auspice[4] = fread_number (fp);
sv.c:2601:			KEY ("Atm", ch->pcdata->atm, fread_number (fp));
sv.c:2605:				ch->pcdata->mod_str = fread_number (fp);
sv.c:2606:				ch->pcdata->mod_int = fread_number (fp);
sv.c:2607:				ch->pcdata->mod_wis = fread_number (fp);
sv.c:2608:				ch->pcdata->mod_dex = fread_number (fp);
sv.c:2609:				ch->pcdata->mod_con = fread_number (fp);
sv.c:2616:				ch->pcdata->perm_str = fread_number (fp);
sv.c:2617:				ch->pcdata->perm_int = fread_number (fp);
sv.c:2618:				ch->pcdata->perm_wis = fread_number (fp);
sv.c:2619:				ch->pcdata->perm_dex = fread_number (fp);
sv.c:2620:				ch->pcdata->perm_con = fread_number (fp);
sv.c:2627:			KEY ("Bamfin", ch->pcdata->bamfin, fread_string (fp));
sv.c:2628:			KEY ("Bamfout", ch->pcdata->bamfout, fread_string (fp));
sv.c:2629:			KEY ("Bashingdamage", ch->pcdata->bashingdamage, fread_number (fp));
sv.c:2630:			KEY ("Beast", ch->beast, fread_number (fp));
sv.c:2631:			KEY ("BloodCounter", ch->pcdata->blood_burn_counter, fread_number(fp));
sv.c:2634:				ch->blood[0] = fread_number (fp);
sv.c:2635:				ch->blood[1] = fread_number (fp);
sv.c:2639:			KEY ("Body", ch->body, fread_number (fp));
sv.c:2640:			KEY ("Bodymods", ch->pcdata->bodymods, fread_number (fp));
sv.c:2641:			KEY ("Bpoints", ch->pcdata->bpoints, fread_number (fp));
sv.c:2644:				ch->pcdata->breed[0] = fread_number (fp);
sv.c:2645:				ch->pcdata->breed[1] = fread_number (fp);
sv.c:2646:				ch->pcdata->breed[2] = fread_number (fp);
sv.c:2664:						sprintf (buf, "fread_char: %s had unknown board name: %s. Skipped.", ch->name, boardname);
sv.c:2669:						ch->pcdata->last_note[i] = fread_number (fp);
sv.c:2678:			KEY ("CrinosDesc", ch->pcdata->crinosdesc, fread_string (fp));
sv.c:2679:			KEY ("Celerity", ch->pcdata->celerity, fread_number (fp));
sv.c:2680:			KEY ("Clan", ch->clan, fread_string (fp));
sv.c:2683:				ch->pcdata->cland[0] = fread_number (fp);
sv.c:2684:				ch->pcdata->cland[1] = fread_number (fp);
sv.c:2685:				ch->pcdata->cland[2] = fread_number (fp);
sv.c:2689:			KEY ("Class", ch->class, fread_number (fp));
sv.c:2693:				ch->cmbt[0] = fread_number (fp);
sv.c:2694:				ch->cmbt[1] = fread_number (fp);
sv.c:2695:				ch->cmbt[2] = fread_number (fp);
sv.c:2696:				ch->cmbt[3] = fread_number (fp);
sv.c:2697:				ch->cmbt[4] = fread_number (fp);
sv.c:2698:				ch->cmbt[5] = fread_number (fp);
sv.c:2699:				ch->cmbt[6] = fread_number (fp);
sv.c:2700:				ch->cmbt[7] = fread_number (fp);
sv.c:2705:			KEY ("Conception", ch->pcdata->conception, fread_string (fp));
sv.c:2706:			KEY ("Conding", ch->pcdata->conding, fread_string (fp));
sv.c:2710:				ch->pcdata->condition[0] = fread_number (fp);
sv.c:2711:				ch->pcdata->condition[1] = fread_number (fp);
sv.c:2712:				ch->pcdata->condition[2] = fread_number (fp);
sv.c:2716:			KEY ("Conjure", ch->pcdata->conjure, fread_number (fp));
sv.c:2721:					ch->pcdata->conviction[CONVICTION_CURRENT] = fread_number (fp);
sv.c:2722:					ch->pcdata->conviction[CONVICTION_MAX] = fread_number (fp);
sv.c:2726:				KEY ("ConvictionBank", ch->pcdata->conviction_bank, fread_number (fp));
sv.c:2730:				ch->pcdata->cot_min[0] = fread_number (fp);
sv.c:2731:				ch->pcdata->cot_min[1] = fread_number (fp);
sv.c:2732:				ch->pcdata->cot_min[2] = fread_number (fp);
sv.c:2733:				ch->pcdata->cot_min[3] = fread_number (fp);
sv.c:2734:				ch->pcdata->cot_min[4] = fread_number (fp);
sv.c:2735:				ch->pcdata->cot_min[5] = fread_number (fp);
sv.c:2736:				ch->pcdata->cot_min[6] = fread_number (fp);
sv.c:2737:				ch->pcdata->cot_min[7] = fread_number (fp);
sv.c:2738:				ch->pcdata->cot_min[8] = fread_number (fp);
sv.c:2739:				ch->pcdata->cot_min[9] = fread_number (fp);
sv.c:2740:				ch->pcdata->cot_min[10] = fread_number (fp);
sv.c:2741:				ch->pcdata->cot_min[11] = fread_number (fp);
sv.c:2745:			KEY ("Coterie", ch->pcdata->coterie, fread_string (fp));
sv.c:2746:			KEY ("CotTime", ch->pcdata->cot_time, fread_string (fp));
sv.c:2747:			KEY ("CotClans", ch->pcdata->cot_clans, fread_string (fp));
sv.c:2748:			KEY ("CotSides", ch->pcdata->cot_sides, fread_string (fp));
sv.c:2749:			KEY ("Cparents", ch->pcdata->cparents, fread_string (fp));
sv.c:2750:			KEY ("Cprompt", ch->cprompt, fread_string (fp));
sv.c:2751:			KEY ("Createtime", ch->createtime, fread_string (fp));
sv.c:2755:			KEY ("Devil", ch->pcdata->devil, fread_number (fp));
sv.c:2756:			KEY ("Damroll", ch->damroll, fread_number (fp));
sv.c:2757:			KEY ("Darkness", ch->pcdata->darkness, fread_number (fp));
sv.c:2758:			KEY ("Deaf", ch->deaf, fread_number (fp));
sv.c:2759:			KEY ("Demonic", ch->pcdata->demonic, fread_number (fp));
sv.c:2760:			KEY ("DenyDate", ch->pcdata->denydate, fread_number (fp));
sv.c:2761:			KEY ("Description", ch->description, fread_string (fp));
sv.c:2762:			KEY ("Demeanor", ch->demeanor, fread_string (fp));
sv.c:2763:			KEY ("Dementation", ch->pcdata->dementation, fread_number (fp));
sv.c:2766:				ch->pcdata->diableries[0] = fread_number (fp);
sv.c:2767:				ch->pcdata->diableries[1] = fread_number (fp);
sv.c:2774:				ch->pcdata->disc[0] = fread_number (fp);
sv.c:2775:				ch->pcdata->disc[1] = fread_number (fp);
sv.c:2776:				ch->pcdata->disc[2] = fread_number (fp);
sv.c:2777:				ch->pcdata->disc[3] = fread_number (fp);
sv.c:2778:				ch->pcdata->disc[4] = fread_number (fp);
sv.c:2779:				ch->pcdata->disc[5] = fread_number (fp);
sv.c:2780:				ch->pcdata->disc[6] = fread_number (fp);
sv.c:2781:				ch->pcdata->disc[7] = fread_number (fp);
sv.c:2782:				ch->pcdata->disc[8] = fread_number (fp);
sv.c:2783:				ch->pcdata->disc[9] = fread_number (fp);
sv.c:2784:				ch->pcdata->disc[10] = fread_number (fp);
sv.c:2788:			KEY ("Dpoints", ch->pcdata->dpoints, fread_number (fp));
sv.c:2792:			KEY ("Email", ch->pcdata->email, fread_string (fp));
sv.c:2795:			KEY ("Evileye", ch->pcdata->evileye, fread_number (fp));
sv.c:2798:				ch->pcdata->exercise[0] = fread_number (fp);
sv.c:2799:				ch->pcdata->exercise[1] = fread_number (fp);
sv.c:2800:				ch->pcdata->exercise[2] = fread_number (fp);
sv.c:2801:				ch->pcdata->exercise[3] = fread_number (fp);
sv.c:2805:			KEY ("Exhaustion", ch->pcdata->exhaustion, fread_number (fp));
sv.c:2806:			KEY ("Exp", ch->exp, fread_number (fp));
sv.c:2807:			KEY ("Extra", ch->extra, fread_number (fp));
sv.c:2811:			KEY ("Faith", ch->pcdata->faith, fread_number (fp));
sv.c:2814:				ch->pcdata->fake_skill = fread_number (fp);
sv.c:2815:				ch->pcdata->fake_stance = fread_number (fp);
sv.c:2816:				ch->pcdata->fake_hit = fread_number (fp);
sv.c:2817:				ch->pcdata->fake_dam = fread_number (fp);
sv.c:2818:				ch->pcdata->fake_ac = fread_number (fp);
sv.c:2819:				ch->pcdata->fake_hp = fread_number (fp);
sv.c:2820:				ch->pcdata->fake_mana = fread_number (fp);
sv.c:2821:				ch->pcdata->fake_move = fread_number (fp);
sv.c:2827:				ch->pcdata->fake_max_hp = fread_number (fp);
sv.c:2828:				ch->pcdata->fake_max_mana = fread_number (fp);
sv.c:2829:				ch->pcdata->fake_max_move = fread_number (fp);
sv.c:2830:				ch->pcdata->fake_stats[STAT_STR] = fread_number (fp);
sv.c:2831:				ch->pcdata->fake_stats[STAT_INT] = fread_number (fp);
sv.c:2832:				ch->pcdata->fake_stats[STAT_WIS] = fread_number (fp);
sv.c:2833:				ch->pcdata->fake_stats[STAT_DEX] = fread_number (fp);
sv.c:2834:				ch->pcdata->fake_stats[STAT_CON] = fread_number (fp);
sv.c:2838:			KEY ("Firstaid", ch->pcdata->firstaid, fread_number (fp));
sv.c:2839:			KEY ("Form", ch->form, fread_number (fp));
sv.c:2843:			KEY ("Giftlist", ch->pcdata->giftlist, fread_string (fp));
sv.c:2844:			KEY ("GlabroDesc", ch->pcdata->glabrodesc, fread_string (fp));
sv.c:2847:				ch->pcdata->genes[0] = fread_number (fp);
sv.c:2848:				ch->pcdata->genes[1] = fread_number (fp);
sv.c:2849:				ch->pcdata->genes[2] = fread_number (fp);
sv.c:2850:				ch->pcdata->genes[3] = fread_number (fp);
sv.c:2851:				ch->pcdata->genes[4] = fread_number (fp);
sv.c:2852:				ch->pcdata->genes[5] = fread_number (fp);
sv.c:2853:				ch->pcdata->genes[6] = fread_number (fp);
sv.c:2854:				ch->pcdata->genes[7] = fread_number (fp);
sv.c:2855:				ch->pcdata->genes[8] = fread_number (fp);
sv.c:2856:				ch->pcdata->genes[9] = fread_number (fp);
sv.c:2862:				ch->pcdata->gnosis[0] = fread_number (fp);
sv.c:2863:				ch->pcdata->gnosis[1] = fread_number (fp);
sv.c:2867:			KEY ("Gold", ch->gold, fread_number (fp));
sv.c:2868:			KEY ("Gpoints", ch->pcdata->gpoints, fread_number (fp));
sv.c:2872:			KEY ("HispoDesc", ch->pcdata->hispodesc, fread_string (fp));
sv.c:2875:				ch->home_x = fread_number (fp);
sv.c:2876:				ch->home_y = fread_number (fp);
sv.c:2881:			KEY ("Hitroll", ch->hitroll, fread_number (fp));
sv.c:2882:			KEY ("Home", ch->home, fread_number (fp));
sv.c:2886:				ch->hit = fread_number (fp);
sv.c:2887:				ch->max_hit = fread_number (fp);
sv.c:2888:				ch->mana = fread_number (fp);
sv.c:2889:				ch->max_mana = fread_number (fp);
sv.c:2890:				ch->move = fread_number (fp);
sv.c:2891:				ch->max_move = fread_number (fp);
sv.c:2898:			KEY ("Immune", ch->immune, fread_number (fp));
sv.c:2899:			KEY ("Impulse", ch->impulse, fread_string (fp));
sv.c:2900:			KEY ("Itemaffect", ch->itemaffect, fread_number (fp));
sv.c:2904:			KEY ("LupusDesc", ch->pcdata->lupusdesc, fread_string (fp));
sv.c:2907:				ch->pcdata->language[0] = fread_number (fp);
sv.c:2908:				ch->pcdata->language[1] = fread_number (fp);
sv.c:2913:			KEY ("Lasthost", ch->lasthost, fread_string (fp));
sv.c:2914:			KEY ("Lasttime", ch->lasttime, fread_string (fp));
sv.c:2918:			  ch->pcdata->last_vote_time.year = fread_number( fp );
sv.c:2919:			  ch->pcdata->last_vote_time.month = fread_number( fp );
sv.c:2920:  			  ch->pcdata->last_vote_time.day = fread_number( fp );
sv.c:2925:			KEY ("Leader", ch->pcdata->leader, fread_string (fp));
sv.c:2926:			KEY ("Learn", ch->pcdata->learn, fread_number (fp));
sv.c:2927:			KEY ("Lethaldamage", ch->pcdata->learn, fread_number (fp));
sv.c:2928:			KEY ("Level", ch->level, fread_number (fp));
sv.c:2931:				ch->loc_hp[0] = fread_number (fp);
sv.c:2932:				ch->loc_hp[1] = fread_number (fp);
sv.c:2933:				ch->loc_hp[2] = fread_number (fp);
sv.c:2934:				ch->loc_hp[3] = fread_number (fp);
sv.c:2935:				ch->loc_hp[4] = fread_number (fp);
sv.c:2936:				ch->loc_hp[5] = fread_number (fp);
sv.c:2937:				ch->loc_hp[6] = fread_number (fp);
sv.c:2944:				ch->x = fread_number (fp);
sv.c:2945:				ch->y = fread_number (fp);
sv.c:2946:				ch->room = fread_number (fp);
sv.c:2951:			KEY ("LongDescr", ch->long_descr, fread_string (fp));
sv.c:2952:			KEY ("Lord", ch->lord, fread_string (fp));
sv.c:2953:			KEY ("Love", ch->pcdata->love, fread_string (fp));
sv.c:2957:			KEY ("Majesty", ch->pcdata->majesty, fread_number (fp));
sv.c:2958:			KEY ("Marriage", ch->pcdata->marriage, fread_string (fp));
sv.c:2959:			KEY ("More2", ch->more2, fread_number (fp));
sv.c:2960:			KEY ("More3", ch->more3, fread_number (fp));
sv.c:2961:			KEY ("More", ch->more, fread_number (fp));
sv.c:2962:			KEY ("Morph", ch->morph, fread_string (fp));
sv.c:2975:			KEY ("Nature", ch->nature, fread_string (fp));
sv.c:2976:			KEY ("Necromancy", ch->pcdata->necromancy, fread_number (fp));
sv.c:2977:			KEY ("Notes", ch->pcdata->notes, fread_number (fp));
sv.c:2981:			KEY ("Obeah", ch->pcdata->obeah, fread_number (fp));
sv.c:2982:			KEY ("Objvnum", ch->pcdata->obj_vnum, fread_number (fp));
sv.c:2983:			KEY ("Order", ch->order, fread_string (fp));
sv.c:2989:				ch->paradox[0] = fread_number (fp);
sv.c:2990:				ch->paradox[1] = fread_number (fp);
sv.c:2991:				ch->paradox[2] = fread_number (fp);
sv.c:2996:			KEY ("Parents", ch->pcdata->parents, fread_string (fp));
sv.c:2997:			KEY ("Password", ch->pcdata->pwd, fread_string (fp));
sv.c:2999:			KEY ("Played", ch->played, fread_number (fp));
sv.c:3000:			KEY ("Polyaff", ch->polyaff, fread_number (fp));
sv.c:3004:				ch->pcdata->power[0] = fread_number (fp);
sv.c:3005:				ch->pcdata->power[1] = fread_number (fp);
sv.c:3012:				ch->pcdata->powers[0] = fread_number (fp);
sv.c:3013:				ch->pcdata->powers[1] = fread_number (fp);
sv.c:3014:				ch->pcdata->powers[2] = fread_number (fp);
sv.c:3015:				ch->pcdata->powers[3] = fread_number (fp);
sv.c:3016:				ch->pcdata->powers[4] = fread_number (fp);
sv.c:3017:				ch->pcdata->powers[5] = fread_number (fp);
sv.c:3018:				ch->pcdata->powers[6] = fread_number (fp);
sv.c:3019:				ch->pcdata->powers[7] = fread_number (fp);
sv.c:3020:				ch->pcdata->powers[8] = fread_number (fp);
sv.c:3021:				ch->pcdata->powers[9] = fread_number (fp);
sv.c:3022:				ch->pcdata->powers[10] = fread_number (fp);
sv.c:3023:				ch->pcdata->powers[11] = fread_number (fp);
sv.c:3024:				ch->pcdata->powers[12] = fread_number (fp);
sv.c:3025:				ch->pcdata->powers[13] = fread_number (fp);
sv.c:3026:				ch->pcdata->powers[14] = fread_number (fp);
sv.c:3027:				ch->pcdata->powers[15] = fread_number (fp);
sv.c:3028:				ch->pcdata->powers[16] = fread_number (fp);
sv.c:3029:				ch->pcdata->powers[17] = fread_number (fp);
sv.c:3030:				ch->pcdata->powers[18] = fread_number (fp);
sv.c:3031:				ch->pcdata->powers[19] = fread_number (fp);
sv.c:3032:				ch->pcdata->powers[20] = fread_number (fp);
sv.c:3033:				ch->pcdata->powers[21] = fread_number (fp);
sv.c:3034:				ch->pcdata->powers[22] = fread_number (fp);
sv.c:3035:				ch->pcdata->powers[23] = fread_number (fp);
sv.c:3036:				ch->pcdata->powers[24] = fread_number (fp);
sv.c:3037:				ch->pcdata->powers[25] = fread_number (fp);
sv.c:3038:				ch->pcdata->powers[26] = fread_number (fp);
sv.c:3039:				ch->pcdata->powers[27] = fread_number (fp);
sv.c:3040:				ch->pcdata->powers[28] = fread_number (fp);
sv.c:3041:				ch->pcdata->powers[29] = fread_number (fp);
sv.c:3042:				ch->pcdata->powers[30] = fread_number (fp);
sv.c:3043:				ch->pcdata->powers[31] = fread_number (fp);
sv.c:3044:				ch->pcdata->powers[32] = fread_number (fp);
sv.c:3045:				ch->pcdata->powers[33] = fread_number (fp);
sv.c:3046:				ch->pcdata->powers[34] = fread_number (fp);
sv.c:3047:				ch->pcdata->powers[35] = fread_number (fp);
sv.c:3048:				ch->pcdata->powers[36] = fread_number (fp);
sv.c:3049:				ch->pcdata->powers[37] = fread_number (fp);
sv.c:3050:				ch->pcdata->powers[38] = fread_number (fp);
sv.c:3051:				ch->pcdata->powers[39] = fread_number (fp);
sv.c:3058:				ch->pcdata->powers_mod[0] = fread_number (fp);
sv.c:3059:				ch->pcdata->powers_mod[1] = fread_number (fp);
sv.c:3060:				ch->pcdata->powers_mod[2] = fread_number (fp);
sv.c:3061:				ch->pcdata->powers_mod[3] = fread_number (fp);
sv.c:3062:				ch->pcdata->powers_mod[4] = fread_number (fp);
sv.c:3063:				ch->pcdata->powers_mod[5] = fread_number (fp);
sv.c:3064:				ch->pcdata->powers_mod[6] = fread_number (fp);
sv.c:3065:				ch->pcdata->powers_mod[7] = fread_number (fp);
sv.c:3066:				ch->pcdata->powers_mod[8] = fread_number (fp);
sv.c:3067:				ch->pcdata->powers_mod[9] = fread_number (fp);
sv.c:3068:				ch->pcdata->powers_mod[10] = fread_number (fp);
sv.c:3069:				ch->pcdata->powers_mod[11] = fread_number (fp);
sv.c:3070:				ch->pcdata->powers_mod[12] = fread_number (fp);
sv.c:3071:				ch->pcdata->powers_mod[13] = fread_number (fp);
sv.c:3072:				ch->pcdata->powers_mod[14] = fread_number (fp);
sv.c:3073:				ch->pcdata->powers_mod[15] = fread_number (fp);
sv.c:3074:				ch->pcdata->powers_mod[16] = fread_number (fp);
sv.c:3075:				ch->pcdata->powers_mod[17] = fread_number (fp);
sv.c:3076:				ch->pcdata->powers_mod[18] = fread_number (fp);
sv.c:3077:				ch->pcdata->powers_mod[19] = fread_number (fp);
sv.c:3084:				ch->pcdata->powers_set[0] = fread_number (fp);
sv.c:3085:				ch->pcdata->powers_set[1] = fread_number (fp);
sv.c:3086:				ch->pcdata->powers_set[2] = fread_number (fp);
sv.c:3087:				ch->pcdata->powers_set[3] = fread_number (fp);
sv.c:3088:				ch->pcdata->powers_set[4] = fread_number (fp);
sv.c:3089:				ch->pcdata->powers_set[5] = fread_number (fp);
sv.c:3090:				ch->pcdata->powers_set[6] = fread_number (fp);
sv.c:3091:				ch->pcdata->powers_set[7] = fread_number (fp);
sv.c:3092:				ch->pcdata->powers_set[8] = fread_number (fp);
sv.c:3093:				ch->pcdata->powers_set[9] = fread_number (fp);
sv.c:3094:				ch->pcdata->powers_set[10] = fread_number (fp);
sv.c:3095:				ch->pcdata->powers_set[11] = fread_number (fp);
sv.c:3096:				ch->pcdata->powers_set[12] = fread_number (fp);
sv.c:3097:				ch->pcdata->powers_set[13] = fread_number (fp);
sv.c:3098:				ch->pcdata->powers_set[14] = fread_number (fp);
sv.c:3099:				ch->pcdata->powers_set[15] = fread_number (fp);
sv.c:3100:				ch->pcdata->powers_set[16] = fread_number (fp);
sv.c:3101:				ch->pcdata->powers_set[17] = fread_number (fp);
sv.c:3102:				ch->pcdata->powers_set[18] = fread_number (fp);
sv.c:3103:				ch->pcdata->powers_set[19] = fread_number (fp);
sv.c:3108:			KEY ("PowersWear", ch->pcdata->powers_set_wear, fread_number (fp));
sv.c:3110:			KEY ("Poweraction", ch->poweraction, fread_string (fp));
sv.c:3111:			KEY ("Powertype", ch->powertype, fread_string (fp));
sv.c:3112:			KEY ("Position", ch->position, fread_number (fp));
sv.c:3115:				ch->pkill = fread_number (fp);
sv.c:3116:				ch->pdeath = fread_number (fp);
sv.c:3117:				ch->mkill = fread_number (fp);
sv.c:3118:				ch->mdeath = fread_number (fp);
sv.c:3122:			KEY ("Prompt", ch->prompt, fread_string (fp));
sv.c:3128:				ch->pcdata->qstats[0] = fread_number (fp);
sv.c:3129:				ch->pcdata->qstats[1] = fread_number (fp);
sv.c:3130:				ch->pcdata->qstats[2] = fread_number (fp);
sv.c:3131:				ch->pcdata->qstats[3] = fread_number (fp);
sv.c:3132:				ch->pcdata->qstats[4] = fread_number (fp);
sv.c:3136:			KEY ("Quest", ch->pcdata->quest, fread_number (fp));
sv.c:3142:				ch->pcdata->renown[0] = fread_number (fp);
sv.c:3143:				ch->pcdata->renown[1] = fread_number (fp);
sv.c:3144:				ch->pcdata->renown[2] = fread_number (fp);
sv.c:3145:				ch->pcdata->renown[3] = fread_number (fp);
sv.c:3146:				ch->pcdata->renown[4] = fread_number (fp);
sv.c:3147:				ch->pcdata->renown[5] = fread_number (fp);
sv.c:3152:			KEY ("Race", ch->race, fread_number (fp));
sv.c:3153:			KEY ("Rank", ch->pcdata->rank, fread_number (fp));
sv.c:3156:				ch->pcdata->rage[0] = fread_number (fp);
sv.c:3157:				ch->pcdata->rage[1] = fread_number (fp);
sv.c:3162:			KEY ("Regenerate", ch->pcdata->regenerate, fread_number (fp));
sv.c:3163:			KEY ("Reina", ch->pcdata->reina, fread_number (fp));
sv.c:3164:			KEY ("Repair", ch->pcdata->repair, fread_number (fp));
sv.c:3167:				ch->pcdata->research[0] = fread_number (fp);
sv.c:3168:				ch->pcdata->research[1] = fread_number (fp);
sv.c:3175:				ch->pcdata->resist[0] = fread_number (fp);
sv.c:3176:				ch->pcdata->resist[1] = fread_number (fp);
sv.c:3177:				ch->pcdata->resist[2] = fread_number (fp);
sv.c:3178:				ch->pcdata->resist[3] = fread_number (fp);
sv.c:3179:				ch->pcdata->resist[4] = fread_number (fp);
sv.c:3186:				ch->pcdata->rituals[0] = fread_number (fp);
sv.c:3187:				ch->pcdata->rituals[1] = fread_number (fp);
sv.c:3188:				ch->pcdata->rituals[2] = fread_number (fp);
sv.c:3189:				ch->pcdata->rituals[3] = fread_number (fp);
sv.c:3190:				ch->pcdata->rituals[4] = fread_number (fp);
sv.c:3191:				ch->pcdata->rituals[5] = fread_number (fp);
sv.c:3192:				ch->pcdata->rituals[6] = fread_number (fp);
sv.c:3193:				ch->pcdata->rituals[7] = fread_number (fp);
sv.c:3194:				ch->pcdata->rituals[8] = fread_number (fp);
sv.c:3195:				ch->pcdata->rituals[9] = fread_number (fp);
sv.c:3202:				ch->in_room = get_room_index (fread_number (fp));
sv.c:3203:				if (ch->in_room == NULL)
sv.c:3204:					ch->in_room = get_room_index (ROOM_VNUM_LIMBO);
sv.c:3209:			KEY ("Rpoints", ch->pcdata->rpoints, fread_number (fp));
sv.c:3213:				ch->pcdata->runes[0] = fread_number (fp);
sv.c:3214:				ch->pcdata->runes[1] = fread_number (fp);
sv.c:3215:				ch->pcdata->runes[2] = fread_number (fp);
sv.c:3216:				ch->pcdata->runes[3] = fread_number (fp);
sv.c:3223:			KEY ("SavingThrow", ch->saving_throw, fread_number (fp));
sv.c:3224:			KEY ("ShowTempDesc", ch->pcdata->showtempdesc, fread_number (fp));
sv.c:3227:				ch->pcdata->score[0] = fread_number (fp);
sv.c:3228:				ch->pcdata->score[1] = fread_number (fp);
sv.c:3229:				ch->pcdata->score[2] = fread_number (fp);
sv.c:3230:				ch->pcdata->score[3] = fread_number (fp);
sv.c:3231:				ch->pcdata->score[4] = fread_number (fp);
sv.c:3232:				ch->pcdata->score[5] = fread_number (fp);
sv.c:3237:			KEY ("Security", ch->pcdata->security, fread_number (fp));	/* OLC */
sv.c:3238:			KEY ("Sex", ch->sex, fread_number (fp));
sv.c:3239:			KEY ("ShortDescC", ch->pcdata->crinosdescshort, fread_string (fp));
sv.c:3240:			KEY ("ShortDescG", ch->pcdata->glabrodescshort, fread_string (fp));
sv.c:3241:			KEY ("ShortDescH", ch->pcdata->hispodescshort, fread_string (fp));
sv.c:3242:			KEY ("ShortDescL", ch->pcdata->lupusdescshort, fread_string (fp));
sv.c:3243:			KEY ("ShortDescr", ch->short_descr, fread_string (fp));
sv.c:3244:			KEY ("Side", ch->side, fread_string (fp));
sv.c:3245:			KEY ("Silence", ch->pcdata->silence, fread_number (fp));
sv.c:3256:					ch->pcdata->learned[sn] = value;
sv.c:3260:			KEY ("Specpower", ch->specpower, fread_number (fp));
sv.c:3261:			KEY ("Spectype", ch->spectype, fread_number (fp));
sv.c:3265:				ch->spl[0] = fread_number (fp);
sv.c:3266:				ch->spl[1] = fread_number (fp);
sv.c:3267:				ch->spl[2] = fread_number (fp);
sv.c:3268:				ch->spl[3] = fread_number (fp);
sv.c:3269:				ch->spl[4] = fread_number (fp);
sv.c:3274:			KEY ("Spirit", ch->pcdata->spirit, fread_number (fp));
sv.c:3278:				ch->pcdata->stage[0] = fread_number (fp);
sv.c:3279:				ch->pcdata->stage[1] = fread_number (fp);
sv.c:3280:				ch->pcdata->stage[2] = fread_number (fp);
sv.c:3287:				ch->stance[0] = fread_number (fp);
sv.c:3288:				ch->stance[1] = fread_number (fp);
sv.c:3289:				ch->stance[2] = fread_number (fp);
sv.c:3290:				ch->stance[3] = fread_number (fp);
sv.c:3291:				ch->stance[4] = fread_number (fp);
sv.c:3292:				ch->stance[5] = fread_number (fp);
sv.c:3293:				ch->stance[6] = fread_number (fp);
sv.c:3294:				ch->stance[7] = fread_number (fp);
sv.c:3295:				ch->stance[8] = fread_number (fp);
sv.c:3296:				ch->stance[9] = fread_number (fp);
sv.c:3297:				ch->stance[10] = fread_number (fp);
sv.c:3298:				ch->stance[11] = fread_number (fp);
sv.c:3299:				ch->stance[12] = fread_number (fp);
sv.c:3300:				ch->stance[13] = fread_number (fp);
sv.c:3301:				ch->stance[14] = fread_number (fp);
sv.c:3302:				ch->stance[15] = fread_number (fp);
sv.c:3307:			KEY ("Stancename", ch->pcdata->stancename, fread_string (fp));
sv.c:3308:			KEY ("Stancelist", ch->pcdata->stancelist, fread_string (fp));
sv.c:3309:			KEY ("Stancework", ch->pcdata->stancework, fread_string (fp));
sv.c:3313:				ch->pcdata->stancemove[0] = fread_number (fp);
sv.c:3314:				ch->pcdata->stancemove[1] = fread_number (fp);
sv.c:3315:				ch->pcdata->stancemove[2] = fread_number (fp);
sv.c:3316:				ch->pcdata->stancemove[3] = fread_number (fp);
sv.c:3317:				ch->pcdata->stancemove[4] = fread_number (fp);
sv.c:3324:				ch->pcdata->status[0] = fread_number (fp);
sv.c:3325:				ch->pcdata->status[1] = fread_number (fp);
sv.c:3326:				ch->pcdata->status[2] = fread_number (fp);
sv.c:3334:			KEY ("Teach", ch->pcdata->teach, fread_number (fp));
sv.c:3335:			KEY ("TempClass", ch->pcdata->class, fread_number (fp));
sv.c:3336:			KEY ("Temporis", ch->pcdata->temporis, fread_number (fp));
sv.c:3337:			KEY ("TempDesc", ch->pcdata->tempdesc, fread_string (fp));
sv.c:3340:				ch->pcdata->tribes[0] = fread_number (fp);
sv.c:3341:				ch->pcdata->tribes[1] = fread_number (fp);
sv.c:3342:				ch->pcdata->tribes[2] = fread_number (fp);
sv.c:3343:				ch->pcdata->tribes[3] = fread_number (fp);
sv.c:3344:				ch->pcdata->tribes[4] = fread_number (fp);
sv.c:3345:				ch->pcdata->tribes[5] = fread_number (fp);
sv.c:3346:				ch->pcdata->tribes[6] = fread_number (fp);
sv.c:3347:				ch->pcdata->tribes[7] = fread_number (fp);
sv.c:3348:				ch->pcdata->tribes[8] = fread_number (fp);
sv.c:3349:				ch->pcdata->tribes[9] = fread_number (fp);
sv.c:3350:				ch->pcdata->tribes[10] = fread_number (fp);
sv.c:3351:				ch->pcdata->tribes[11] = fread_number (fp);
sv.c:3352:				ch->pcdata->tribes[12] = fread_number (fp);
sv.c:3353:				ch->pcdata->tribes[13] = fread_number (fp);
sv.c:3354:				ch->pcdata->tribes[14] = fread_number (fp);
sv.c:3355:				ch->pcdata->tribes[15] = fread_number (fp);
sv.c:3356:				ch->pcdata->tribes[16] = fread_number (fp);
sv.c:3357:				ch->pcdata->tribes[17] = fread_number (fp);
sv.c:3358:				ch->pcdata->tribes[18] = fread_number (fp);
sv.c:3359:				ch->pcdata->tribes[19] = fread_number (fp);
sv.c:3365:				ch->pcdata->thaum[0] = fread_number (fp);
sv.c:3366:				ch->pcdata->thaum[1] = fread_number (fp);
sv.c:3367:				ch->pcdata->thaum[2] = fread_number (fp);
sv.c:3368:				ch->pcdata->thaum[3] = fread_number (fp);
sv.c:3369:				ch->pcdata->thaum[4] = fread_number (fp);
sv.c:3370:				ch->pcdata->thaum[5] = fread_number (fp);
sv.c:3371:				ch->pcdata->thaum[6] = fread_number (fp);
sv.c:3372:				ch->pcdata->thaum[7] = fread_number (fp);
sv.c:3373:				ch->pcdata->thaum[8] = fread_number (fp);
sv.c:3374:				ch->pcdata->thaum[9] = fread_number (fp);
sv.c:3375:				ch->pcdata->thaum[10] = fread_number (fp);
sv.c:3376:				ch->pcdata->thaum[11] = fread_number (fp);
sv.c:3377:				ch->pcdata->thaum[12] = fread_number (fp);
sv.c:3378:				ch->pcdata->thaum[13] = fread_number (fp);
sv.c:3379:				ch->pcdata->thaum[14] = fread_number (fp);
sv.c:3380:				ch->pcdata->thaum[15] = fread_number (fp);
sv.c:3381:				ch->pcdata->thaum[16] = fread_number (fp);
sv.c:3382:				ch->pcdata->thaum[17] = fread_number (fp);
sv.c:3383:				ch->pcdata->thaum[18] = fread_number (fp);
sv.c:3384:				ch->pcdata->thaum[19] = fread_number (fp);
sv.c:3389:			KEY ("Truebeast", ch->truebeast, fread_number (fp));
sv.c:3390:			KEY ("Trust", ch->trust, fread_number (fp));
sv.c:3394:				ch->pcdata->title = fread_string (fp);
sv.c:3395:				if (isalpha (ch->pcdata->title[0]) || isdigit (ch->pcdata->title[0]))
sv.c:3397:					sprintf (buf, "%s", ch->pcdata->title);
sv.c:3398:					free_string (ch->pcdata->title);
sv.c:3399:					ch->pcdata->title = str_dup (buf);
sv.c:3408:			KEY ("Vision", ch->pcdata->vision, fread_number (fp));
sv.c:3409:			KEY ("Vampaff", ch->vampaff, fread_number (fp));
sv.c:3410:			KEY ("Vampgen", ch->vampgen, fread_number (fp));
sv.c:3411:			KEY ("Vamppass", ch->vamppass, fread_number (fp));
sv.c:3416:					ch->pcdata->virtues[VIRTUE_CONSCIENCE] = fread_number(fp);
sv.c:3417:					ch->pcdata->virtues[VIRTUE_SELFCONTROL] = fread_number(fp);
sv.c:3418:					ch->pcdata->virtues[VIRTUE_COURAGE] = fread_number(fp);
sv.c:3419:					ch->pcdata->virtues[VIRTUE_WISDOM] = fread_number(fp);
sv.c:3420:					ch->pcdata->virtues[VIRTUE_FAITH] = fread_number(fp);
sv.c:3421:					ch->pcdata->virtues[VIRTUE_ZEAL] = fread_number(fp);
sv.c:3425:					ch->pcdata->virtues[VIRTUE_CONSCIENCE] = fread_number(fp);
sv.c:3426:					ch->pcdata->virtues[VIRTUE_SELFCONTROL] = fread_number(fp);
sv.c:3427:					ch->pcdata->virtues[VIRTUE_COURAGE] = fread_number(fp);
sv.c:3432:				ch->pIndexData = get_mob_index (fread_number (fp));
sv.c:3436:			KEY ("Votes", ch->pcdata->votes, fread_number(fp));
sv.c:3442:				ch->wpn[0] = fread_number (fp);
sv.c:3443:				ch->wpn[1] = fread_number (fp);
sv.c:3444:				ch->wpn[2] = fread_number (fp);
sv.c:3445:				ch->wpn[3] = fread_number (fp);
sv.c:3446:				ch->wpn[4] = fread_number (fp);
sv.c:3447:				ch->wpn[5] = fread_number (fp);
sv.c:3448:				ch->wpn[6] = fread_number (fp);
sv.c:3449:				ch->wpn[7] = fread_number (fp);
sv.c:3450:				ch->wpn[8] = fread_number (fp);
sv.c:3451:				ch->wpn[9] = fread_number (fp);
sv.c:3452:				ch->wpn[10] = fread_number (fp);
sv.c:3453:				ch->wpn[11] = fread_number (fp);
sv.c:3454:				ch->wpn[12] = fread_number (fp);
sv.c:3460:				ch->pcdata->willpower[0] = fread_number (fp);
sv.c:3461:				ch->pcdata->willpower[1] = fread_number (fp);
sv.c:3465:			KEY ("Wimpy", ch->wimpy, fread_number (fp));
sv.c:3466:			KEY ("Wolf", ch->pcdata->wolf, fread_number (fp));
sv.c:3469:				ch->pcdata->wolfform[0] = fread_number (fp);
sv.c:3470:				ch->pcdata->wolfform[1] = fread_number (fp);
sv.c:3474:			KEY ("Wpoints", ch->pcdata->wpoints, fread_number (fp));
sv.c:3475:			KEY ("WpRegain", ch->pcdata->wp_regain_counter, fread_number (fp));
sv.c:3511:				ch->pcdata->absorb[0] = fread_number (fp);
sv.c:3512:				ch->pcdata->absorb[1] = fread_number (fp);
sv.c:3513:				ch->pcdata->absorb[2] = fread_number (fp);
sv.c:3514:				ch->pcdata->absorb[3] = fread_number (fp);
sv.c:3515:				ch->pcdata->absorb[4] = fread_number (fp);
sv.c:3516:				ch->pcdata->absorb[5] = fread_number (fp);
sv.c:3520:			KEY ("ACT", ch->act, fread_number (fp));
sv.c:3521:			KEY ("ADM", ch->pcdata->aggdamage, fread_number (fp));
sv.c:3522:			KEY ("AFB", ch->affected_by, fread_number (fp));
sv.c:3523:			KEY ("ALN", ch->alignment, fread_number (fp));
sv.c:3524:			KEY ("ARM", ch->armor, fread_number (fp));
sv.c:3526:			KEY ("AUR", ch->pcdata->aura, fread_string (fp)); 
sv.c:3527:			KEY ("AUT", ch->autostance, fread_number (fp));
sv.c:3553:				paf->next = ch->affected;
sv.c:3554:				ch->affected = paf;
sv.c:3558:			KEY ("AGG", ch->agg, fread_number (fp));
sv.c:3561:				ch->pcdata->auspice[0] = fread_number (fp);
sv.c:3562:				ch->pcdata->auspice[1] = fread_number (fp);
sv.c:3563:				ch->pcdata->auspice[2] = fread_number (fp);
sv.c:3564:				ch->pcdata->auspice[3] = fread_number (fp);
sv.c:3565:				ch->pcdata->auspice[4] = fread_number (fp);
sv.c:3569:			KEY ("AVC", ch->pcdata->auto_vote_counter, fread_number (fp));
sv.c:3570:			KEY ("ATM", ch->pcdata->atm, fread_number (fp));
sv.c:3573:				ch->pcdata->mod_str = fread_number (fp);
sv.c:3574:				ch->pcdata->mod_int = fread_number (fp);
sv.c:3575:				ch->pcdata->mod_wis = fread_number (fp);
sv.c:3576:				ch->pcdata->mod_dex = fread_number (fp);
sv.c:3577:				ch->pcdata->mod_con = fread_number (fp);
sv.c:3583:				ch->attributes[0] = fread_number (fp);
sv.c:3584:				ch->attributes[1] = fread_number (fp);
sv.c:3585:				ch->attributes[2] = fread_number (fp);
sv.c:3586:				ch->attributes[3] = fread_number (fp);
sv.c:3587:				ch->attributes[4] = fread_number (fp);
sv.c:3588:				ch->attributes[5] = fread_number (fp);
sv.c:3589:				ch->attributes[6] = fread_number (fp);
sv.c:3590:				ch->attributes[7] = fread_number (fp);
sv.c:3591:				ch->attributes[8] = fread_number (fp);
sv.c:3597:				ch->pcdata->perm_str = fread_number (fp);
sv.c:3598:				ch->pcdata->perm_int = fread_number (fp);
sv.c:3599:				ch->pcdata->perm_wis = fread_number (fp);
sv.c:3600:				ch->pcdata->perm_dex = fread_number (fp);
sv.c:3601:				ch->pcdata->perm_con = fread_number (fp);
sv.c:3608:			KEY ("BBC", ch->pcdata->blood_burn_counter, fread_number (fp));
sv.c:3609:			KEY ("BDM", ch->pcdata->bashingdamage, fread_number (fp));
sv.c:3610:			KEY ("BFI", ch->pcdata->bamfin, fread_string (fp));
sv.c:3611:			KEY ("BFO", ch->pcdata->bamfout, fread_string (fp));
sv.c:3612:			KEY ("BST", ch->beast, fread_number (fp));
sv.c:3615:				ch->blood[0] = fread_number (fp);
sv.c:3616:				ch->blood[1] = fread_number (fp);
sv.c:3620:			KEY ("BDY", ch->body, fread_number (fp));
sv.c:3621:			KEY ("BDM", ch->pcdata->bodymods, fread_number (fp));
sv.c:3622:			KEY ("BPT", ch->pcdata->bpoints, fread_number (fp));
sv.c:3625:				ch->pcdata->breed[0] = fread_number (fp);
sv.c:3626:				ch->pcdata->breed[1] = fread_number (fp);
sv.c:3627:				ch->pcdata->breed[2] = fread_number (fp);
sv.c:3637:					ch->pcdata->last_note[i] = fread_number (fp);
sv.c:3644:			KEY ("CDD", ch->pcdata->crinosdesc, fread_string (fp));
sv.c:3645:			KEY ("C_L", ch->pcdata->leader, fread_string (fp));
sv.c:3646:			KEY ("CEL", ch->pcdata->celerity, fread_number (fp));
sv.c:3647:			KEY ("CLN", ch->clan, fread_string (fp));
sv.c:3650:				ch->pcdata->cland[0] = fread_number (fp);
sv.c:3651:				ch->pcdata->cland[1] = fread_number (fp);
sv.c:3652:				ch->pcdata->cland[2] = fread_number (fp);
sv.c:3656:			KEY ("CLS", ch->class, fread_number (fp));
sv.c:3657:			KEY ("CPT", ch->pcdata->conception, fread_string (fp));
sv.c:3658:			KEY ("CND", ch->pcdata->conding, fread_string (fp));
sv.c:3662:					ch->pcdata->conviction[CONVICTION_CURRENT] = fread_number (fp);
sv.c:3663:					ch->pcdata->conviction[CONVICTION_MAX] = fread_number (fp);
sv.c:3669:				ch->pcdata->condition[0] = fread_number (fp);
sv.c:3670:				ch->pcdata->condition[1] = fread_number (fp);
sv.c:3671:				ch->pcdata->condition[2] = fread_number (fp);
sv.c:3675:			KEY ("CJR", ch->pcdata->conjure, fread_number (fp));
sv.c:3678:				ch->pcdata->cot_min[0] = fread_number (fp);
sv.c:3679:				ch->pcdata->cot_min[1] = fread_number (fp);
sv.c:3680:				ch->pcdata->cot_min[2] = fread_number (fp);
sv.c:3681:				ch->pcdata->cot_min[3] = fread_number (fp);
sv.c:3682:				ch->pcdata->cot_min[4] = fread_number (fp);
sv.c:3683:				ch->pcdata->cot_min[5] = fread_number (fp);
sv.c:3684:				ch->pcdata->cot_min[6] = fread_number (fp);
sv.c:3685:				ch->pcdata->cot_min[7] = fread_number (fp);
sv.c:3686:				ch->pcdata->cot_min[8] = fread_number (fp);
sv.c:3687:				ch->pcdata->cot_min[9] = fread_number (fp);
sv.c:3688:				ch->pcdata->cot_min[10] = fread_number (fp);
sv.c:3689:				ch->pcdata->cot_min[11] = fread_number (fp);
sv.c:3693:			KEY ("COT", ch->pcdata->coterie, fread_string (fp));
sv.c:3694:			KEY ("C_T", ch->pcdata->cot_time, fread_string (fp));
sv.c:3695:			KEY ("C_C", ch->pcdata->cot_clans, fread_string (fp));
sv.c:3696:			KEY ("C_S", ch->pcdata->cot_sides, fread_string (fp));
sv.c:3697:			KEY ("CPR", ch->pcdata->cparents, fread_string (fp));
sv.c:3698:			KEY ("CPM", ch->cprompt, fread_string (fp));
sv.c:3699:			KEY ("CTM", ch->createtime, fread_string (fp));
sv.c:3701:				KEY ("CVB", ch->pcdata->conviction_bank, fread_number (fp));
sv.c:3705:			KEY ("D_M", ch->pcdata->dementation, fread_number (fp));
sv.c:3706:			KEY ("DVL", ch->pcdata->devil, fread_number (fp));
sv.c:3707:			KEY ("DAM", ch->damroll, fread_number (fp));
sv.c:3708:			KEY ("DRK", ch->pcdata->darkness, fread_number (fp));
sv.c:3709:			KEY ("DEF", ch->deaf, fread_number (fp));
sv.c:3710:			KEY ("DEM", ch->pcdata->demonic, fread_number (fp));
sv.c:3711:			KEY ("DMP", ch->pcdata->daemon_powers, fread_number (fp));
sv.c:3712:			KEY ("DNG", ch->pcdata->doing, fread_string (fp));
sv.c:3713:			KEY ("DNR", ch->demeanor, fread_string (fp));
sv.c:3714:			KEY ("DNY", ch->pcdata->denydate, fread_number (fp));
sv.c:3715:			KEY ("DDS", ch->description, fread_string (fp));
sv.c:3718:				ch->pcdata->diableries[0] = fread_number (fp);
sv.c:3719:				ch->pcdata->diableries[1] = fread_number (fp);
sv.c:3725:				ch->pcdata->disc[0] = fread_number (fp);
sv.c:3726:				ch->pcdata->disc[1] = fread_number (fp);
sv.c:3727:				ch->pcdata->disc[2] = fread_number (fp);
sv.c:3728:				ch->pcdata->disc[3] = fread_number (fp);
sv.c:3729:				ch->pcdata->disc[4] = fread_number (fp);
sv.c:3730:				ch->pcdata->disc[5] = fread_number (fp);
sv.c:3731:				ch->pcdata->disc[6] = fread_number (fp);
sv.c:3732:				ch->pcdata->disc[7] = fread_number (fp);
sv.c:3733:				ch->pcdata->disc[8] = fread_number (fp);
sv.c:3734:				ch->pcdata->disc[9] = fread_number (fp);
sv.c:3735:				ch->pcdata->disc[10] = fread_number (fp);
sv.c:3739:			KEY ("DPT", ch->pcdata->dpoints, fread_number (fp));
sv.c:3743:			KEY ("EML", ch->pcdata->email, fread_string (fp));
sv.c:3768:			extra->prev = ch->pcdata->extra;
sv.c:3769:			if (ch->pcdata->extra)
sv.c:3770:			ch->pcdata->extra->next = extra;
sv.c:3773:			ch->pcdata->extra = extra;
sv.c:3774:			ch->pcdata->extra->extra = str_dup(buf);
sv.c:3777:			ch->pcdata->extra->catagory = str_dup(arg);
sv.c:3780:			ch->pcdata->extra->field = str_dup(arg);
sv.c:3783:			ch->pcdata->extra->rating = atoi(arg);
sv.c:3788:			KEY ("EVE", ch->pcdata->evileye, fread_number (fp));
sv.c:3789:			KEY ("EXP", ch->exp, fread_number (fp));
sv.c:3790:			KEY ("EXT", ch->extra, fread_number (fp));
sv.c:3791:			KEY ("EX2", ch->extra2, fread_number (fp));
sv.c:3795:			KEY ("FAI", ch->pcdata->faith, fread_number (fp));
sv.c:3798:				ch->pcdata->fake_skill = fread_number (fp);
sv.c:3799:				ch->pcdata->fake_stance = fread_number (fp);
sv.c:3800:				ch->pcdata->fake_hit = fread_number (fp);
sv.c:3801:				ch->pcdata->fake_dam = fread_number (fp);
sv.c:3802:				ch->pcdata->fake_ac = fread_number (fp);
sv.c:3803:				ch->pcdata->fake_hp = fread_number (fp);
sv.c:3804:				ch->pcdata->fake_mana = fread_number (fp);
sv.c:3805:				ch->pcdata->fake_move = fread_number (fp);
sv.c:3811:				ch->pcdata->fake_max_hp = fread_number (fp);
sv.c:3812:				ch->pcdata->fake_max_mana = fread_number (fp);
sv.c:3813:				ch->pcdata->fake_max_move = fread_number (fp);
sv.c:3814:				ch->pcdata->fake_stats[STAT_STR] = fread_number (fp);
sv.c:3815:				ch->pcdata->fake_stats[STAT_INT] = fread_number (fp);
sv.c:3816:				ch->pcdata->fake_stats[STAT_WIS] = fread_number (fp);
sv.c:3817:				ch->pcdata->fake_stats[STAT_DEX] = fread_number (fp);
sv.c:3818:				ch->pcdata->fake_stats[STAT_CON] = fread_number (fp);
sv.c:3822:			KEY ("FRM", ch->form, fread_number (fp));
sv.c:3826:			KEY ("GFL", ch->pcdata->giftlist, fread_string (fp));
sv.c:3827:			KEY ("GDD", ch->pcdata->glabrodesc, fread_string (fp));
sv.c:3828:			KEY ("GEN", ch->vampgen, fread_number (fp));
sv.c:3831:				ch->pcdata->genes[0] = fread_number (fp);
sv.c:3832:				ch->pcdata->genes[1] = fread_number (fp);
sv.c:3833:				ch->pcdata->genes[2] = fread_number (fp);
sv.c:3834:				ch->pcdata->genes[3] = fread_number (fp);
sv.c:3835:				ch->pcdata->genes[4] = fread_number (fp);
sv.c:3836:				ch->pcdata->genes[5] = fread_number (fp);
sv.c:3837:				ch->pcdata->genes[6] = fread_number (fp);
sv.c:3838:				ch->pcdata->genes[7] = fread_number (fp);
sv.c:3839:				ch->pcdata->genes[8] = fread_number (fp);
sv.c:3840:				ch->pcdata->genes[9] = fread_number (fp);
sv.c:3846:				ch->pcdata->gnosis[0] = fread_number (fp);
sv.c:3847:				ch->pcdata->gnosis[1] = fread_number (fp);
sv.c:3851:			KEY ("GLD", ch->gold, fread_number (fp));
sv.c:3852:			KEY ("GPT", ch->pcdata->gpoints, fread_number (fp));
sv.c:3856:			KEY ("HDD", ch->pcdata->hispodesc, fread_string (fp));
sv.c:3857:			KEY ("HIT", ch->hitroll, fread_number (fp));
sv.c:3858:			KEY ("HOM", ch->home, fread_number (fp));
sv.c:3861:				ch->hit = fread_number (fp);
sv.c:3862:				ch->max_hit = fread_number (fp);
sv.c:3863:				ch->mana = fread_number (fp);
sv.c:3864:				ch->max_mana = fread_number (fp);
sv.c:3865:				ch->move = fread_number (fp);
sv.c:3866:				ch->max_move = fread_number (fp);
sv.c:3872:				ch->home_x = fread_number (fp);
sv.c:3873:				ch->home_y = fread_number (fp);
sv.c:3880:			KEY ("IFR", ch->pcdata->infernal_ranking, fread_number (fp));
sv.c:3881:			KEY ("IMS", ch->impulse, fread_string (fp));
sv.c:3882:			KEY ("IMU", ch->immune, fread_number (fp));
sv.c:3883:			KEY ("IAF", ch->itemaffect, fread_number (fp));
sv.c:3889:				ch->pkill = fread_number (fp);
sv.c:3890:				ch->pdeath = fread_number (fp);
sv.c:3891:				ch->mkill = fread_number (fp);
sv.c:3892:				ch->mdeath = fread_number (fp);
sv.c:3899:					ch->abilities[KNOWLEDGES][i] = fread_number (fp);
sv.c:3906:					ch->pcdata->abilities_points[KNOWLEDGES][i] = fread_number (fp);
sv.c:3913:			KEY ("LDD", ch->pcdata->lupusdesc, fread_string (fp));
sv.c:3914:			KEY ("LDM", ch->pcdata->lethaldamage, fread_number (fp));
sv.c:3917:				ch->pcdata->language[0] = fread_number (fp);
sv.c:3918:				ch->pcdata->language[1] = fread_number (fp);
sv.c:3922:			KEY ("LHS", ch->lasthost, fread_string (fp));
sv.c:3923:			KEY ("LTM", ch->lasttime, fread_string (fp));
sv.c:3924:			KEY ("LVL", ch->level, fread_number (fp));
sv.c:3927:			  ch->pcdata->last_vote_time.year = fread_number( fp );
sv.c:3928:			  ch->pcdata->last_vote_time.month = fread_number( fp );
sv.c:3929:  			  ch->pcdata->last_vote_time.day = fread_number( fp );
sv.c:3935:				ch->loc_hp[0] = fread_number (fp);
sv.c:3936:				ch->loc_hp[1] = fread_number (fp);
sv.c:3937:				ch->loc_hp[2] = fread_number (fp);
sv.c:3938:				ch->loc_hp[3] = fread_number (fp);
sv.c:3939:				ch->loc_hp[4] = fread_number (fp);
sv.c:3940:				ch->loc_hp[5] = fread_number (fp);
sv.c:3941:				ch->loc_hp[6] = fread_number (fp);
sv.c:3945:			KEY ("LDS", ch->long_descr, fread_string (fp));
sv.c:3946:			KEY ("LRD", ch->lord, fread_string (fp));
sv.c:3947:			KEY ("LOV", ch->pcdata->love, fread_string (fp));
sv.c:3951:			KEY ("MAJ", ch->pcdata->majesty, fread_number (fp));
sv.c:3952:			KEY ("MRG", ch->pcdata->marriage, fread_string (fp));
sv.c:3953:			KEY ("MOR3", ch->more3, fread_number (fp));
sv.c:3954:			KEY ("MOR2", ch->more2, fread_number (fp));
sv.c:3955:			KEY ("MOR", ch->more, fread_number (fp));
sv.c:3956:			KEY ("MRF", ch->morph, fread_string (fp));
sv.c:3957:			KEY ("MMN", ch->mem_name, fread_string (fp));
sv.c:3958:			KEY ("MMD", ch->mem_desc, fread_string (fp));
sv.c:3971:			KEY ("NEC", ch->pcdata->necromancy, fread_number (fp));
sv.c:3972:			KEY ("NTR", ch->nature, fread_string (fp));
sv.c:3976:			KEY ("OBE", ch->pcdata->obeah, fread_number (fp));
sv.c:3977:			KEY ("OBV", ch->pcdata->obj_vnum, fread_number (fp));
sv.c:3978:			KEY ("ORD", ch->order, fread_string (fp));
sv.c:3986:			ch->pcdata->pthaum[i] = fread_number(fp);
sv.c:3992:				ch->paradox[0] = fread_number (fp);
sv.c:3993:				ch->paradox[1] = fread_number (fp);
sv.c:3994:				ch->paradox[2] = fread_number (fp);
sv.c:3998:			KEY ("PLN", ch->plane, fread_number (fp));
sv.c:3999:			KEY ("PAR", ch->pcdata->parents, fread_string (fp));
sv.c:4000:			KEY ("PSW", ch->pcdata->pwd, fread_string (fp));
sv.c:4001:			KEY ("PLY", ch->played, fread_number (fp));
sv.c:4002:			KEY ("PAF", ch->polyaff, fread_number (fp));
sv.c:4005:				ch->pcdata->power[0] = fread_number (fp);
sv.c:4006:				ch->pcdata->power[1] = fread_number (fp);
sv.c:4012:				ch->pcdata->powers[0] = fread_number (fp);
sv.c:4013:				ch->pcdata->powers[1] = fread_number (fp);
sv.c:4014:				ch->pcdata->powers[2] = fread_number (fp);
sv.c:4015:				ch->pcdata->powers[3] = fread_number (fp);
sv.c:4016:				ch->pcdata->powers[4] = fread_number (fp);
sv.c:4017:				ch->pcdata->powers[5] = fread_number (fp);
sv.c:4018:				ch->pcdata->powers[6] = fread_number (fp);
sv.c:4019:				ch->pcdata->powers[7] = fread_number (fp);
sv.c:4020:				ch->pcdata->powers[8] = fread_number (fp);
sv.c:4021:				ch->pcdata->powers[9] = fread_number (fp);
sv.c:4022:				ch->pcdata->powers[10] = fread_number (fp);
sv.c:4023:				ch->pcdata->powers[11] = fread_number (fp);
sv.c:4024:				ch->pcdata->powers[12] = fread_number (fp);
sv.c:4025:				ch->pcdata->powers[13] = fread_number (fp);
sv.c:4026:				ch->pcdata->powers[14] = fread_number (fp);
sv.c:4027:				ch->pcdata->powers[15] = fread_number (fp);
sv.c:4028:				ch->pcdata->powers[16] = fread_number (fp);
sv.c:4029:				ch->pcdata->powers[17] = fread_number (fp);
sv.c:4030:				ch->pcdata->powers[18] = fread_number (fp);
sv.c:4031:				ch->pcdata->powers[19] = fread_number (fp);
sv.c:4032:				ch->pcdata->powers[20] = fread_number (fp);
sv.c:4033:				ch->pcdata->powers[21] = fread_number (fp);
sv.c:4034:				ch->pcdata->powers[22] = fread_number (fp);
sv.c:4035:				ch->pcdata->powers[23] = fread_number (fp);
sv.c:4036:				ch->pcdata->powers[24] = fread_number (fp);
sv.c:4037:				ch->pcdata->powers[25] = fread_number (fp);
sv.c:4038:				ch->pcdata->powers[26] = fread_number (fp);
sv.c:4039:				ch->pcdata->powers[27] = fread_number (fp);
sv.c:4040:				ch->pcdata->powers[28] = fread_number (fp);
sv.c:4041:				ch->pcdata->powers[29] = fread_number (fp);
sv.c:4042:				ch->pcdata->powers[30] = fread_number (fp);
sv.c:4043:				ch->pcdata->powers[31] = fread_number (fp);
sv.c:4044:				ch->pcdata->powers[32] = fread_number (fp);
sv.c:4045:				ch->pcdata->powers[33] = fread_number (fp);
sv.c:4046:				ch->pcdata->powers[34] = fread_number (fp);
sv.c:4047:				ch->pcdata->powers[35] = fread_number (fp);
sv.c:4048:				ch->pcdata->powers[36] = fread_number (fp);
sv.c:4049:				ch->pcdata->powers[37] = fread_number (fp);
sv.c:4050:				ch->pcdata->powers[38] = fread_number (fp);
sv.c:4051:				ch->pcdata->powers[39] = fread_number (fp);
sv.c:4057:				ch->pcdata->powers_mod[0] = fread_number (fp);
sv.c:4058:				ch->pcdata->powers_mod[1] = fread_number (fp);
sv.c:4059:				ch->pcdata->powers_mod[2] = fread_number (fp);
sv.c:4060:				ch->pcdata->powers_mod[3] = fread_number (fp);
sv.c:4061:				ch->pcdata->powers_mod[4] = fread_number (fp);
sv.c:4062:				ch->pcdata->powers_mod[5] = fread_number (fp);
sv.c:4063:				ch->pcdata->powers_mod[6] = fread_number (fp);
sv.c:4064:				ch->pcdata->powers_mod[7] = fread_number (fp);
sv.c:4065:				ch->pcdata->powers_mod[8] = fread_number (fp);
sv.c:4066:				ch->pcdata->powers_mod[9] = fread_number (fp);
sv.c:4067:				ch->pcdata->powers_mod[10] = fread_number (fp);
sv.c:4068:				ch->pcdata->powers_mod[11] = fread_number (fp);
sv.c:4069:				ch->pcdata->powers_mod[12] = fread_number (fp);
sv.c:4070:				ch->pcdata->powers_mod[13] = fread_number (fp);
sv.c:4071:				ch->pcdata->powers_mod[14] = fread_number (fp);
sv.c:4072:				ch->pcdata->powers_mod[15] = fread_number (fp);
sv.c:4073:				ch->pcdata->powers_mod[16] = fread_number (fp);
sv.c:4074:				ch->pcdata->powers_mod[17] = fread_number (fp);
sv.c:4075:				ch->pcdata->powers_mod[18] = fread_number (fp);
sv.c:4076:				ch->pcdata->powers_mod[19] = fread_number (fp);
sv.c:4082:				ch->pcdata->powers_set[0] = fread_number (fp);
sv.c:4083:				ch->pcdata->powers_set[1] = fread_number (fp);
sv.c:4084:				ch->pcdata->powers_set[2] = fread_number (fp);
sv.c:4085:				ch->pcdata->powers_set[3] = fread_number (fp);
sv.c:4086:				ch->pcdata->powers_set[4] = fread_number (fp);
sv.c:4087:				ch->pcdata->powers_set[5] = fread_number (fp);
sv.c:4088:				ch->pcdata->powers_set[6] = fread_number (fp);
sv.c:4089:				ch->pcdata->powers_set[7] = fread_number (fp);
sv.c:4090:				ch->pcdata->powers_set[8] = fread_number (fp);
sv.c:4091:				ch->pcdata->powers_set[9] = fread_number (fp);
sv.c:4092:				ch->pcdata->powers_set[10] = fread_number (fp);
sv.c:4093:				ch->pcdata->powers_set[11] = fread_number (fp);
sv.c:4094:				ch->pcdata->powers_set[12] = fread_number (fp);
sv.c:4095:				ch->pcdata->powers_set[13] = fread_number (fp);
sv.c:4096:				ch->pcdata->powers_set[14] = fread_number (fp);
sv.c:4097:				ch->pcdata->powers_set[15] = fread_number (fp);
sv.c:4098:				ch->pcdata->powers_set[16] = fread_number (fp);
sv.c:4099:				ch->pcdata->powers_set[17] = fread_number (fp);
sv.c:4100:				ch->pcdata->powers_set[18] = fread_number (fp);
sv.c:4101:				ch->pcdata->powers_set[19] = fread_number (fp);
sv.c:4105:			KEY ("PWW", ch->pcdata->powers_set_wear, fread_number (fp));
sv.c:4106:			KEY ("POA", ch->poweraction, fread_string (fp));
sv.c:4107:			KEY ("POT", ch->powertype, fread_string (fp));
sv.c:4108:			KEY ("POS", ch->position, fread_number (fp));
sv.c:4109:			KEY ("PRM", ch->prompt, fread_string (fp));
sv.c:4115:				ch->quintessence = fread_number (fp);
sv.c:4116:				ch->max_quintessence = fread_number (fp);
sv.c:4122:				ch->pcdata->qstats[0] = fread_number (fp);
sv.c:4123:				ch->pcdata->qstats[1] = fread_number (fp);
sv.c:4124:				ch->pcdata->qstats[2] = fread_number (fp);
sv.c:4125:				ch->pcdata->qstats[3] = fread_number (fp);
sv.c:4126:				ch->pcdata->qstats[4] = fread_number (fp);
sv.c:4130:			KEY ("QST", ch->pcdata->quest, fread_number (fp));
sv.c:4136:				ch->pcdata->renown[0] = fread_number (fp);
sv.c:4137:				ch->pcdata->renown[1] = fread_number (fp);
sv.c:4138:				ch->pcdata->renown[2] = fread_number (fp);
sv.c:4139:				ch->pcdata->renown[3] = fread_number (fp);
sv.c:4140:				ch->pcdata->renown[4] = fread_number (fp);
sv.c:4141:				ch->pcdata->renown[5] = fread_number (fp);
sv.c:4146:			KEY ("RAC", ch->race, fread_number (fp));
sv.c:4147:			KEY ("RDS", ch->pcdata->roomdesc, fread_string (fp));
sv.c:4148:			KEY ("RNK", ch->pcdata->rank, fread_number (fp));
sv.c:4151:				ch->pcdata->rage[0] = fread_number (fp);
sv.c:4152:				ch->pcdata->rage[1] = fread_number (fp);
sv.c:4156:			KEY ("RGN", ch->pcdata->regenerate, fread_number (fp));
sv.c:4157:			KEY ("RNA", ch->pcdata->reina, fread_number (fp));
sv.c:4160:				ch->pcdata->resist[0] = fread_number (fp);
sv.c:4161:				ch->pcdata->resist[1] = fread_number (fp);
sv.c:4162:				ch->pcdata->resist[2] = fread_number (fp);
sv.c:4163:				ch->pcdata->resist[3] = fread_number (fp);
sv.c:4164:				ch->pcdata->resist[4] = fread_number (fp);
sv.c:4170:				ch->in_room = get_room_index (fread_number (fp));
sv.c:4171:				if (ch->in_room == NULL)
sv.c:4172:					ch->in_room = get_room_index (ROOM_VNUM_LIMBO);
sv.c:4176:			KEY ("ROD", ch->pcdata->road, fread_number (fp));
sv.c:4177:			KEY ("RDT", ch->pcdata->roadt, fread_number (fp));
sv.c:4178:			KEY ("RPT", ch->pcdata->rpoints, fread_number (fp));
sv.c:4181:				ch->pcdata->runes[0] = fread_number (fp);
sv.c:4182:				ch->pcdata->runes[1] = fread_number (fp);
sv.c:4183:				ch->pcdata->runes[2] = fread_number (fp);
sv.c:4184:				ch->pcdata->runes[3] = fread_number (fp);
sv.c:4191:			KEY ("SAV", ch->saving_throw, fread_number (fp));
sv.c:4194:				ch->pcdata->score[0] = fread_number (fp);
sv.c:4195:				ch->pcdata->score[1] = fread_number (fp);
sv.c:4196:				ch->pcdata->score[2] = fread_number (fp);
sv.c:4197:				ch->pcdata->score[3] = fread_number (fp);
sv.c:4198:				ch->pcdata->score[4] = fread_number (fp);
sv.c:4199:				ch->pcdata->score[5] = fread_number (fp);
sv.c:4203:			KEY ("SCR", ch->pcdata->security, fread_number (fp));	/* OLC */
sv.c:4204:			KEY ("SEX", ch->sex, fread_number (fp));
sv.c:4205:			KEY ("SDC", ch->pcdata->crinosdescshort, fread_string (fp));
sv.c:4206:			KEY ("SDG", ch->pcdata->glabrodescshort, fread_string (fp));
sv.c:4207:			KEY ("SDH", ch->pcdata->hispodescshort, fread_string (fp));
sv.c:4208:			KEY ("SDL", ch->pcdata->lupusdescshort, fread_string (fp));
sv.c:4209:			KEY ("SDS", ch->short_descr, fread_string (fp));
sv.c:4210:			KEY ("SID", ch->side, fread_string (fp));
sv.c:4211:			KEY ("SIL", ch->pcdata->silence, fread_number (fp));
sv.c:4215:					ch->abilities[SKILLS][i] = fread_number (fp);
sv.c:4222:					ch->pcdata->abilities_points[SKILLS][i] = fread_number (fp);
sv.c:4235:					ch->pcdata->learned[sn] = value;
sv.c:4238:			KEY ("SLK", ch->pcdata->soul_keeper, fread_string (fp));
sv.c:4239:			KEY ("SOL", ch->pcdata->soul, fread_number (fp));
sv.c:4240:			KEY ("SPP", ch->specpower, fread_number (fp));
sv.c:4241:			KEY ("SPT", ch->spectype, fread_number (fp));
sv.c:4244:				ch->spl[0] = fread_number (fp);
sv.c:4245:				ch->spl[1] = fread_number (fp);
sv.c:4246:				ch->spl[2] = fread_number (fp);
sv.c:4247:				ch->spl[3] = fread_number (fp);
sv.c:4248:				ch->spl[4] = fread_number (fp);
sv.c:4252:			KEY ("SPR", ch->pcdata->spirit, fread_number (fp));
sv.c:4253:			KEY ("SSD", ch->pcdata->show_social, fread_number(fp));
sv.c:4256:				ch->pcdata->stage[0] = fread_number (fp);
sv.c:4257:				ch->pcdata->stage[1] = fread_number (fp);
sv.c:4258:				ch->pcdata->stage[2] = fread_number (fp);
sv.c:4264:				ch->stance[0] = fread_number (fp);
sv.c:4265:				ch->stance[1] = fread_number (fp);
sv.c:4266:				ch->stance[2] = fread_number (fp);
sv.c:4267:				ch->stance[3] = fread_number (fp);
sv.c:4268:				ch->stance[4] = fread_number (fp);
sv.c:4269:				ch->stance[5] = fread_number (fp);
sv.c:4270:				ch->stance[6] = fread_number (fp);
sv.c:4271:				ch->stance[7] = fread_number (fp);
sv.c:4272:				ch->stance[8] = fread_number (fp);
sv.c:4273:				ch->stance[9] = fread_number (fp);
sv.c:4274:				ch->stance[10] = fread_number (fp);
sv.c:4275:				ch->stance[11] = fread_number (fp);
sv.c:4276:				ch->stance[12] = fread_number (fp);
sv.c:4277:				ch->stance[13] = fread_number (fp);
sv.c:4278:				ch->stance[14] = fread_number (fp);
sv.c:4279:				ch->stance[15] = fread_number (fp);
sv.c:4283:			KEY ("S_N", ch->pcdata->stancename, fread_string (fp));
sv.c:4284:			KEY ("S_L", ch->pcdata->stancelist, fread_string (fp));
sv.c:4285:			KEY ("S_W", ch->pcdata->stancework, fread_string (fp));
sv.c:4288:				ch->pcdata->stancemove[0] = fread_number (fp);
sv.c:4289:				ch->pcdata->stancemove[1] = fread_number (fp);
sv.c:4290:				ch->pcdata->stancemove[2] = fread_number (fp);
sv.c:4291:				ch->pcdata->stancemove[3] = fread_number (fp);
sv.c:4292:				ch->pcdata->stancemove[4] = fread_number (fp);
sv.c:4298:				ch->pcdata->status[0] = fread_number (fp);
sv.c:4299:				ch->pcdata->status[1] = fread_number (fp);
sv.c:4300:				ch->pcdata->status[2] = fread_number (fp);
sv.c:4310:				ch->pcdata->thaum_type = fread_number (fp);
sv.c:4311:				ch->pcdata->thaum_prime = fread_number (fp);
sv.c:4312:				ch->pcdata->research_power = fread_number (fp);
sv.c:4313:				ch->pcdata->research_time = fread_number (fp);
sv.c:4314:				ch->pcdata->research_type = fread_number (fp);
sv.c:4322:					ch->abilities[TALENTS][i] = fread_number (fp);
sv.c:4330:					ch->pcdata->abilities_points[TALENTS][i] = fread_number (fp);
sv.c:4334:			KEY ("TPR", ch->pcdata->temporis, fread_number (fp));
sv.c:4337:				ch->pcdata->tribes[0] = fread_number (fp);
sv.c:4338:				ch->pcdata->tribes[1] = fread_number (fp);
sv.c:4339:				ch->pcdata->tribes[2] = fread_number (fp);
sv.c:4340:				ch->pcdata->tribes[3] = fread_number (fp);
sv.c:4341:				ch->pcdata->tribes[4] = fread_number (fp);
sv.c:4342:				ch->pcdata->tribes[5] = fread_number (fp);
sv.c:4343:				ch->pcdata->tribes[6] = fread_number (fp);
sv.c:4344:				ch->pcdata->tribes[7] = fread_number (fp);
sv.c:4345:				ch->pcdata->tribes[8] = fread_number (fp);
sv.c:4346:				ch->pcdata->tribes[9] = fread_number (fp);
sv.c:4347:				ch->pcdata->tribes[10] = fread_number (fp);
sv.c:4348:				ch->pcdata->tribes[11] = fread_number (fp);
sv.c:4349:				ch->pcdata->tribes[12] = fread_number (fp);
sv.c:4350:				ch->pcdata->tribes[13] = fread_number (fp);
sv.c:4351:				ch->pcdata->tribes[14] = fread_number (fp);
sv.c:4352:				ch->pcdata->tribes[15] = fread_number (fp);
sv.c:4353:				ch->pcdata->tribes[16] = fread_number (fp);
sv.c:4354:				ch->pcdata->tribes[17] = fread_number (fp);
sv.c:4355:				ch->pcdata->tribes[18] = fread_number (fp);
sv.c:4356:				ch->pcdata->tribes[19] = fread_number (fp);
sv.c:4362:				ch->pcdata->thaum[0] = fread_number (fp);
sv.c:4363:				ch->pcdata->thaum[1] = fread_number (fp);
sv.c:4364:				ch->pcdata->thaum[2] = fread_number (fp);
sv.c:4365:				ch->pcdata->thaum[3] = fread_number (fp);
sv.c:4366:				ch->pcdata->thaum[4] = fread_number (fp);
sv.c:4367:				ch->pcdata->thaum[5] = fread_number (fp);
sv.c:4368:				ch->pcdata->thaum[6] = fread_number (fp);
sv.c:4369:				ch->pcdata->thaum[7] = fread_number (fp);
sv.c:4370:				ch->pcdata->thaum[8] = fread_number (fp);
sv.c:4371:				ch->pcdata->thaum[9] = fread_number (fp);
sv.c:4372:				ch->pcdata->thaum[10] = fread_number (fp);
sv.c:4373:				ch->pcdata->thaum[11] = fread_number (fp);
sv.c:4374:				ch->pcdata->thaum[12] = fread_number (fp);
sv.c:4375:				ch->pcdata->thaum[13] = fread_number (fp);
sv.c:4376:				ch->pcdata->thaum[14] = fread_number (fp);
sv.c:4377:				ch->pcdata->thaum[15] = fread_number (fp);
sv.c:4378:				ch->pcdata->thaum[16] = fread_number (fp);
sv.c:4379:				ch->pcdata->thaum[17] = fread_number (fp);
sv.c:4380:				ch->pcdata->thaum[18] = fread_number (fp);
sv.c:4381:				ch->pcdata->thaum[19] = fread_number (fp);
sv.c:4386:			KEY ("TDC", ch->pcdata->tempdesc, fread_string (fp));
sv.c:4387:			KEY ("TDS", ch->pcdata->showtempdesc, fread_number (fp));
sv.c:4388:			KEY ("TBS", ch->truebeast, fread_number (fp));
sv.c:4389:			KEY ("TRS", ch->trust, fread_number (fp));
sv.c:4392:				ch->pcdata->title = fread_string (fp);
sv.c:4393:				if (isalpha (ch->pcdata->title[0]) || isdigit (ch->pcdata->title[0]))
sv.c:4395:					sprintf (buf, "%s", ch->pcdata->title);
sv.c:4396:					free_string (ch->pcdata->title);
sv.c:4397:					ch->pcdata->title = str_dup (buf);
sv.c:4405:			KEY ("VSN", ch->pcdata->vision, fread_number (fp));
sv.c:4406:			KEY ("VAF", ch->vampaff, fread_number (fp));
sv.c:4407:			KEY ("Vamppass", ch->vamppass, fread_number (fp));
sv.c:4408:			KEY ("VOI", ch->pcdata->voice, fread_string (fp));
sv.c:4409:			KEY ("VOT", ch->pcdata->votes, fread_number (fp));
sv.c:4412:				ch->pcdata->virtues[VIRTUE_CONSCIENCE] = fread_number (fp);
sv.c:4413:				ch->pcdata->virtues[VIRTUE_SELFCONTROL] = fread_number (fp);
sv.c:4414:				ch->pcdata->virtues[VIRTUE_COURAGE] = fread_number (fp);
sv.c:4417:					ch->pcdata->virtues[VIRTUE_WISDOM] = fread_number (fp);
sv.c:4418:					ch->pcdata->virtues[VIRTUE_FAITH] = fread_number (fp);
sv.c:4419:					ch->pcdata->virtues[VIRTUE_ZEAL] = fread_number (fp);
sv.c:4429:				ch->wpn[0] = fread_number (fp);
sv.c:4430:				ch->wpn[1] = fread_number (fp);
sv.c:4431:				ch->wpn[2] = fread_number (fp);
sv.c:4432:				ch->wpn[3] = fread_number (fp);
sv.c:4433:				ch->wpn[4] = fread_number (fp);
sv.c:4434:				ch->wpn[5] = fread_number (fp);
sv.c:4435:				ch->wpn[6] = fread_number (fp);
sv.c:4436:				ch->wpn[7] = fread_number (fp);
sv.c:4437:				ch->wpn[8] = fread_number (fp);
sv.c:4438:				ch->wpn[9] = fread_number (fp);
sv.c:4439:				ch->wpn[10] = fread_number (fp);
sv.c:4440:				ch->wpn[11] = fread_number (fp);
sv.c:4441:				ch->wpn[12] = fread_number (fp);
sv.c:4447:				ch->pcdata->willpower[0] = fread_number (fp);
sv.c:4448:				ch->pcdata->willpower[1] = fread_number (fp);
sv.c:4452:			KEY ("WMP", ch->wimpy, fread_number (fp));
sv.c:4453:			KEY ("WLF", ch->pcdata->wolf, fread_number (fp));
sv.c:4456:				ch->pcdata->wolfform[0] = fread_number (fp);
sv.c:4457:				ch->pcdata->wolfform[1] = fread_number (fp);
sv.c:4461:			KEY ("WPT", ch->pcdata->wpoints, fread_number (fp));
sv.c:4462:			KEY ("WRC", ch->pcdata->wp_regain_counter, fread_number (fp));
sv.c:4465:				ch->x = fread_number (fp);
sv.c:4466:				ch->y = fread_number (fp);
sv.c:5251:						if (isalpha (ch->pcdata->title[0]) || isdigit (ch->pcdata->title[0]))
sys.c:210:	sprintf (buf, "%s: Pset %s", ch->name, argument);
sys.c:780:			ch->pcdata->diableries[DIAB_EVER] = value;
sys.c:781:			ch->pcdata->diableries[DIAB_TIME] = 0;
sys.c:1180:		if (ch->level != MAX_LEVEL)
sys.c:1272:				if (IS_SET (ch->pcdata->thaum_type, THAUM_TYPE_GENERAL))
sys.c:1276:					REMOVE_BIT (ch->pcdata->thaum_type, THAUM_TYPE_GENERAL);
sys.c:1282:					SET_BIT (ch->pcdata->thaum_type, THAUM_TYPE_GENERAL);
sys.c:1288:				if (IS_SET(ch->pcdata->thaum_type, THAUM_TYPE_DARK))
sys.c:1292:					REMOVE_BIT (ch->pcdata->thaum_type, THAUM_TYPE_DARK);
sys.c:1298:					SET_BIT (ch->pcdata->thaum_type, THAUM_TYPE_DARK);
sys.c:1305:				if (IS_SET(ch->pcdata->thaum_type, THAUM_TYPE_KOLDUN))
sys.c:1309:					REMOVE_BIT (ch->pcdata->thaum_type, THAUM_TYPE_KOLDUN);
sys.c:1315:					SET_BIT (ch->pcdata->thaum_type, THAUM_TYPE_KOLDUN);
sys.c:1551:	sprintf (buf, "%s: Pset %s", ch->name, argument);
sys.c:1592:		vch->exp += v;
sys.c:1593:		vch->pcdata->score[SCORE_TOTAL_XP] += v;
sys.c:1602:		vch->pcdata->willpower[0] += v;
sys.c:1611:		vch->pcdata->power[0] += v;
sys.c:1612:		vch->pcdata->power[1] += v;
sys.c:1622:	if (vch->mkill < 5)
sys.c:1624:		vch->mkill = 5;
sys.c:1748:	pArea = ch->in_room->area;	/* this is the area we want info on */
sys.c:1804:		obj->questmaker = str_dup (ch->name);
sys.c:1824:		obj->questmaker = str_dup (ch->name);
sys.c:1841:		obj->questmaker = str_dup (ch->name);
sys.c:1872:		sprintf (buf3, "Free %s vnum listing for area %s\n\r", arg, ch->in_room->area->name);
sys.c:1877:		for (i = ch->in_room->area->lvnum; i <= ch->in_room->area->uvnum; i++)
sys.c:1897:		sprintf (buf3, "Free %s vnum listing for area %s\n\r", arg, ch->in_room->area->name);
sys.c:1901:		for (i = ch->in_room->area->lvnum; i <= ch->in_room->area->uvnum; i++)
sys.c:1921:		sprintf (buf3, "Free %s vnum listing for area %s\n\r", arg, ch->in_room->area->name);
sys.c:1924:		for (i = ch->in_room->area->lvnum; i <= ch->in_room->area->uvnum; i++)
sys.c:1957:	sprintf (buf, "Rooms in area %s.\n\r", ch->in_room->area->name);
sys.c:1958:	lvnum = ch->in_room->area->lvnum;
sys.c:1959:	uvnum = ch->in_room->area->uvnum;
sys.c:1987:	sprintf (buf, "Objects in area %s.\n\r", ch->in_room->area->name);
sys.c:1989:	lvnum = ch->in_room->area->lvnum;
sys.c:1990:	uvnum = ch->in_room->area->uvnum;
sys.c:2014:	sprintf (buf, "Mobs in area %s.\n\r", ch->in_room->area->name);
sys.c:2016:	lvnum = ch->in_room->area->lvnum;
sys.c:2017:	uvnum = ch->in_room->area->uvnum;
sys.c:2128:		ch->desc->pEdit = (void *) help_temp;
sys.c:2129:		ch->desc->editor = ED_HEDITOR;
sys.c:2145:		for (help_search = help_first; help_search != NULL; help_search = help_search->next)
sys.c:2146:			fprintf (fp, "%d %s~\n%s~ ", help_search->level, help_search->keyword, help_search->text);
sys.c:2161:			for (help_search = help_first; help_search != NULL; help_search = help_search->next)
sys.c:2163:				if (is_names (arg2, help_search->keyword))
sys.c:2166:					sprintf (buf, "Found: %s\n\r", help_search->keyword);
sys.c:2168:					previous->next = help_search->next;
sys.c:2169:					sprintf (buf, "Deleting: %s\n\r", help_search->keyword);
sys.c:2192:			for (help_search = help_first; help_search != NULL; help_search = help_search->next)
sys.c:2194:				if (is_names (arg2, help_search->keyword))
sys.c:2200:						previous->next = help_search->next;
sys.c:2201:					sprintf (buf, "Found: %s\n\r", help_search->keyword);
sys.c:2203:					ch->desc->pEdit = (void *) help_search;
sys.c:2204:					ch->desc->editor = ED_HEDITOR;
sys.c:2231:	help_edit = (HELP_DATA *) ch->desc->pEdit;
sys.c:2280:		ch->desc->pEdit = NULL;
sys.c:2281:		ch->desc->connected = CON_PLAYING;
sys.c:2282:		ch->desc->editor = 0;
sys.c:2289:		ch->desc->pEdit = NULL;
sys.c:2290:		ch->desc->connected = CON_PLAYING;
sys.c:2291:		ch->desc->editor = 0;
sys.c:2306:		for (help_search = help_first; help_search != NULL; help_search = help_search->next)
sys.c:2307:			if (is_names (argall, help_search->keyword))
sys.c:2425:		ch->desc->pEdit = (void *) mptemp;
sys.c:2426:		ch->desc->editor = ED_MPEDITOR;
sys.c:2484:		ch->desc->pEdit = NULL;
sys.c:2555:							if(ch->desc->pEdit == NULL)
sys.c:2556:								ch->desc->pEdit = (void *)mptemp;
sys.c:2562:							if(ch->desc->pEdit == NULL)
sys.c:2563:								ch->desc->pEdit = (void *)mptemp;					
sys.c:2573:			ch->desc->tempString = str_dup(arg2);
sys.c:2574:			ch->desc->editor = ED_MPEDITOR;
sys.c:2598:	mpeditt = (MPROG_DATA *) ch->desc->pEdit;
sys.c:2661:			ch->desc->pEdit = (void *)previous;
sys.c:2713:		ch->desc->pEdit2 = (void *) mptemp;
sys.c:2714:		ch->desc->editor = ED_SMPEDITOR;
sys.c:2756:			ch->desc->pEdit = (void *) current->next;
sys.c:2758:			ch->desc->pEdit2 = (void *) current;
sys.c:2764:			ch->desc->pEdit2 = (void *) current;
sys.c:2766:		ch->desc->editor = ED_SMPEDITOR;
sys.c:2786:		ch->desc->pEdit = NULL;
sys.c:2787:		ch->desc->pEdit2 = NULL;
sys.c:2788:		ch->desc->connected = CON_PLAYING;
sys.c:2789:		ch->desc->editor = 0;
sys.c:2842:			if(ch->desc->tempString != NULL)
sys.c:2845:				strcpy(arg2, ch->desc->tempString);
sys.c:2906:			ch->desc->pEdit = NULL;
sys.c:2907:			ch->desc->pEdit2 = NULL;
sys.c:2908:			ch->desc->connected = CON_PLAYING;
sys.c:2909:			ch->desc->editor = 0;
sys.c:2936:	mpeditt = (MPROG_DATA *) ch->desc->pEdit2;
sys.c:2937:	total = (MPROG_DATA *) ch->desc->pEdit;
sys.c:3037:		ch->desc->pEdit = mpeditt;
sys.c:3038:		ch->desc->pEdit2 = NULL;
sys.c:3039:		ch->desc->editor = ED_MPEDITOR;
sys.c:3048:		ch->desc->pEdit2 = NULL;
sys.c:3049:		ch->desc->editor = ED_MPEDITOR;
sys.c:3083:	for(temp=ch->in_room->area->mprogs;temp!=NULL;temp = temp->next)
sys.c:3144:		if (ch->pcdata->road == ROAD_HUMANITY)
sys.c:3145:			burned_blood = (6 - ch->pcdata->virtues[VIRTUE_SELFCONTROL]);
sys.c:3147:		else if (ch->pcdata->road == ROAD_SIN || ch->pcdata->road == ROAD_BEAST)
sys.c:3151:			burned_blood = (8 - ch->pcdata->virtues[VIRTUE_SELFCONTROL]);
sys.c:3155:		if (ch->blood[BLOOD_CURRENT] > burned_blood)
sys.c:3157:			ch->blood[BLOOD_CURRENT] -= burned_blood;	
sys.c:3172:		if (!str_cmp(ch->clan, "Nosferatu"))
sys.c:3176:			if (ch->pcdata->road == ROAD_HUMANITY)
sys.c:3260:		else if (!str_cmp(ch->clan, "Cappadocian"))
sys.c:3264:			if (ch->pcdata->road == ROAD_HUMANITY)
sys.c:3429:	if (ch->pcdata->evileye > 0)
sys.c:3431:		if (ch->pcdata->evileye > 1)
sys.c:3432:			sprintf (buf, "#cYou will be able to roll again in %d seconds.#n\n\r", ch->pcdata->evileye);
sys.c:3442:		if(ch->abilities[SKILLS][SKI_PERFORMANCE] > 0) {
sys.c:3449:			  sprintf( buf, "#C%s#c has #RBotched#c a roll to play an instrument.#n\n\r", ch->name);
sys.c:3451:			sprintf (buf, "#C%s#c got #C%d#c successes on their roll for playing an instrument.\n\r", ch->name, char_success);
sys.c:3454:			ch->pcdata->evileye = 10;
sys.c:3457:		if(ch->abilities[SKILLS][SKI_PERFORMANCE] < 1) {
sys.c:3464:			  sprintf( buf, "#C%s#c has #RBotched#c a roll to play an instrument.#n\n\r", ch->name);
sys.c:3466:			sprintf (buf, "#C%s#c got #C%d#c successes on their roll for playing an instrument.\n\r", ch->name, char_success);
sys.c:3469:			ch->pcdata->evileye = 10;
sys.c:3481:			  sprintf( buf, "#C%s#c has #RBotched#c singing.#n.\n\r", ch->name);
sys.c:3483:			sprintf (buf, "#C%s#c got #C%d#c successes singing.#n\n\r", ch->name, char_success);
sys.c:3486:			  ch->pcdata->evileye = 10;
sys.c:3499:			  sprintf( buf, "#C%s#c has #RBotched#c an acting roll.#n.\n\r", ch->name);
sys.c:3501:			sprintf (buf, "#C%s#c got #C%d#c successes acting.#n\n\r", ch->name, char_success);
sys.c:3504:			ch->pcdata->evileye = 10;
sys.c:3509:		if(ch->abilities[SKILLS][SKI_PERFORMANCE] > 0) {
sys.c:3516:			  sprintf( buf, "#C%s#c has #RBotched#c a roll to dance.#n\n\r", ch->name);
sys.c:3518:			sprintf (buf, "#C%s#c got #C%d#c successes on their roll to dance.\n\r", ch->name, char_success);
sys.c:3521:			ch->pcdata->evileye = 10;
sys.c:3524:		if(ch->abilities[SKILLS][SKI_PERFORMANCE] < 1) {
sys.c:3531:			  sprintf( buf, "#C%s#c has #RBotched#c a roll to dance.#n\n\r", ch->name);
sys.c:3533:			sprintf (buf, "#C%s#c got #C%d#c successes on their roll for dancing.\n\r", ch->name, char_success);
sys.c:3536:			ch->pcdata->evileye = 10;
sys.c:3550:		if(ch->abilities[KNOWLEDGES][KNO_LINGUISTICS] > 0) {
sys.c:3557:			  sprintf( buf, "#C%s#c has #RBotched#c identifying a language.#n\n\r", ch->name);
sys.c:3559:			sprintf (buf, "#C%s#c got #C%d#c  successes identifying a language.#n\n\r", ch->name, char_success);
sys.c:3560:			ch->pcdata->evileye = 10;
sys.c:3565:		if(ch->abilities[KNOWLEDGES][KNO_LINGUISTICS] > 0) {
sys.c:3578:			  sprintf( buf, "#C%s#c has #RBotched#c learning a language.#n\n\r", ch->name);
sys.c:3580:			sprintf (buf, "#C%s#c got #C%d#c successes towards learning a language. 7 successes over time are needed to learn a language.#n\n\r", ch->name, char_success);
sys.c:3581:			ch->pcdata->evileye = 10;
sys.c:3602:			  sprintf( buf, "#C%s#c has#R Botched#c while comforting someone.#n\n\r", ch->name);
sys.c:3604:			sprintf (buf, "#C%s#c got #C%d#c successes towards comforting someone.#n\n\r", ch->name, char_success);
sys.c:3607:			ch->pcdata->evileye = 10;
sys.c:3618:			  sprintf( buf, "#C%s#c has #RBotched#c determing the mood of a person or a room.#n\n\r", ch->name);
sys.c:3620:			sprintf (buf, "#C%s#c has #C%d#c successes determining the mood of a person or a room.#n\n\r", ch->name, char_success);
sys.c:3623:			ch->pcdata->evileye = 10;
sys.c:3642:			  sprintf( buf, "#C%s#c has #RBotched#c sending a subtle or hidden signal to someone.#n\n\r", ch->name);
sys.c:3644:			sprintf (buf, "#C%s#c has #C%d#c successes sending a subtle or hidden signal to someone..#n\n\r", ch->name, char_success);
sys.c:3647:			ch->pcdata->evileye = 10;
sys.c:3667:			  sprintf( buf, "#C%s#c has #RBotched#c noticing a covert action.#n\n\r", ch->name);
sys.c:3669:			sprintf (buf, "#C%s#c has #C%d#c successes noticing a covert action..#n\n\r", ch->name, char_success);
sys.c:3672:			ch->pcdata->evileye = 10;
sys.c:3688:			  sprintf( buf, "#C%s#c has#R Botched#c their juggling roll.#n\n\r", ch->name);
sys.c:3690:			sprintf (buf, "#C%s#c got #C%d#c successes juggling.#n\n\r", ch->name, char_success);
sys.c:3693:			ch->pcdata->evileye = 10;
sys.c:3704:			  sprintf( buf, "#C%s#c has #RBotched#c doing a 'magic' trick.#n\n\r", ch->name);
sys.c:3706:			sprintf (buf, "#C%s#c has #C%d#c successes doing a 'magic' trick.#n\n\r", ch->name, char_success);
sys.c:3709:			ch->pcdata->evileye = 10;
sys.c:3720:			  sprintf( buf, "#C%s#c has#R Botched#c while cheating with cards or dice.#n\n\r", ch->name);
sys.c:3722:			sprintf (buf, "#C%s#c got #C%d#c successes stacking a deck or cheating with dice.#n\n\r", ch->name, char_success);
sys.c:3725:			ch->pcdata->evileye = 10;
sys.c:3750:			  sprintf( buf, "#C%s#c has#R Botched#c shifting to homid. Please inform the storytellers.#n\n\r", ch->name);
sys.c:3752:			sprintf (buf, "#C%s#c got #C%d#c successes shifting to homid form.#n\n\r", ch->name, char_success);
sys.c:3755:			ch->pcdata->evileye = 10;
sys.c:3770:			  sprintf( buf, "#C%s#c has #RBotched#c shifting to glabro. Please inform the storytellers.#n\n\r", ch->name);
sys.c:3772:			sprintf (buf, "#C%s#c has #C%d#c successes shifting to glabro form.#n\n\r", ch->name, char_success);
sys.c:3775:			ch->pcdata->evileye = 10;
sys.c:3790:			  sprintf( buf, "#C%s#c has #RBotched#c shifting to crinos. Please inform the storytellers.#n\n\r", ch->name);
sys.c:3792:			sprintf (buf, "#C%s#c has #C%d#c successes shifting to crinos form.#n\n\r", ch->name, char_success);
sys.c:3795:			ch->pcdata->evileye = 10;
sys.c:3810:			  sprintf( buf, "#C%s#c has #RBotched#c shifting to hispo. Please inform the storytellers.#n\n\r", ch->name);
sys.c:3812:			sprintf (buf, "#C%s#c has #C%d#c successes shifting to hispo form.#n\n\r", ch->name, char_success);
sys.c:3815:			ch->pcdata->evileye = 10;
sys.c:3830:			  sprintf( buf, "#C%s#c has #RBotched#c shifting to lupus. Please inform the storytellers.#n\n\r", ch->name);
sys.c:3832:			sprintf (buf, "#C%s#c has #C%d#c successes shifting to lupus form.#n\n\r", ch->name, char_success);
sys.c:3835:			ch->pcdata->evileye = 10;
sys.c:3850:		if (ch->abilities[SKILLS][SKI_ETIQUETTE] <1){
sys.c:3858:			  sprintf( buf, "#C%s#c has #RBotched#c a Court Etiquette roll.#n\n\r", ch->name);
sys.c:3860:			sprintf (buf, "#C%s#c got #C%d#c successes on their Court Etiquette roll.\n\r", ch->name, char_success);
sys.c:3863:			ch->pcdata->evileye = 10;
sys.c:3874:			  sprintf( buf, "#C%s#c has #RBotched#c a Business Etiquette roll.#n\n\r", ch->name);
sys.c:3876:			sprintf (buf, "#C%s#c got #C%d#c successes on their Business Etiquette roll.\n\r", ch->name, char_success);
sys.c:3879:			ch->pcdata->evileye = 10;
sys.c:3890:			  sprintf( buf, "#C%s#c has #RBotched#c a Street Etiquette roll.#n\n\r", ch->name);
sys.c:3892:			sprintf (buf, "#C%s#c got #C%d#c successes on their Street Etiquette roll.\n\r", ch->name, char_success);
sys.c:3895:			ch->pcdata->evileye = 10;
sys.c:3906:			  sprintf( buf, "#C%s#c has #RBotched#c a High Class Etiquette roll.#n\n\r", ch->name);
sys.c:3908:			sprintf (buf, "#C%s#c got #C%d#c successes on their High Class Etiquette roll.\n\r", ch->name, char_success);
sys.c:3911:			ch->pcdata->evileye = 10;
sys.c:3922:			  sprintf( buf, "#C%s#c has #RBotched#c a Middle Class Etiquette roll.#n\n\r", ch->name);
sys.c:3924:			sprintf (buf, "#C%s#c got #C%d#c successes on their Middle Class Etiquette roll.\n\r", ch->name, char_success);
sys.c:3927:			ch->pcdata->evileye = 10;
sys.c:3938:			  sprintf( buf, "#C%s#c has #RBotched#c a Low Class Etiquette roll.#n\n\r", ch->name);
sys.c:3940:			sprintf (buf, "#C%s#c got #C%d#c successes on their Low Class Etiquette roll.\n\r", ch->name, char_success);
sys.c:3943:			ch->pcdata->evileye = 10;
sys.c:3956:			  sprintf( buf, "#C%s#c has #RBotched#c a Court Etiquette roll.#n\n\r", ch->name);
sys.c:3958:			sprintf (buf, "#C%s#c got #C%d#c successes on their Court Etiquette roll.\n\r", ch->name, char_success);
sys.c:3961:			ch->pcdata->evileye = 10;
sys.c:3972:			  sprintf( buf, "#C%s#c has #RBotched#c a Business Etiquette roll.#n\n\r", ch->name);
sys.c:3974:			sprintf (buf, "#C%s#c got #C%d#c successes on their Business Etiquette roll.\n\r", ch->name, char_success);
sys.c:3977:			ch->pcdata->evileye = 10;
sys.c:3988:			  sprintf( buf, "#C%s#c has #RBotched#c a Street Etiquette roll.#n\n\r", ch->name);
sys.c:3990:			sprintf (buf, "#C%s#c got #C%d#c successes on their Street Etiquette roll.\n\r", ch->name, char_success);
sys.c:3993:			ch->pcdata->evileye = 10;
sys.c:4004:			  sprintf( buf, "#C%s#c has #RBotched#c a High Class Etiquette roll.#n\n\r", ch->name);
sys.c:4006:			sprintf (buf, "#C%s#c got #C%d#c successes on their High Class Etiquette roll.\n\r", ch->name, char_success);
sys.c:4009:			ch->pcdata->evileye = 10;
sys.c:4020:			  sprintf( buf, "#C%s#c has #RBotched#c a Middle Class Etiquette roll.#n\n\r", ch->name);
sys.c:4022:			sprintf (buf, "#C%s#c got #C%d#c successes on their Middle Class Etiquette roll.\n\r", ch->name, char_success);
sys.c:4025:			ch->pcdata->evileye = 10;
sys.c:4036:			  sprintf( buf, "#C%s#c has #RBotched#c a Low Class Etiquette roll.#n\n\r", ch->name);
sys.c:4038:			sprintf (buf, "#C%s#c got #C%d#c successes on their Low Class Etiquette roll.\n\r", ch->name, char_success);
sys.c:4041:			ch->pcdata->evileye = 10;
sys.c:4065:			  sprintf( buf, "#C%s#c has #RBotched#c a roll to shoot dice.#n\n\r", ch->name);
sys.c:4067:			sprintf (buf, "#C%s#c got #C%d#c successes on their roll to shoot dice.\n\r", ch->name, char_success);
sys.c:4070:			ch->pcdata->evileye = 10;
sys.c:4081:			  sprintf( buf, "#C%s#c has #RBotched#c a roll to toss darts.#n\n\r", ch->name);
sys.c:4083:			sprintf (buf, "#C%s#c got #C%d#c successes on their roll to toss darts.\n\r", ch->name, char_success);
sys.c:4086:			ch->pcdata->evileye = 10;
sys.c:4103:		if(ch->abilities[KNOWLEDGES][KNO_THEOLOGY] > 0) {
sys.c:4110:			  sprintf( buf, "#C%s#c has #RBotched#c a Theology Knowledge roll.#n\n\r", ch->name);
sys.c:4112:			sprintf (buf, "#C%s#c got #C%d#c successes on their Theology Knowledge roll.\n\r", ch->name, char_success);
sys.c:4115:			ch->pcdata->evileye = 10;
sys.c:4118:		if(ch->abilities[KNOWLEDGES][KNO_THEOLOGY] < 1) {
sys.c:4124:		if(ch->abilities[KNOWLEDGES][KNO_ACADEMICS] > 0) {
sys.c:4131:			  sprintf( buf, "#C%s#c has #RBotched#c an Academics Knowledge roll.#n\n\r", ch->name);
sys.c:4133:			sprintf (buf, "#C%s#c got #C%d#c successes on their Academics Knowledge roll.\n\r", ch->name, char_success);
sys.c:4136:			ch->pcdata->evileye = 10;
sys.c:4139:		if(ch->abilities[KNOWLEDGES][KNO_ACADEMICS] < 1) {
sys.c:4146:		if(ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM] > 0) {
sys.c:4153:			  sprintf( buf, "#C%s#c has #RBotched#c a Hearth Wisdom Knowledge roll.#n\n\r", ch->name);
sys.c:4155:			sprintf (buf, "#C%s#c got #C%d#c successes on their Hearth Wisdom Knowledge roll.\n\r", ch->name, char_success);
sys.c:4158:			ch->pcdata->evileye = 10;
sys.c:4161:		if(ch->abilities[KNOWLEDGES][KNO_HEARTHWISDOM] < 1) {
sys.c:4168:		if(ch->abilities[KNOWLEDGES][KNO_INVESTIGATION] > 0) {
sys.c:4175:			  sprintf( buf, "#C%s#c has #RBotched#c an Investigation roll.#n\n\r", ch->name);
sys.c:4177:			sprintf (buf, "#C%s#c got #C%d#c successes on their Investigation roll.\n\r", ch->name, char_success);
sys.c:4180:			ch->pcdata->evileye = 10;
sys.c:4183:		if(ch->abilities[KNOWLEDGES][KNO_INVESTIGATION] < 1) {
sys.c:4190:		if(ch->abilities[KNOWLEDGES][KNO_LAW] > 0) {
sys.c:4197:			  sprintf( buf, "#C%s#c has #RBotched#c a Law Knowledge roll.#n\n\r", ch->name);
sys.c:4199:			sprintf (buf, "#C%s#c got #C%d#c successes on their Law Knowledge roll.\n\r", ch->name, char_success);
sys.c:4202:			ch->pcdata->evileye = 10;
sys.c:4205:		if(ch->abilities[KNOWLEDGES][KNO_LAW] < 1) {
sys.c:4212:		if(ch->abilities[KNOWLEDGES][KNO_MEDICINE] > 0) {
sys.c:4219:			  sprintf( buf, "#C%s#c has #RBotched#c a Medicine Knowledge roll.#n\n\r", ch->name);
sys.c:4221:			sprintf (buf, "#C%s#c got #C%d#c successes on their Medicine Knowledge roll.\n\r", ch->name, char_success);
sys.c:4224:			ch->pcdata->evileye = 10;
sys.c:4227:		if(ch->abilities[KNOWLEDGES][KNO_MEDICINE] < 1) {
sys.c:4234:		if(ch->abilities[KNOWLEDGES][KNO_OCCULT] > 0) {
sys.c:4241:			  sprintf( buf, "#C%s#c has #RBotched#c an Occult Knowledge roll.#n\n\r", ch->name);
sys.c:4243:			sprintf (buf, "#C%s#c got #C%d#c successes on their Occult Knowledge roll.\n\r", ch->name, char_success);
sys.c:4246:			ch->pcdata->evileye = 10;
sys.c:4249:		if(ch->abilities[KNOWLEDGES][KNO_OCCULT] < 1) {
sys.c:4256:		if(ch->abilities[KNOWLEDGES][KNO_POLITICS] > 0) {
sys.c:4263:			  sprintf( buf, "#C%s#c has #RBotched#c a Political Knowledge roll.#n\n\r", ch->name);
sys.c:4265:			sprintf (buf, "#C%s#c got #C%d#c successes on their Political Knowledge roll.\n\r", ch->name, char_success);
sys.c:4268:			ch->pcdata->evileye = 10;
sys.c:4271:		if(ch->abilities[KNOWLEDGES][KNO_POLITICS] < 1) {
sys.c:4278:		if(ch->abilities[KNOWLEDGES][KNO_SENESCHAL] > 0) {
sys.c:4285:			  sprintf( buf, "#C%s#c has #RBotched#c a Senseschal Knowledge roll.#n\n\r", ch->name);
sys.c:4287:			sprintf (buf, "#C%s#c got #C%d#c successes on their Seneschal Knowledge roll.\n\r", ch->name, char_success);
sys.c:4290:			ch->pcdata->evileye = 10;
sys.c:4293:		if(ch->abilities[KNOWLEDGES][KNO_SENESCHAL] < 1) {
sys.c:4338:	AREA_DATA *pArea = ch->in_room->area;
sys.c:4351:		  pArea = ch->in_room->area;
sys.c:4391:		sprintf (buf, "#c[#C%-15s #B%d#c ][#C%-15s #B%d#c ][#C%-15s #B%d#c ]#n\n\r", ability_names[TALENTS][i][0], ch->abilities[TALENTS][i], ability_names[SKILLS][i][0], ch->abilities[SKILLS][i], ability_names[KNOWLEDGES][i][0], ch->abilities[KNOWLEDGES][i]);
sys.c:4505:        	sprintf (poly, ch->short_descr);
sys.c:4507:                sprintf (poly, "#C%s#c#n", ch->morph);
sys.c:4509:                sprintf (poly, ch->name);
sys.c:4512:	if ((chance = ch->pcdata->learned[language2]) == 0)
sys.c:4526:		if (ch->pcdata->learned[language2] < 100)
sys.c:4529:			ch->pcdata->learned[language2] += ch->abilities[KNOWLEDGES][KNO_LINGUISTICS];
sys.c:4531:			if (ch->pcdata->learned[language2] == 100)
sys.c:4535:			if (ch->pcdata->learned[language2] > 100)
sys.c:4536:				ch->pcdata->learned[language2] = 100;
sys.c:4538:		for (och = ch->in_room->people; och != NULL; och = och->next_in_room)
sys.c:4540:			if (!IS_NPC (och) && (och != ch) && (ch->plane == och->plane || IS_STORYTELLER(och)))
sys.c:4542:				if (IS_SET(och->act, PLR_CHAMPION) || IS_STORYTELLER(och))
sys.c:4546:					chance2 = och->pcdata->learned[language2];
sys.c:4557:					if ((ch->pcdata->voice != NULL) && (strlen (ch->pcdata->voice) > 3))
sys.c:4560:						sprintf (buf, "#C%s#c %s, #B'#3%s#B'#c in #C%s#n\n\r", poly, ch->pcdata->voice, argument, lan_str);
sys.c:4584:		for (och = ch->in_room->people; och != NULL; och = och->next_in_room)
sys.c:4589:				if ((chance2 = och->pcdata->learned[language2]) == 0)
sys.c:4599:					sprintf (buf, "#cIn a weird form of #C%s#c, #C%s#c says something uncomprehensible.#n\n\r", lan_str, ch->name);
sys.c:4605:					sprintf (buf, "#C%s#c says something in #C%s#c you can't understand.#n\n\r", ch->name, lan_str);
sys.c:4610:		if (ch->pcdata->learned[language2] < 100)
sys.c:4612:			ch->pcdata->learned[language2] += ch->abilities[KNOWLEDGES][KNO_LINGUISTICS];
sys.c:4613:			if (ch->pcdata->learned[language2] == 100)
sys.c:4618:			if (ch->pcdata->learned[language2] > 100)
sys.c:4619:				ch->pcdata->learned[language2] = 100;
sys.c:4639:	if (strlen (ch->side) > 1)
sys.c:4653:		free_string (ch->side);
sys.c:4654:		ch->side = str_dup ("Autarkis");
sys.c:4660:		free_string (ch->side);
sys.c:4661:		ch->side = str_dup ("Furores");
sys.c:4668:		if (!str_cmp (ch->clan, "Toreador") || !str_cmp (ch->clan, "Tzimisce") || !str_cmp (ch->clan, "Brujah"))
sys.c:4675:		free_string (ch->side);
sys.c:4676:		ch->side = str_dup ("Inconnu");
sys.c:4682:		if (!str_cmp (ch->clan, "baali") || !str_cmp (ch->clan, "tzimisce"))
sys.c:4688:		free_string (ch->side);
sys.c:4689:		ch->side = str_dup ("Promethians");
sys.c:5159:		REMOVE_BIT (ch->more2, MORE2_HEIGHTENSENSES);
sys.c:5161:		ch->pcdata->vision = 3;
sys.c:5165:		SET_BIT (ch->more2, MORE2_HEIGHTENSENSES);
sys.c:5167:		ch->pcdata->vision = vision;
sys.c:5260:	if (!str_cmp (argument, ch->name) || !str_cmp (argument, "self"))
sys.c:5272:		sprintf (buf, "$n's features twist and distort until $e looks like %s.", ch->name);
sys.c:5274:		REMOVE_BIT (ch->polyaff, POLY_BONECRAFT);
sys.c:5275:		REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
sys.c:5276:		REMOVE_BIT (ch->vampaff, VAM_DISGUISED);
sys.c:5277:		REMOVE_BIT (ch->extra, EXTRA_VICISSITUDE);
sys.c:5278:		free_string (ch->morph);
sys.c:5279:		ch->morph = str_dup ("");
sys.c:5294:		free_string (ch->morph);
sys.c:5295:		ch->morph = str_dup (argument);
sys.c:5302:	SET_BIT (ch->polyaff, POLY_BONECRAFT);
sys.c:5303:	SET_BIT (ch->affected_by, AFF_POLYMORPH);
sys.c:5304:	SET_BIT (ch->vampaff, VAM_DISGUISED);
sys.c:5305:	SET_BIT (ch->extra, EXTRA_VICISSITUDE);
sys.c:5306:	free_string (ch->morph);
sys.c:5307:	ch->morph = str_dup (argument);
sys.c:5372:	if (!str_cmp (argument, ch->name) || !str_cmp (argument, "self"))
sys.c:5386:		REMOVE_BIT (ch->polyaff, POLY_BONECRAFT);
sys.c:5387:		REMOVE_BIT (ch->affected_by, AFF_POLYMORPH);
sys.c:5388:		REMOVE_BIT (ch->vampaff, VAM_DISGUISED);
sys.c:5389:		REMOVE_BIT (ch->extra, EXTRA_VICISSITUDE);
sys.c:5390:		free_string (ch->morph);
sys.c:5391:		ch->morph = str_dup ("");
sys.c:5406:		free_string (ch->morph);
sys.c:5407:		ch->morph = str_dup (argument);
sys.c:5414:	SET_BIT (ch->polyaff, POLY_BONECRAFT);
sys.c:5415:	SET_BIT (ch->affected_by, AFF_POLYMORPH);
sys.c:5416:	SET_BIT (ch->vampaff, VAM_DISGUISED);
sys.c:5418:	free_string (ch->morph);
sys.c:5419:	ch->morph = str_dup (argument);
update.c:70:		ch_next = ch->next;
update.c:72:		if (ch->in_room == NULL)
update.c:77:			if (ch->desc == NULL || !IS_PLAYING (ch->desc))
update.c:79:			if (ch->embraced == ARE_EMBRACING)
update.c:84:				if (ch->position < POS_STANDING)
update.c:86:					if ((vch = ch->embrace) != NULL)
update.c:88:						vch->embrace = NULL;
update.c:89:						vch->embraced = ARE_NONE;
update.c:91:					ch->embrace = NULL;
update.c:92:					ch->embraced = ARE_NONE;
update.c:94:				else if ((vch = ch->embrace) == NULL)
update.c:95:					ch->embraced = ARE_NONE;
update.c:96:				else if (vch->position == POS_FIGHTING)
update.c:98:					vch->embrace = NULL;
update.c:99:					vch->embraced = ARE_NONE;
update.c:100:					ch->embrace = NULL;
update.c:101:					ch->embraced = ARE_NONE;
update.c:103:				else if (vch->in_room == NULL || ch->in_room == NULL || ch->in_room != vch->in_room || is_safe (ch, vch))
update.c:105:					ch->embrace = NULL;
update.c:106:					ch->embraced = ARE_NONE;
update.c:107:					vch->embrace = NULL;
update.c:108:					vch->embraced = ARE_NONE;
update.c:110:				else if (vch->level > 100 && vch->position > POS_STUNNED)
update.c:112:					if (vch->position < POS_FIGHTING)
update.c:116:						vch->position = POS_STANDING;
update.c:123:					ch->position = POS_STUNNED;
update.c:124:					ch->embrace = NULL;
update.c:125:					ch->embraced = ARE_NONE;
update.c:126:					vch->embrace = NULL;
update.c:127:					vch->embraced = ARE_NONE;
update.c:134:						SET_BIT (ch->more, MORE_ANGER);
update.c:135:						ch->pcdata->wolf += 10;
update.c:139:					if (IS_SET (vch->act, ACT_ANIMAL) && IS_VAMPIRE (ch) && get_disc (ch, DISC_BARDO) < 3)
update.c:147:					if (vch->position == POS_STUNNED)
update.c:149:					if (IS_VAMPIRE (vch) && !str_cmp (vch->clan, "Lamia"))
update.c:154:						int dam = (number_range (1, 5) * amount * vch->blood[BLOOD_POTENCY]);
update.c:156:						ch->hit -= dam;
update.c:157:						ch->agg += dam * 0.005;
update.c:158:						if (ch->agg > 100)
update.c:159:							ch->agg = 100;
update.c:160:						if (ch->hit < -10)
update.c:161:							ch->hit = -10;
update.c:163:						if (ch->position <= POS_STUNNED)
update.c:166:							ch->embrace = NULL;
update.c:167:							ch->embraced = ARE_NONE;
update.c:169:							vch->embrace = NULL;
update.c:170:							vch->embraced = ARE_NONE;
update.c:176:						if (ch->position <= POS_STUNNED)
update.c:179:							ch->embrace = NULL;
update.c:180:							ch->embraced = ARE_NONE;
update.c:181:							vch->embrace = NULL;
update.c:182:							vch->embraced = ARE_NONE;
update.c:185:					if (vch->blood[BLOOD_CURRENT] > amount && (vch->blood[BLOOD_CURRENT] - amount) <= 3)
update.c:187:						ch->blood[BLOOD_CURRENT] += (amount * vch->blood[BLOOD_POTENCY]);
update.c:188:						vch->blood[BLOOD_CURRENT] -= amount;
update.c:195:						if (vch->blood[BLOOD_CURRENT] <= 5)
update.c:209:					else if (vch->blood[BLOOD_CURRENT] - amount <= 0)
update.c:211:						ch->blood[BLOOD_CURRENT] += vch->blood[BLOOD_CURRENT];
update.c:212:						vch->blood[BLOOD_CURRENT] = 0;
update.c:219:							if (ch->beast == 0)
update.c:222:								sprintf (buf, "%s has lost Golconda!", ch->name);
update.c:224:								ch->beast = 80;
update.c:225:								ch->truebeast = 90;
update.c:227:							ch->pcdata->diableries[DIAB_TIME] += 10000;
update.c:228:							ch->pcdata->diableries[DIAB_EVER]++;
update.c:229:							ch->beast += 20;
update.c:230:							ch->truebeast += 10;
update.c:231:							if (ch->beast > 100)
update.c:232:								ch->beast = 100;
update.c:233:							if (ch->truebeast > 100)
update.c:234:								ch->truebeast = 100;
update.c:237:							if (vch->vampgen < ch->vampgen && vch->vampgen > 0)
update.c:239:								/* sprintf (buf, "%s has been diablerised by %s.", vch->name, ch->name);
update.c:241:								ch->vampgen--;
update.c:248:								/* sprintf (buf, "%s has been diablerised by %s for no generation.", vch->name, ch->name);
update.c:252:						ch->embrace = NULL;
update.c:253:						ch->embraced = ARE_NONE;
update.c:254:						vch->embrace = NULL;
update.c:255:						vch->embraced = ARE_NONE;
update.c:256:						vch->form = 0;
update.c:260:						ch->blood[BLOOD_CURRENT] += (amount * vch->blood[BLOOD_POTENCY]);
update.c:261:						vch->blood[BLOOD_CURRENT] -= amount;
update.c:263:					if (ch->blood[BLOOD_CURRENT] >= ch->blood[BLOOD_POOL])
update.c:264:						ch->blood[BLOOD_CURRENT] = ch->blood[BLOOD_POOL];
update.c:271:				if (ch->pcdata->wolf < 1)
update.c:273:					if (ch->pcdata->regenerate > 0)
update.c:275:						if (ch->blood[BLOOD_CURRENT] < 1 && ch->hit > 0)
update.c:280:						ch->pcdata->regenerate--;
update.c:281:						ch->blood[BLOOD_CURRENT] -= 1;
update.c:283:						if (ch->loc_hp[6] > 0)
update.c:284:							ch->loc_hp[0] = 0;
update.c:288:				if (ch->move > 1)
update.c:289:					ch->move--;
update.c:293:				if (ch->position == POS_FIGHTING && !IS_ITEMAFF (ch, ITEMA_RAGER))
update.c:295:					if (ch->pcdata->wolf < 300)
update.c:298:							ch->pcdata->wolf += number_range (15, 30);
update.c:300:							ch->pcdata->wolf += number_range (5, 10);
update.c:303:				else if (ch->pcdata->wolf > 0 && !IS_ITEMAFF (ch, ITEMA_RAGER))
update.c:305:					ch->pcdata->wolf--;
update.c:308:				if (ch->blood[BLOOD_CURRENT] < ch->blood[BLOOD_POOL])
update.c:310:					ch->blood[BLOOD_CURRENT] += number_range (1, 2);
update.c:311:					if (ch->blood[BLOOD_CURRENT] > ch->blood[BLOOD_POOL])
update.c:312:						ch->blood[BLOOD_CURRENT] = ch->blood[BLOOD_POOL];
update.c:315:				if (ch->loc_hp[6] > 0)
update.c:318:					(*skill_table[sn].spell_fun) (sn, ch->level, ch, ch);
update.c:324:				if (ch->loc_hp[6] > 0)
update.c:327:					(*skill_table[sn].spell_fun) (sn, ch->level, ch, ch);
update.c:333:		if (IS_AFFECTED (ch, AFF_CHARM) || IS_EXTRA (ch, EXTRA_ILLUSION) || ch->wizard != NULL)
update.c:337:		if (ch->spec_fun != 0)
update.c:339:			if ((*ch->spec_fun) (ch))
update.c:347:		if (ch->position != POS_STANDING)
update.c:351:		if (ch->in_room->area->nplayer > 0)
update.c:357:			if (ch->position < POS_STANDING)
update.c:363:		if (IS_SET (ch->act, ACT_SCAVENGER) && ch->in_room->contents != NULL && number_bits (2) == 0)
update.c:371:			for (obj = ch->in_room->contents; obj; obj = obj->next_content)
update.c:392:		if (!IS_SET (ch->act, ACT_SENTINEL) && (door = number_bits (5)) <= 5 && (pexit = ch->in_room->exit[door]) != NULL && pexit->to_room != NULL && !IS_SET (pexit->exit_info, EX_CLOSED) && !IS_SET (pexit->to_room->room_flags, ROOM_NO_MOB) && (ch->hunting == NULL || strlen (ch->hunting) < 2) && ((!IS_SET (ch->act, ACT_STAY_AREA) && ch->level < 900) || pexit->to_room->area == ch->in_room->area))
update.c:397:			if (ch->position < POS_STANDING)
update.c:403:		if (ch->hit < ch->max_hit / 2 && (door = number_bits (3)) <= 5 && (pexit = ch->in_room->exit[door]) != NULL && pexit->to_room != NULL && !IS_AFFECTED (ch, AFF_WEBBED) && ch->level < 900 && !IS_SET (pexit->exit_info, EX_CLOSED) && !IS_SET (pexit->to_room->room_flags, ROOM_NO_MOB))
update.c:409:			for (rch = pexit->to_room->people; rch != NULL; rch = rch->next_in_room)
update.c:444:			if (IS_WEREWOLF (ch) && ch->pcdata->gnosis[0] < ch->pcdata->gnosis[1])
update.c:446:				ch->pcdata->gnosis[0] += number_range (5, 10);
update.c:447:				if (ch->pcdata->gnosis[0] > ch->pcdata->gnosis[1])
update.c:448:					ch->pcdata->gnosis[0] = ch->pcdata->gnosis[1];
update.c:451:			if (ch->pcdata->willpower[0] > ch->pcdata->willpower[1])
update.c:452:				ch->pcdata->willpower[0] = ch->pcdata->willpower[1];
update.c:454:				REMOVE_BIT (ch->more, MORE_INFORM);
update.c:458:				REMOVE_BIT (ch->more, MORE_COURAGE);
update.c:463:				REMOVE_BIT (ch->more, MORE_CALM);
update.c:465:			if (IS_MORE (ch, MORE_ANGER) && number_percent () < 50 && ch->pcdata->wolf < 1)
update.c:468:				REMOVE_BIT (ch->more, MORE_ANGER);
update.c:476:				REMOVE_BIT (ch->more2, MORE2_DEIMOSWHISPERS);
update.c:483:					REMOVE_BIT (ch->more2, MORE2_DEIMOSSANGUIN);
update.c:487:					if (ch->blood[BLOOD_CURRENT] > 1)
update.c:491:						ch->blood[BLOOD_CURRENT] -= 1;
update.c:499:				if (ch->hit > 0)
update.c:503:					ch->hit -= number_range (1, 2);
update.c:505:				if (ch->hit < -10)
update.c:506:					ch->hit = -10;
update.c:511:				if (ch->hit > 0)
update.c:515:					ch->hit -= number_range (1, 2);
update.c:517:				if (ch->hit < -10)
update.c:518:					ch->hit = -10;
update.c:522:			if (IS_VAMPIRE (ch) && IS_MORE2 (ch, MORE2_CHISTOP) && ch->blood[BLOOD_CURRENT] < 1)
update.c:525:				REMOVE_BIT (ch->more2, MORE2_CHISTOP);
update.c:539:				REMOVE_BIT (ch->more, MORE_COURAGE);
update.c:545:				REMOVE_BIT (ch->more, MORE_CALM);
update.c:547:			if (!IS_MORE2 (ch, MORE2_PASSION) && IS_MORE (ch, MORE_ANGER) && number_percent () < 50 && ch->pcdata->wolf < 1)
update.c:550:				REMOVE_BIT (ch->more, MORE_ANGER);
update.c:556:				REMOVE_BIT (ch->more2, MORE2_SENSORYDEPRIVED);
update.c:577:			if (d->connected == CON_PLAYING && (ch = d->character) != NULL && !IS_NPC (ch) && !IS_EXTRA (ch, EXTRA_OSWITCH) && ch->in_room != NULL && ch->in_room->sector_type != SECT_INSIDE && IS_OUTSIDE (ch))
update.c:611:				ch->form = 16;
update.c:613:				REMOVE_BIT (ch->more2, MORE2_BLACKDEATH);
update.c:654:					REMOVE_BIT (ch->more, MORE_NOPAIN);
update.c:659:					if (ch->hit < ch->max_hit)
update.c:661:						ch->hit = ch->max_hit;
update.c:664:					if (ch->move < ch->max_move)
update.c:666:						ch->move = ch->max_move;
update.c:669:					ch->loc_hp[0] = 0;
update.c:670:					ch->loc_hp[1] = 0;
update.c:671:					ch->loc_hp[2] = 0;
update.c:672:					ch->loc_hp[3] = 0;
update.c:673:					ch->loc_hp[4] = 0;
update.c:674:					ch->loc_hp[5] = 0;
update.c:675:					ch->loc_hp[6] = 0;
update.c:694:				if (IS_OUTSIDE (ch) && !IS_SET (ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
update.c:904:	if (ch->pcdata->votes > 3)
update.c:936:		ch_next = ch->next;
update.c:946:				sprintf (buf, "%s has been rewarded %d xp", ch->name, xp);
update.c:951:				ch->exp = ch->exp + xp;
update.c:952:				ch->pcdata->votes = ch->pcdata->votes - 4;
update.c:957:		if (!IS_NPC(ch) && ch->pcdata->blood_burn_counter >= 6)
update.c:962:				if (!strcmp(ch->clan, "Ghoul"))  
update.c:964:				else if(ch->blood[BLOOD_CURRENT] < 3)
update.c:968:					ch->blood[BLOOD_CURRENT] = ch->blood[BLOOD_CURRENT] - 1;
update.c:973:			ch->pcdata->blood_burn_counter = 0;
update.c:978:		if (!IS_NPC(ch) && ch->pcdata->wp_regain_counter >= 8)
update.c:980:			if (ch->pcdata->willpower[WILLPOWER_CURRENT] < ch->pcdata->willpower[WILLPOWER_MAX])
update.c:982:				ch->pcdata->willpower[WILLPOWER_CURRENT] += 1;
update.c:986:			ch->pcdata->wp_regain_counter = 0;
update.c:989:		if (!IS_NPC(ch) && ch->pcdata->auto_vote_counter >= 4)
update.c:991:			ch->pcdata->votes ++;
update.c:992:			ch->pcdata->auto_vote_counter = 0;
update.c:996:		if (!IS_NPC (ch) && IS_SET (ch->extra2, EXTRA2_DAEMON_REGEN))
update.c:999:			REMOVE_BIT (ch->extra2, EXTRA2_DAEMON_REGEN);
update.c:1002:		if (!IS_NPC (ch) && IS_SET (ch->extra2, EXTRA2_TORPORED) && (ch->hit > 0))
update.c:1004:			REMOVE_BIT (ch->extra2, EXTRA2_TORPORED);
update.c:1010:		else if (!IS_NPC (ch) && ch->pcdata->obj_vnum != 0)
update.c:1013:			SET_BIT (ch->extra, EXTRA_OSWITCH);
update.c:1020:		if (!IS_NPC (ch) && (ch->desc == NULL || ch->desc->connected == CON_PLAYING) && ch->level >= 2 && ch->save_time < save_time)
update.c:1023:			save_time = ch->save_time;
update.c:1026:		if (ch->position == POS_STUNNED && !is_obj)
update.c:1036:		if (!IS_NPC (ch) && ch->level < LEVEL_IMMORTAL && !is_obj)
update.c:1042:				if (--obj->value[2] == 0 && ch->in_room != NULL)
update.c:1044:					--ch->in_room->light;
update.c:1051:			if (++ch->timer >= 12)
update.c:1053:				if (ch->was_in_room == NULL && ch->in_room != NULL)
update.c:1055:					ch->was_in_room = ch->in_room;
update.c:1058:					if (!IS_NPC (ch) && ch->pcdata->chobj != NULL)
update.c:1060:						OBJ_DATA *chobj = ch->pcdata->chobj;
update.c:1069:					do_autosave (ch, ch->name);
update.c:1075:			if (ch->timer > 30)
update.c:1083:				if (ch->hit > 0 && ch->blood[BLOOD_CURRENT] < 1)
update.c:1088:					if (ch->hit > 0)
update.c:1089:						ch->hit -= number_range (2, 5);
update.c:1096:				else if (ch->hit > 0 && ch->blood[BLOOD_CURRENT] <= 2)
update.c:1100:					if (number_percent () > (ch->blood[BLOOD_CURRENT] + 5) && !IS_VAMPAFF (ch, VAM_FANGS))
update.c:1106:		for (paf = ch->affected; paf != NULL; paf = paf_next)
update.c:1133:		/*if (ch->loc_hp[6] < 1 && !is_obj && ch->in_room != NULL && !IS_VAMPIRE (ch))
update.c:1135:			if (ch->blood[0] < 10)
update.c:1136:				ch->blood[0]++;
update.c:1138:		if (ch->loc_hp[6] > 0 && !is_obj && ch->in_room != NULL && !IS_VAMPIRE (ch))
update.c:1140:			ch->in_room->blood += number_range (1, 2);
update.c:1141:			if (ch->in_room->blood > 100)
update.c:1142:				ch->in_room->blood = 100;
update.c:1144:		if (IS_AFFECTED (ch, AFF_FLAMING) && !is_obj && !drop_out && ch->in_room != NULL)
update.c:1191:					ch->hit += (per_red * dam * 0.01);
update.c:1193:				ch->hit -= dam;
update.c:1197:				if (ch->position == POS_DEAD)
update.c:1199:					ch->form = 14;
update.c:1209:			if (ch == NULL || ch->position == POS_DEAD)
update.c:1226:			if (ch == NULL || ch->position == POS_DEAD)
update.c:1230:		else if (ch->position == POS_INCAP && !is_obj && !drop_out)
update.c:1232:			if (!IS_SET (ch->extra2, EXTRA2_TORPORED))
update.c:1235:					ch->hit = ch->hit + number_range (2, 4);
update.c:1237:					ch->hit = ch->hit - number_range (1, 2);
update.c:1240:			if (ch->position > POS_INCAP)
update.c:1245:			if (ch->position > POS_STUNNED)
update.c:1251:		else if (ch->position == POS_MORTAL && !is_obj && !drop_out)
update.c:1255:				ch->hit = ch->hit + number_range (2, 4);
update.c:1258:				ch->hit = ch->hit - number_range (1, 2);
update.c:1259:				if ((!IS_NPC (ch) && ch->hit < -10) || (IS_NPC (ch) && ch->hit < 0))
update.c:1262:					ch->form = 16;
update.c:1269:				if (ch->position == POS_INCAP)
update.c:1276:		else if (ch->position == POS_DEAD && !is_obj && !drop_out)
update.c:1280:				ch->form = 16;
update.c:1295:			ch_next = ch->next;
update.c:1297:				do_autosave (ch, ch->name);
update.c:1483:					ch_next = ch->next;
update.c:1485:						do_autosave (ch, ch->name);
update.c:1496:				if (ch->position == POS_FIGHTING && ch->move > 0 && !IS_HERO (ch))
update.c:1497:					ch->move--;
update.c:1498:				if (ch->pcdata->bpoints > 0)
update.c:1500:					ch->pcdata->bpoints--;
update.c:1501:					if (ch->pcdata->bpoints < 1)
update.c:1504:				if (ch->pcdata->dpoints > 0)
update.c:1506:					ch->pcdata->dpoints--;
update.c:1507:					if (ch->pcdata->dpoints < 1)
update.c:1515:								if (ch->pcdata->powers[sn] > 0)
update.c:1517:								ch->pcdata->powers[sn] = 0;
update.c:1526:				if (ch->pcdata->silence > 0)
update.c:1528:					ch->pcdata->silence--;
update.c:1529:					if (ch->pcdata->silence < 1)
update.c:1535:							REMOVE_BIT (ch->in_room->added_flags, ROOM2_SILENCE);
update.c:1536:							REMOVE_BIT (ch->more, MORE_SILENCE);
update.c:1537:							ch->pcdata->silence = 60;
update.c:1543:				if (ch->pcdata->necromancy > 0)
update.c:1545:					ch->pcdata->necromancy--;
update.c:1546:					if (ch->pcdata->necromancy < 1)
update.c:1549:				if (ch->pcdata->rpoints > 0)
update.c:1551:					ch->pcdata->rpoints--;
update.c:1552:					if (ch->pcdata->rpoints < 1)
update.c:1555:				if (ch->pcdata->wpoints > 0)
update.c:1557:					ch->pcdata->wpoints--;
update.c:1558:					if (ch->pcdata->wpoints < 1)
update.c:1561:				if (ch->pcdata->spirit > 0)
update.c:1563:					ch->pcdata->spirit--;
update.c:1564:					if (ch->pcdata->spirit < 1)
update.c:1567:				if (ch->pcdata->conjure > 0)
update.c:1569:					ch->pcdata->conjure--;
update.c:1570:					if (ch->pcdata->conjure < 1)
update.c:1575:				if (ch->pcdata->dementation > 0)
update.c:1577:					ch->pcdata->dementation--;
update.c:1578:					if (ch->pcdata->dementation < 1)
update.c:1583:							REMOVE_BIT (ch->more2, MORE2_HAUNTED);
update.c:1588:							REMOVE_BIT (ch->more2, MORE2_DEMENTATION2);
update.c:1593:							REMOVE_BIT (ch->more2, MORE2_DEMENTATION4);
update.c:1598:							REMOVE_BIT (ch->more2, MORE2_DEMENTATION7);
update.c:1603:							REMOVE_BIT (ch->more2, MORE2_COMA);
update.c:1611:				if (ch->pcdata->obeah > 0 && !IS_MORE (ch, MORE_NEUTRAL))
update.c:1613:					ch->pcdata->obeah--;
update.c:1614:					if (ch->pcdata->obeah < 1)
update.c:1625:				if (ch->pcdata->darkness > 0)
update.c:1627:					ch->pcdata->darkness--;
update.c:1628:					if (ch->pcdata->darkness < 1)
update.c:1634:							REMOVE_BIT (ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
update.c:1635:							REMOVE_BIT (ch->more, MORE_DARKNESS);
update.c:1636:							ch->pcdata->darkness = 60;
update.c:1641:							REMOVE_BIT (ch->more2, MORE2_DRAENORTENTICLES);
update.c:1642:							ch->pcdata->darkness = 60;
update.c:1649:				if (ch->pcdata->reina > 0)
update.c:1651:					ch->pcdata->reina--;
update.c:1652:					if (ch->pcdata->reina < 1)
update.c:1658:							REMOVE_BIT (ch->in_room->room_flags, ROOM_SAFE);
update.c:1659:							REMOVE_BIT (ch->more, MORE_REINA);
update.c:1660:							ch->pcdata->reina = 60;
update.c:1666:				if (ch->pcdata->majesty > 0)
update.c:1668:					ch->pcdata->majesty--;
update.c:1669:					if (ch->pcdata->majesty < 1)
update.c:1677:				if (ch->pcdata->temporis > 0)
update.c:1679:					ch->pcdata->temporis--;
update.c:1680:					if (ch->pcdata->temporis < 1)
update.c:1683:				if (ch->pcdata->devil > 0)	//abombwe thing
update.c:1685:					ch->pcdata->devil--;
update.c:1686:					if (ch->pcdata->devil < 1)
update.c:1690:				if (ch->pcdata->firstaid > 0)
update.c:1691:					ch->pcdata->firstaid--;
update.c:1692:				if (ch->pcdata->repair > 0)
update.c:1693:					ch->pcdata->repair--;
update.c:1694:				if (ch->pcdata->evileye > 0)
update.c:1695:					ch->pcdata->evileye--;
update.c:1696:				if (ch->pcdata->diableries[DIAB_TIME] > 0)
update.c:1697:					ch->pcdata->diableries[DIAB_TIME]--;
update.c:1699:				if (ch->pcdata->resist[WILL_AUSPEX] > 0)
update.c:1701:					ch->pcdata->resist[WILL_AUSPEX]--;
update.c:1702:					if (ch->pcdata->resist[WILL_AUSPEX] < 1)
update.c:1706:							REMOVE_BIT (ch->pcdata->resist[0], RES_AUSPEX);
update.c:1709:				if (ch->pcdata->resist[WILL_DOMINATE] > 0)
update.c:1711:					ch->pcdata->resist[WILL_DOMINATE]--;
update.c:1712:					if (ch->pcdata->resist[WILL_DOMINATE] < 1)
update.c:1716:							REMOVE_BIT (ch->pcdata->resist[0], RES_DOMINATE);
update.c:1719:				if (ch->pcdata->resist[WILL_PRESENCE] > 0)
update.c:1721:					ch->pcdata->resist[WILL_PRESENCE]--;
update.c:1722:					if (ch->pcdata->resist[WILL_PRESENCE] < 1)
update.c:1726:							REMOVE_BIT (ch->pcdata->resist[0], RES_PRESENCE);
update.c:1779:					ch->pcdata->wp_regain_counter += 1;
update.c:1780:					ch->pcdata->blood_burn_counter += 1;
update.c:1783:					ch->pcdata->auto_vote_counter += 1;
